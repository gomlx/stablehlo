package main

import (
	"fmt"
	"os"
	"os/exec"
	"path"
	"text/template"

	"github.com/gomlx/stablehlo/internal/utils"
	"github.com/gomlx/stablehlo/shapeinference"
	"github.com/janpfeifer/must"
)

const (
	binaryOpsFile = "gen_binary_ops.go"
)

// methodsToExclude from generating the API, they are maintained manually,
// or simply excluded (deprecated methods).
var methodsToExclude = utils.SetWith(
	"BatchNormForInference", "BatchNormForTraining", "BatchNormGradient",
	"And", "Or", "Xor", "Not", "ReduceAnd", "ReduceOr", "ReduceXor", "ScatterAdd")

var (
	execBinaryTemplate = template.Must(
		template.
			New(binaryOpsFile).
			Parse(
				`/***** File generated by ./internal/cmd/ops_generator. Don't edit it directly. *****/

package stablehlo

import (
	"github.com/gomlx/stablehlo/internal/optypes"
)

{{- range .}}
// {{.Name}} implements the corresponding standard binary operation.
func (f *Function) {{.Name}}(lhs, rhs *Value) (*Value, error) {
	return f.binaryOp(optypes.{{.Name}}, lhs, rhs)
}
{{- end}}
`))
)

type BinaryOp struct {
	Name string
}

func GenerateBinaryOps() {
	binaryOps := shapeinference.StandardBinaryOperations.Add(
		shapeinference.ComparisonOperations)
	data := make([]BinaryOp, 0, len(binaryOps))

	for k := range binaryOps {
		data = append(data, BinaryOp{Name: k.String()})
	}

	fileName := binaryOpsFile
	f := must.M1(os.Create(fileName))
	must.M(execBinaryTemplate.Execute(f, data))
	must.M(f.Close())

	cmd := exec.Command("gofmt", "-w", fileName)
	must.M(cmd.Run())
	fmt.Printf("âœ… Successfully generated %s\n", path.Join(must.M1(os.Getwd()), fileName))
}
