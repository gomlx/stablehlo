// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 94, 111, 117, 127, 130, 141, 160, 165, 171, 175, 183, 187, 190, 200, 208, 215, 222, 230, 236, 239, 241, 247, 252, 256, 265, 272, 287, 303, 308, 317, 337, 354, 358, 362, 367, 371, 379, 382, 386, 389, 410, 430, 447, 461, 465, 473, 492, 509, 518, 529, 536, 547, 557, 578, 589, 602, 613, 623, 637, 655, 658, 674, 689, 691, 697, 716, 723, 726, 737, 741, 747, 762, 775, 787, 794, 809, 816, 822, 838, 842, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhxorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendtransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Cosine-(14)]
	_ = x[CountLeadingZeros-(15)]
	_ = x[Divide-(16)]
	_ = x[DotGeneral-(17)]
	_ = x[Erf-(18)]
	_ = x[Exponential-(19)]
	_ = x[ExponentialMinusOne-(20)]
	_ = x[Floor-(21)]
	_ = x[Gather-(22)]
	_ = x[Imag-(23)]
	_ = x[IsFinite-(24)]
	_ = x[Iota-(25)]
	_ = x[Log-(26)]
	_ = x[LogPlusOne-(27)]
	_ = x[Logistic-(28)]
	_ = x[Maximum-(29)]
	_ = x[Minimum-(30)]
	_ = x[Multiply-(31)]
	_ = x[Negate-(32)]
	_ = x[Not-(33)]
	_ = x[Or-(34)]
	_ = x[Popcnt-(35)]
	_ = x[Power-(36)]
	_ = x[Real-(37)]
	_ = x[Remainder-(38)]
	_ = x[Reshape-(39)]
	_ = x[RoundNearestAfz-(40)]
	_ = x[RoundNearestEven-(41)]
	_ = x[Rsqrt-(42)]
	_ = x[ShiftLeft-(43)]
	_ = x[ShiftRightArithmetic-(44)]
	_ = x[ShiftRightLogical-(45)]
	_ = x[Sign-(46)]
	_ = x[Sine-(47)]
	_ = x[Slice-(48)]
	_ = x[Sqrt-(49)]
	_ = x[Subtract-(50)]
	_ = x[Tan-(51)]
	_ = x[Tanh-(52)]
	_ = x[Xor-(53)]
	_ = x[BatchNormForInference-(54)]
	_ = x[BatchNormForTraining-(55)]
	_ = x[BatchNormGradient-(56)]
	_ = x[BitcastConvert-(57)]
	_ = x[Case-(58)]
	_ = x[Cholesky-(59)]
	_ = x[CollectiveBroadcast-(60)]
	_ = x[CollectivePermute-(61)]
	_ = x[Composite-(62)]
	_ = x[Concatenate-(63)]
	_ = x[Convert-(64)]
	_ = x[Convolution-(65)]
	_ = x[CustomCall-(66)]
	_ = x[DynamicBroadcastInDim-(67)]
	_ = x[DynamicConv-(68)]
	_ = x[DynamicGather-(69)]
	_ = x[DynamicIota-(70)]
	_ = x[DynamicPad-(71)]
	_ = x[DynamicReshape-(72)]
	_ = x[DynamicUpdateSlice-(73)]
	_ = x[Fft-(74)]
	_ = x[GetDimensionSize-(75)]
	_ = x[GetTupleElement-(76)]
	_ = x[If-(77)]
	_ = x[Infeed-(78)]
	_ = x[OptimizationBarrier-(79)]
	_ = x[Outfeed-(80)]
	_ = x[Pad-(81)]
	_ = x[PartitionId-(82)]
	_ = x[Recv-(83)]
	_ = x[Reduce-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Transpose-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:94]:        Cosine,
	_OpTypeLowerName[88:94]:   Cosine,
	_OpTypeName[94:111]:       CountLeadingZeros,
	_OpTypeLowerName[94:111]:  CountLeadingZeros,
	_OpTypeName[111:117]:      Divide,
	_OpTypeLowerName[111:117]: Divide,
	_OpTypeName[117:127]:      DotGeneral,
	_OpTypeLowerName[117:127]: DotGeneral,
	_OpTypeName[127:130]:      Erf,
	_OpTypeLowerName[127:130]: Erf,
	_OpTypeName[130:141]:      Exponential,
	_OpTypeLowerName[130:141]: Exponential,
	_OpTypeName[141:160]:      ExponentialMinusOne,
	_OpTypeLowerName[141:160]: ExponentialMinusOne,
	_OpTypeName[160:165]:      Floor,
	_OpTypeLowerName[160:165]: Floor,
	_OpTypeName[165:171]:      Gather,
	_OpTypeLowerName[165:171]: Gather,
	_OpTypeName[171:175]:      Imag,
	_OpTypeLowerName[171:175]: Imag,
	_OpTypeName[175:183]:      IsFinite,
	_OpTypeLowerName[175:183]: IsFinite,
	_OpTypeName[183:187]:      Iota,
	_OpTypeLowerName[183:187]: Iota,
	_OpTypeName[187:190]:      Log,
	_OpTypeLowerName[187:190]: Log,
	_OpTypeName[190:200]:      LogPlusOne,
	_OpTypeLowerName[190:200]: LogPlusOne,
	_OpTypeName[200:208]:      Logistic,
	_OpTypeLowerName[200:208]: Logistic,
	_OpTypeName[208:215]:      Maximum,
	_OpTypeLowerName[208:215]: Maximum,
	_OpTypeName[215:222]:      Minimum,
	_OpTypeLowerName[215:222]: Minimum,
	_OpTypeName[222:230]:      Multiply,
	_OpTypeLowerName[222:230]: Multiply,
	_OpTypeName[230:236]:      Negate,
	_OpTypeLowerName[230:236]: Negate,
	_OpTypeName[236:239]:      Not,
	_OpTypeLowerName[236:239]: Not,
	_OpTypeName[239:241]:      Or,
	_OpTypeLowerName[239:241]: Or,
	_OpTypeName[241:247]:      Popcnt,
	_OpTypeLowerName[241:247]: Popcnt,
	_OpTypeName[247:252]:      Power,
	_OpTypeLowerName[247:252]: Power,
	_OpTypeName[252:256]:      Real,
	_OpTypeLowerName[252:256]: Real,
	_OpTypeName[256:265]:      Remainder,
	_OpTypeLowerName[256:265]: Remainder,
	_OpTypeName[265:272]:      Reshape,
	_OpTypeLowerName[265:272]: Reshape,
	_OpTypeName[272:287]:      RoundNearestAfz,
	_OpTypeLowerName[272:287]: RoundNearestAfz,
	_OpTypeName[287:303]:      RoundNearestEven,
	_OpTypeLowerName[287:303]: RoundNearestEven,
	_OpTypeName[303:308]:      Rsqrt,
	_OpTypeLowerName[303:308]: Rsqrt,
	_OpTypeName[308:317]:      ShiftLeft,
	_OpTypeLowerName[308:317]: ShiftLeft,
	_OpTypeName[317:337]:      ShiftRightArithmetic,
	_OpTypeLowerName[317:337]: ShiftRightArithmetic,
	_OpTypeName[337:354]:      ShiftRightLogical,
	_OpTypeLowerName[337:354]: ShiftRightLogical,
	_OpTypeName[354:358]:      Sign,
	_OpTypeLowerName[354:358]: Sign,
	_OpTypeName[358:362]:      Sine,
	_OpTypeLowerName[358:362]: Sine,
	_OpTypeName[362:367]:      Slice,
	_OpTypeLowerName[362:367]: Slice,
	_OpTypeName[367:371]:      Sqrt,
	_OpTypeLowerName[367:371]: Sqrt,
	_OpTypeName[371:379]:      Subtract,
	_OpTypeLowerName[371:379]: Subtract,
	_OpTypeName[379:382]:      Tan,
	_OpTypeLowerName[379:382]: Tan,
	_OpTypeName[382:386]:      Tanh,
	_OpTypeLowerName[382:386]: Tanh,
	_OpTypeName[386:389]:      Xor,
	_OpTypeLowerName[386:389]: Xor,
	_OpTypeName[389:410]:      BatchNormForInference,
	_OpTypeLowerName[389:410]: BatchNormForInference,
	_OpTypeName[410:430]:      BatchNormForTraining,
	_OpTypeLowerName[410:430]: BatchNormForTraining,
	_OpTypeName[430:447]:      BatchNormGradient,
	_OpTypeLowerName[430:447]: BatchNormGradient,
	_OpTypeName[447:461]:      BitcastConvert,
	_OpTypeLowerName[447:461]: BitcastConvert,
	_OpTypeName[461:465]:      Case,
	_OpTypeLowerName[461:465]: Case,
	_OpTypeName[465:473]:      Cholesky,
	_OpTypeLowerName[465:473]: Cholesky,
	_OpTypeName[473:492]:      CollectiveBroadcast,
	_OpTypeLowerName[473:492]: CollectiveBroadcast,
	_OpTypeName[492:509]:      CollectivePermute,
	_OpTypeLowerName[492:509]: CollectivePermute,
	_OpTypeName[509:518]:      Composite,
	_OpTypeLowerName[509:518]: Composite,
	_OpTypeName[518:529]:      Concatenate,
	_OpTypeLowerName[518:529]: Concatenate,
	_OpTypeName[529:536]:      Convert,
	_OpTypeLowerName[529:536]: Convert,
	_OpTypeName[536:547]:      Convolution,
	_OpTypeLowerName[536:547]: Convolution,
	_OpTypeName[547:557]:      CustomCall,
	_OpTypeLowerName[547:557]: CustomCall,
	_OpTypeName[557:578]:      DynamicBroadcastInDim,
	_OpTypeLowerName[557:578]: DynamicBroadcastInDim,
	_OpTypeName[578:589]:      DynamicConv,
	_OpTypeLowerName[578:589]: DynamicConv,
	_OpTypeName[589:602]:      DynamicGather,
	_OpTypeLowerName[589:602]: DynamicGather,
	_OpTypeName[602:613]:      DynamicIota,
	_OpTypeLowerName[602:613]: DynamicIota,
	_OpTypeName[613:623]:      DynamicPad,
	_OpTypeLowerName[613:623]: DynamicPad,
	_OpTypeName[623:637]:      DynamicReshape,
	_OpTypeLowerName[623:637]: DynamicReshape,
	_OpTypeName[637:655]:      DynamicUpdateSlice,
	_OpTypeLowerName[637:655]: DynamicUpdateSlice,
	_OpTypeName[655:658]:      Fft,
	_OpTypeLowerName[655:658]: Fft,
	_OpTypeName[658:674]:      GetDimensionSize,
	_OpTypeLowerName[658:674]: GetDimensionSize,
	_OpTypeName[674:689]:      GetTupleElement,
	_OpTypeLowerName[674:689]: GetTupleElement,
	_OpTypeName[689:691]:      If,
	_OpTypeLowerName[689:691]: If,
	_OpTypeName[691:697]:      Infeed,
	_OpTypeLowerName[691:697]: Infeed,
	_OpTypeName[697:716]:      OptimizationBarrier,
	_OpTypeLowerName[697:716]: OptimizationBarrier,
	_OpTypeName[716:723]:      Outfeed,
	_OpTypeLowerName[716:723]: Outfeed,
	_OpTypeName[723:726]:      Pad,
	_OpTypeLowerName[723:726]: Pad,
	_OpTypeName[726:737]:      PartitionId,
	_OpTypeLowerName[726:737]: PartitionId,
	_OpTypeName[737:741]:      Recv,
	_OpTypeLowerName[737:741]: Recv,
	_OpTypeName[741:747]:      Reduce,
	_OpTypeLowerName[741:747]: Reduce,
	_OpTypeName[747:762]:      ReducePrecision,
	_OpTypeLowerName[747:762]: ReducePrecision,
	_OpTypeName[762:775]:      ReduceScatter,
	_OpTypeLowerName[762:775]: ReduceScatter,
	_OpTypeName[775:787]:      ReduceWindow,
	_OpTypeLowerName[775:787]: ReduceWindow,
	_OpTypeName[787:794]:      Reverse,
	_OpTypeLowerName[787:794]: Reverse,
	_OpTypeName[794:809]:      RngBitGenerator,
	_OpTypeLowerName[794:809]: RngBitGenerator,
	_OpTypeName[809:816]:      Scatter,
	_OpTypeLowerName[809:816]: Scatter,
	_OpTypeName[816:822]:      Select,
	_OpTypeLowerName[816:822]: Select,
	_OpTypeName[822:838]:      SelectAndScatter,
	_OpTypeLowerName[822:838]: SelectAndScatter,
	_OpTypeName[838:842]:      Send,
	_OpTypeLowerName[838:842]: Send,
	_OpTypeName[842:851]:      Transpose,
	_OpTypeLowerName[842:851]: Transpose,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:94],
	_OpTypeName[94:111],
	_OpTypeName[111:117],
	_OpTypeName[117:127],
	_OpTypeName[127:130],
	_OpTypeName[130:141],
	_OpTypeName[141:160],
	_OpTypeName[160:165],
	_OpTypeName[165:171],
	_OpTypeName[171:175],
	_OpTypeName[175:183],
	_OpTypeName[183:187],
	_OpTypeName[187:190],
	_OpTypeName[190:200],
	_OpTypeName[200:208],
	_OpTypeName[208:215],
	_OpTypeName[215:222],
	_OpTypeName[222:230],
	_OpTypeName[230:236],
	_OpTypeName[236:239],
	_OpTypeName[239:241],
	_OpTypeName[241:247],
	_OpTypeName[247:252],
	_OpTypeName[252:256],
	_OpTypeName[256:265],
	_OpTypeName[265:272],
	_OpTypeName[272:287],
	_OpTypeName[287:303],
	_OpTypeName[303:308],
	_OpTypeName[308:317],
	_OpTypeName[317:337],
	_OpTypeName[337:354],
	_OpTypeName[354:358],
	_OpTypeName[358:362],
	_OpTypeName[362:367],
	_OpTypeName[367:371],
	_OpTypeName[371:379],
	_OpTypeName[379:382],
	_OpTypeName[382:386],
	_OpTypeName[386:389],
	_OpTypeName[389:410],
	_OpTypeName[410:430],
	_OpTypeName[430:447],
	_OpTypeName[447:461],
	_OpTypeName[461:465],
	_OpTypeName[465:473],
	_OpTypeName[473:492],
	_OpTypeName[492:509],
	_OpTypeName[509:518],
	_OpTypeName[518:529],
	_OpTypeName[529:536],
	_OpTypeName[536:547],
	_OpTypeName[547:557],
	_OpTypeName[557:578],
	_OpTypeName[578:589],
	_OpTypeName[589:602],
	_OpTypeName[602:613],
	_OpTypeName[613:623],
	_OpTypeName[623:637],
	_OpTypeName[637:655],
	_OpTypeName[655:658],
	_OpTypeName[658:674],
	_OpTypeName[674:689],
	_OpTypeName[689:691],
	_OpTypeName[691:697],
	_OpTypeName[697:716],
	_OpTypeName[716:723],
	_OpTypeName[723:726],
	_OpTypeName[726:737],
	_OpTypeName[737:741],
	_OpTypeName[741:747],
	_OpTypeName[747:762],
	_OpTypeName[762:775],
	_OpTypeName[775:787],
	_OpTypeName[787:794],
	_OpTypeName[794:809],
	_OpTypeName[809:816],
	_OpTypeName[816:822],
	_OpTypeName[822:838],
	_OpTypeName[838:842],
	_OpTypeName[842:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
