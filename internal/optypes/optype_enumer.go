// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGatherGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 94, 111, 117, 127, 130, 141, 160, 165, 169, 177, 181, 184, 194, 202, 209, 216, 224, 230, 233, 235, 241, 246, 250, 259, 266, 281, 297, 302, 311, 331, 348, 352, 356, 360, 368, 371, 375, 378, 387, 408, 428, 445, 459, 463, 471, 490, 507, 516, 527, 534, 545, 555, 576, 587, 600, 611, 621, 635, 653, 656, 662, 678, 693, 695, 701, 720, 727, 730, 741, 745, 751, 766, 779, 791, 798, 813, 820, 826, 842, 846, 851, 860, 875, 880, 897, 912, 917, 921}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgathergetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Cosine-(14)]
	_ = x[CountLeadingZeros-(15)]
	_ = x[Divide-(16)]
	_ = x[DotGeneral-(17)]
	_ = x[Erf-(18)]
	_ = x[Exponential-(19)]
	_ = x[ExponentialMinusOne-(20)]
	_ = x[Floor-(21)]
	_ = x[Imag-(22)]
	_ = x[IsFinite-(23)]
	_ = x[Iota-(24)]
	_ = x[Log-(25)]
	_ = x[LogPlusOne-(26)]
	_ = x[Logistic-(27)]
	_ = x[Maximum-(28)]
	_ = x[Minimum-(29)]
	_ = x[Multiply-(30)]
	_ = x[Negate-(31)]
	_ = x[Not-(32)]
	_ = x[Or-(33)]
	_ = x[Popcnt-(34)]
	_ = x[Power-(35)]
	_ = x[Real-(36)]
	_ = x[Remainder-(37)]
	_ = x[Reshape-(38)]
	_ = x[RoundNearestAfz-(39)]
	_ = x[RoundNearestEven-(40)]
	_ = x[Rsqrt-(41)]
	_ = x[ShiftLeft-(42)]
	_ = x[ShiftRightArithmetic-(43)]
	_ = x[ShiftRightLogical-(44)]
	_ = x[Sign-(45)]
	_ = x[Sine-(46)]
	_ = x[Sqrt-(47)]
	_ = x[Subtract-(48)]
	_ = x[Tan-(49)]
	_ = x[Tanh-(50)]
	_ = x[Xor-(51)]
	_ = x[ArgMinMax-(52)]
	_ = x[BatchNormForInference-(53)]
	_ = x[BatchNormForTraining-(54)]
	_ = x[BatchNormGradient-(55)]
	_ = x[BitcastConvert-(56)]
	_ = x[Case-(57)]
	_ = x[Cholesky-(58)]
	_ = x[CollectiveBroadcast-(59)]
	_ = x[CollectivePermute-(60)]
	_ = x[Composite-(61)]
	_ = x[Concatenate-(62)]
	_ = x[Convert-(63)]
	_ = x[Convolution-(64)]
	_ = x[CustomCall-(65)]
	_ = x[DynamicBroadcastInDim-(66)]
	_ = x[DynamicConv-(67)]
	_ = x[DynamicGather-(68)]
	_ = x[DynamicIota-(69)]
	_ = x[DynamicPad-(70)]
	_ = x[DynamicReshape-(71)]
	_ = x[DynamicUpdateSlice-(72)]
	_ = x[Fft-(73)]
	_ = x[Gather-(74)]
	_ = x[GetDimensionSize-(75)]
	_ = x[GetTupleElement-(76)]
	_ = x[If-(77)]
	_ = x[Infeed-(78)]
	_ = x[OptimizationBarrier-(79)]
	_ = x[Outfeed-(80)]
	_ = x[Pad-(81)]
	_ = x[PartitionId-(82)]
	_ = x[Recv-(83)]
	_ = x[Reduce-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Slice-(94)]
	_ = x[Transpose-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, ArgMinMax, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, Gather, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:94]:        Cosine,
	_OpTypeLowerName[88:94]:   Cosine,
	_OpTypeName[94:111]:       CountLeadingZeros,
	_OpTypeLowerName[94:111]:  CountLeadingZeros,
	_OpTypeName[111:117]:      Divide,
	_OpTypeLowerName[111:117]: Divide,
	_OpTypeName[117:127]:      DotGeneral,
	_OpTypeLowerName[117:127]: DotGeneral,
	_OpTypeName[127:130]:      Erf,
	_OpTypeLowerName[127:130]: Erf,
	_OpTypeName[130:141]:      Exponential,
	_OpTypeLowerName[130:141]: Exponential,
	_OpTypeName[141:160]:      ExponentialMinusOne,
	_OpTypeLowerName[141:160]: ExponentialMinusOne,
	_OpTypeName[160:165]:      Floor,
	_OpTypeLowerName[160:165]: Floor,
	_OpTypeName[165:169]:      Imag,
	_OpTypeLowerName[165:169]: Imag,
	_OpTypeName[169:177]:      IsFinite,
	_OpTypeLowerName[169:177]: IsFinite,
	_OpTypeName[177:181]:      Iota,
	_OpTypeLowerName[177:181]: Iota,
	_OpTypeName[181:184]:      Log,
	_OpTypeLowerName[181:184]: Log,
	_OpTypeName[184:194]:      LogPlusOne,
	_OpTypeLowerName[184:194]: LogPlusOne,
	_OpTypeName[194:202]:      Logistic,
	_OpTypeLowerName[194:202]: Logistic,
	_OpTypeName[202:209]:      Maximum,
	_OpTypeLowerName[202:209]: Maximum,
	_OpTypeName[209:216]:      Minimum,
	_OpTypeLowerName[209:216]: Minimum,
	_OpTypeName[216:224]:      Multiply,
	_OpTypeLowerName[216:224]: Multiply,
	_OpTypeName[224:230]:      Negate,
	_OpTypeLowerName[224:230]: Negate,
	_OpTypeName[230:233]:      Not,
	_OpTypeLowerName[230:233]: Not,
	_OpTypeName[233:235]:      Or,
	_OpTypeLowerName[233:235]: Or,
	_OpTypeName[235:241]:      Popcnt,
	_OpTypeLowerName[235:241]: Popcnt,
	_OpTypeName[241:246]:      Power,
	_OpTypeLowerName[241:246]: Power,
	_OpTypeName[246:250]:      Real,
	_OpTypeLowerName[246:250]: Real,
	_OpTypeName[250:259]:      Remainder,
	_OpTypeLowerName[250:259]: Remainder,
	_OpTypeName[259:266]:      Reshape,
	_OpTypeLowerName[259:266]: Reshape,
	_OpTypeName[266:281]:      RoundNearestAfz,
	_OpTypeLowerName[266:281]: RoundNearestAfz,
	_OpTypeName[281:297]:      RoundNearestEven,
	_OpTypeLowerName[281:297]: RoundNearestEven,
	_OpTypeName[297:302]:      Rsqrt,
	_OpTypeLowerName[297:302]: Rsqrt,
	_OpTypeName[302:311]:      ShiftLeft,
	_OpTypeLowerName[302:311]: ShiftLeft,
	_OpTypeName[311:331]:      ShiftRightArithmetic,
	_OpTypeLowerName[311:331]: ShiftRightArithmetic,
	_OpTypeName[331:348]:      ShiftRightLogical,
	_OpTypeLowerName[331:348]: ShiftRightLogical,
	_OpTypeName[348:352]:      Sign,
	_OpTypeLowerName[348:352]: Sign,
	_OpTypeName[352:356]:      Sine,
	_OpTypeLowerName[352:356]: Sine,
	_OpTypeName[356:360]:      Sqrt,
	_OpTypeLowerName[356:360]: Sqrt,
	_OpTypeName[360:368]:      Subtract,
	_OpTypeLowerName[360:368]: Subtract,
	_OpTypeName[368:371]:      Tan,
	_OpTypeLowerName[368:371]: Tan,
	_OpTypeName[371:375]:      Tanh,
	_OpTypeLowerName[371:375]: Tanh,
	_OpTypeName[375:378]:      Xor,
	_OpTypeLowerName[375:378]: Xor,
	_OpTypeName[378:387]:      ArgMinMax,
	_OpTypeLowerName[378:387]: ArgMinMax,
	_OpTypeName[387:408]:      BatchNormForInference,
	_OpTypeLowerName[387:408]: BatchNormForInference,
	_OpTypeName[408:428]:      BatchNormForTraining,
	_OpTypeLowerName[408:428]: BatchNormForTraining,
	_OpTypeName[428:445]:      BatchNormGradient,
	_OpTypeLowerName[428:445]: BatchNormGradient,
	_OpTypeName[445:459]:      BitcastConvert,
	_OpTypeLowerName[445:459]: BitcastConvert,
	_OpTypeName[459:463]:      Case,
	_OpTypeLowerName[459:463]: Case,
	_OpTypeName[463:471]:      Cholesky,
	_OpTypeLowerName[463:471]: Cholesky,
	_OpTypeName[471:490]:      CollectiveBroadcast,
	_OpTypeLowerName[471:490]: CollectiveBroadcast,
	_OpTypeName[490:507]:      CollectivePermute,
	_OpTypeLowerName[490:507]: CollectivePermute,
	_OpTypeName[507:516]:      Composite,
	_OpTypeLowerName[507:516]: Composite,
	_OpTypeName[516:527]:      Concatenate,
	_OpTypeLowerName[516:527]: Concatenate,
	_OpTypeName[527:534]:      Convert,
	_OpTypeLowerName[527:534]: Convert,
	_OpTypeName[534:545]:      Convolution,
	_OpTypeLowerName[534:545]: Convolution,
	_OpTypeName[545:555]:      CustomCall,
	_OpTypeLowerName[545:555]: CustomCall,
	_OpTypeName[555:576]:      DynamicBroadcastInDim,
	_OpTypeLowerName[555:576]: DynamicBroadcastInDim,
	_OpTypeName[576:587]:      DynamicConv,
	_OpTypeLowerName[576:587]: DynamicConv,
	_OpTypeName[587:600]:      DynamicGather,
	_OpTypeLowerName[587:600]: DynamicGather,
	_OpTypeName[600:611]:      DynamicIota,
	_OpTypeLowerName[600:611]: DynamicIota,
	_OpTypeName[611:621]:      DynamicPad,
	_OpTypeLowerName[611:621]: DynamicPad,
	_OpTypeName[621:635]:      DynamicReshape,
	_OpTypeLowerName[621:635]: DynamicReshape,
	_OpTypeName[635:653]:      DynamicUpdateSlice,
	_OpTypeLowerName[635:653]: DynamicUpdateSlice,
	_OpTypeName[653:656]:      Fft,
	_OpTypeLowerName[653:656]: Fft,
	_OpTypeName[656:662]:      Gather,
	_OpTypeLowerName[656:662]: Gather,
	_OpTypeName[662:678]:      GetDimensionSize,
	_OpTypeLowerName[662:678]: GetDimensionSize,
	_OpTypeName[678:693]:      GetTupleElement,
	_OpTypeLowerName[678:693]: GetTupleElement,
	_OpTypeName[693:695]:      If,
	_OpTypeLowerName[693:695]: If,
	_OpTypeName[695:701]:      Infeed,
	_OpTypeLowerName[695:701]: Infeed,
	_OpTypeName[701:720]:      OptimizationBarrier,
	_OpTypeLowerName[701:720]: OptimizationBarrier,
	_OpTypeName[720:727]:      Outfeed,
	_OpTypeLowerName[720:727]: Outfeed,
	_OpTypeName[727:730]:      Pad,
	_OpTypeLowerName[727:730]: Pad,
	_OpTypeName[730:741]:      PartitionId,
	_OpTypeLowerName[730:741]: PartitionId,
	_OpTypeName[741:745]:      Recv,
	_OpTypeLowerName[741:745]: Recv,
	_OpTypeName[745:751]:      Reduce,
	_OpTypeLowerName[745:751]: Reduce,
	_OpTypeName[751:766]:      ReducePrecision,
	_OpTypeLowerName[751:766]: ReducePrecision,
	_OpTypeName[766:779]:      ReduceScatter,
	_OpTypeLowerName[766:779]: ReduceScatter,
	_OpTypeName[779:791]:      ReduceWindow,
	_OpTypeLowerName[779:791]: ReduceWindow,
	_OpTypeName[791:798]:      Reverse,
	_OpTypeLowerName[791:798]: Reverse,
	_OpTypeName[798:813]:      RngBitGenerator,
	_OpTypeLowerName[798:813]: RngBitGenerator,
	_OpTypeName[813:820]:      Scatter,
	_OpTypeLowerName[813:820]: Scatter,
	_OpTypeName[820:826]:      Select,
	_OpTypeLowerName[820:826]: Select,
	_OpTypeName[826:842]:      SelectAndScatter,
	_OpTypeLowerName[826:842]: SelectAndScatter,
	_OpTypeName[842:846]:      Send,
	_OpTypeLowerName[842:846]: Send,
	_OpTypeName[846:851]:      Slice,
	_OpTypeLowerName[846:851]: Slice,
	_OpTypeName[851:860]:      Transpose,
	_OpTypeLowerName[851:860]: Transpose,
	_OpTypeName[860:875]:      TriangularSolve,
	_OpTypeLowerName[860:875]: TriangularSolve,
	_OpTypeName[875:880]:      Tuple,
	_OpTypeLowerName[875:880]: Tuple,
	_OpTypeName[880:897]:      UniformDequantize,
	_OpTypeLowerName[880:897]: UniformDequantize,
	_OpTypeName[897:912]:      UniformQuantize,
	_OpTypeLowerName[897:912]: UniformQuantize,
	_OpTypeName[912:917]:      While,
	_OpTypeLowerName[912:917]: While,
	_OpTypeName[917:921]:      Last,
	_OpTypeLowerName[917:921]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:94],
	_OpTypeName[94:111],
	_OpTypeName[111:117],
	_OpTypeName[117:127],
	_OpTypeName[127:130],
	_OpTypeName[130:141],
	_OpTypeName[141:160],
	_OpTypeName[160:165],
	_OpTypeName[165:169],
	_OpTypeName[169:177],
	_OpTypeName[177:181],
	_OpTypeName[181:184],
	_OpTypeName[184:194],
	_OpTypeName[194:202],
	_OpTypeName[202:209],
	_OpTypeName[209:216],
	_OpTypeName[216:224],
	_OpTypeName[224:230],
	_OpTypeName[230:233],
	_OpTypeName[233:235],
	_OpTypeName[235:241],
	_OpTypeName[241:246],
	_OpTypeName[246:250],
	_OpTypeName[250:259],
	_OpTypeName[259:266],
	_OpTypeName[266:281],
	_OpTypeName[281:297],
	_OpTypeName[297:302],
	_OpTypeName[302:311],
	_OpTypeName[311:331],
	_OpTypeName[331:348],
	_OpTypeName[348:352],
	_OpTypeName[352:356],
	_OpTypeName[356:360],
	_OpTypeName[360:368],
	_OpTypeName[368:371],
	_OpTypeName[371:375],
	_OpTypeName[375:378],
	_OpTypeName[378:387],
	_OpTypeName[387:408],
	_OpTypeName[408:428],
	_OpTypeName[428:445],
	_OpTypeName[445:459],
	_OpTypeName[459:463],
	_OpTypeName[463:471],
	_OpTypeName[471:490],
	_OpTypeName[490:507],
	_OpTypeName[507:516],
	_OpTypeName[516:527],
	_OpTypeName[527:534],
	_OpTypeName[534:545],
	_OpTypeName[545:555],
	_OpTypeName[555:576],
	_OpTypeName[576:587],
	_OpTypeName[587:600],
	_OpTypeName[600:611],
	_OpTypeName[611:621],
	_OpTypeName[621:635],
	_OpTypeName[635:653],
	_OpTypeName[653:656],
	_OpTypeName[656:662],
	_OpTypeName[662:678],
	_OpTypeName[678:693],
	_OpTypeName[693:695],
	_OpTypeName[695:701],
	_OpTypeName[701:720],
	_OpTypeName[720:727],
	_OpTypeName[727:730],
	_OpTypeName[730:741],
	_OpTypeName[741:745],
	_OpTypeName[745:751],
	_OpTypeName[751:766],
	_OpTypeName[766:779],
	_OpTypeName[779:791],
	_OpTypeName[791:798],
	_OpTypeName[798:813],
	_OpTypeName[813:820],
	_OpTypeName[820:826],
	_OpTypeName[826:842],
	_OpTypeName[842:846],
	_OpTypeName[846:851],
	_OpTypeName[851:860],
	_OpTypeName[860:875],
	_OpTypeName[875:880],
	_OpTypeName[880:897],
	_OpTypeName[897:912],
	_OpTypeName[912:917],
	_OpTypeName[917:921],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
