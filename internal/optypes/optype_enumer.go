// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndArgMinMaxAtan2BatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastBroadcastBroadcastInDimCbrtCeilClampCompareComplexConjCosineCountLeadingZerosDivideErfExponentialExponentialMinusOneFloorImagIotaIsFiniteLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemainderReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeWhereXorLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 51, 56, 77, 97, 114, 121, 130, 144, 148, 152, 157, 164, 171, 175, 181, 198, 204, 207, 218, 237, 242, 246, 250, 258, 261, 271, 279, 286, 293, 301, 307, 310, 312, 315, 321, 326, 330, 346, 361, 377, 393, 408, 424, 433, 442, 455, 464, 476, 485, 492, 499, 514, 529, 545, 550, 560, 570, 580, 599, 618, 637, 646, 666, 683, 687, 691, 696, 700, 708, 711, 715, 724, 729, 732, 736}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandargminmaxatan2batchnormforinferencebatchnormfortrainingbatchnormgradientbitcastbroadcastbroadcastindimcbrtceilclampcomparecomplexconjcosinecountleadingzerosdivideerfexponentialexponentialminusonefloorimagiotaisfiniteloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremainderreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposewherexorlast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[ArgMinMax-(7)]
	_ = x[Atan2-(8)]
	_ = x[BatchNormForInference-(9)]
	_ = x[BatchNormForTraining-(10)]
	_ = x[BatchNormGradient-(11)]
	_ = x[Bitcast-(12)]
	_ = x[Broadcast-(13)]
	_ = x[BroadcastInDim-(14)]
	_ = x[Cbrt-(15)]
	_ = x[Ceil-(16)]
	_ = x[Clamp-(17)]
	_ = x[Compare-(18)]
	_ = x[Complex-(19)]
	_ = x[Conj-(20)]
	_ = x[Cosine-(21)]
	_ = x[CountLeadingZeros-(22)]
	_ = x[Divide-(23)]
	_ = x[Erf-(24)]
	_ = x[Exponential-(25)]
	_ = x[ExponentialMinusOne-(26)]
	_ = x[Floor-(27)]
	_ = x[Imag-(28)]
	_ = x[Iota-(29)]
	_ = x[IsFinite-(30)]
	_ = x[Log-(31)]
	_ = x[LogPlusOne-(32)]
	_ = x[Logistic-(33)]
	_ = x[Maximum-(34)]
	_ = x[Minimum-(35)]
	_ = x[Multiply-(36)]
	_ = x[Negate-(37)]
	_ = x[Not-(38)]
	_ = x[Or-(39)]
	_ = x[Pad-(40)]
	_ = x[Popcnt-(41)]
	_ = x[Power-(42)]
	_ = x[Real-(43)]
	_ = x[ReduceBitwiseAnd-(44)]
	_ = x[ReduceBitwiseOr-(45)]
	_ = x[ReduceBitwiseXor-(46)]
	_ = x[ReduceLogicalAnd-(47)]
	_ = x[ReduceLogicalOr-(48)]
	_ = x[ReduceLogicalXor-(49)]
	_ = x[ReduceMax-(50)]
	_ = x[ReduceMin-(51)]
	_ = x[ReduceProduct-(52)]
	_ = x[ReduceSum-(53)]
	_ = x[ReduceWindow-(54)]
	_ = x[Remainder-(55)]
	_ = x[Reshape-(56)]
	_ = x[Reverse-(57)]
	_ = x[RngBitGenerator-(58)]
	_ = x[RoundNearestAfz-(59)]
	_ = x[RoundNearestEven-(60)]
	_ = x[Rsqrt-(61)]
	_ = x[ScatterMax-(62)]
	_ = x[ScatterMin-(63)]
	_ = x[ScatterSum-(64)]
	_ = x[SelectAndScatterMax-(65)]
	_ = x[SelectAndScatterMin-(66)]
	_ = x[SelectAndScatterSum-(67)]
	_ = x[ShiftLeft-(68)]
	_ = x[ShiftRightArithmetic-(69)]
	_ = x[ShiftRightLogical-(70)]
	_ = x[Sign-(71)]
	_ = x[Sine-(72)]
	_ = x[Slice-(73)]
	_ = x[Sqrt-(74)]
	_ = x[Subtract-(75)]
	_ = x[Tan-(76)]
	_ = x[Tanh-(77)]
	_ = x[Transpose-(78)]
	_ = x[Where-(79)]
	_ = x[Xor-(80)]
	_ = x[Last-(81)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, ArgMinMax, Atan2, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Bitcast, Broadcast, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Conj, Cosine, CountLeadingZeros, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, IsFinite, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, ReduceWindow, Remainder, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Where, Xor, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:51]:        ArgMinMax,
	_OpTypeLowerName[42:51]:   ArgMinMax,
	_OpTypeName[51:56]:        Atan2,
	_OpTypeLowerName[51:56]:   Atan2,
	_OpTypeName[56:77]:        BatchNormForInference,
	_OpTypeLowerName[56:77]:   BatchNormForInference,
	_OpTypeName[77:97]:        BatchNormForTraining,
	_OpTypeLowerName[77:97]:   BatchNormForTraining,
	_OpTypeName[97:114]:       BatchNormGradient,
	_OpTypeLowerName[97:114]:  BatchNormGradient,
	_OpTypeName[114:121]:      Bitcast,
	_OpTypeLowerName[114:121]: Bitcast,
	_OpTypeName[121:130]:      Broadcast,
	_OpTypeLowerName[121:130]: Broadcast,
	_OpTypeName[130:144]:      BroadcastInDim,
	_OpTypeLowerName[130:144]: BroadcastInDim,
	_OpTypeName[144:148]:      Cbrt,
	_OpTypeLowerName[144:148]: Cbrt,
	_OpTypeName[148:152]:      Ceil,
	_OpTypeLowerName[148:152]: Ceil,
	_OpTypeName[152:157]:      Clamp,
	_OpTypeLowerName[152:157]: Clamp,
	_OpTypeName[157:164]:      Compare,
	_OpTypeLowerName[157:164]: Compare,
	_OpTypeName[164:171]:      Complex,
	_OpTypeLowerName[164:171]: Complex,
	_OpTypeName[171:175]:      Conj,
	_OpTypeLowerName[171:175]: Conj,
	_OpTypeName[175:181]:      Cosine,
	_OpTypeLowerName[175:181]: Cosine,
	_OpTypeName[181:198]:      CountLeadingZeros,
	_OpTypeLowerName[181:198]: CountLeadingZeros,
	_OpTypeName[198:204]:      Divide,
	_OpTypeLowerName[198:204]: Divide,
	_OpTypeName[204:207]:      Erf,
	_OpTypeLowerName[204:207]: Erf,
	_OpTypeName[207:218]:      Exponential,
	_OpTypeLowerName[207:218]: Exponential,
	_OpTypeName[218:237]:      ExponentialMinusOne,
	_OpTypeLowerName[218:237]: ExponentialMinusOne,
	_OpTypeName[237:242]:      Floor,
	_OpTypeLowerName[237:242]: Floor,
	_OpTypeName[242:246]:      Imag,
	_OpTypeLowerName[242:246]: Imag,
	_OpTypeName[246:250]:      Iota,
	_OpTypeLowerName[246:250]: Iota,
	_OpTypeName[250:258]:      IsFinite,
	_OpTypeLowerName[250:258]: IsFinite,
	_OpTypeName[258:261]:      Log,
	_OpTypeLowerName[258:261]: Log,
	_OpTypeName[261:271]:      LogPlusOne,
	_OpTypeLowerName[261:271]: LogPlusOne,
	_OpTypeName[271:279]:      Logistic,
	_OpTypeLowerName[271:279]: Logistic,
	_OpTypeName[279:286]:      Maximum,
	_OpTypeLowerName[279:286]: Maximum,
	_OpTypeName[286:293]:      Minimum,
	_OpTypeLowerName[286:293]: Minimum,
	_OpTypeName[293:301]:      Multiply,
	_OpTypeLowerName[293:301]: Multiply,
	_OpTypeName[301:307]:      Negate,
	_OpTypeLowerName[301:307]: Negate,
	_OpTypeName[307:310]:      Not,
	_OpTypeLowerName[307:310]: Not,
	_OpTypeName[310:312]:      Or,
	_OpTypeLowerName[310:312]: Or,
	_OpTypeName[312:315]:      Pad,
	_OpTypeLowerName[312:315]: Pad,
	_OpTypeName[315:321]:      Popcnt,
	_OpTypeLowerName[315:321]: Popcnt,
	_OpTypeName[321:326]:      Power,
	_OpTypeLowerName[321:326]: Power,
	_OpTypeName[326:330]:      Real,
	_OpTypeLowerName[326:330]: Real,
	_OpTypeName[330:346]:      ReduceBitwiseAnd,
	_OpTypeLowerName[330:346]: ReduceBitwiseAnd,
	_OpTypeName[346:361]:      ReduceBitwiseOr,
	_OpTypeLowerName[346:361]: ReduceBitwiseOr,
	_OpTypeName[361:377]:      ReduceBitwiseXor,
	_OpTypeLowerName[361:377]: ReduceBitwiseXor,
	_OpTypeName[377:393]:      ReduceLogicalAnd,
	_OpTypeLowerName[377:393]: ReduceLogicalAnd,
	_OpTypeName[393:408]:      ReduceLogicalOr,
	_OpTypeLowerName[393:408]: ReduceLogicalOr,
	_OpTypeName[408:424]:      ReduceLogicalXor,
	_OpTypeLowerName[408:424]: ReduceLogicalXor,
	_OpTypeName[424:433]:      ReduceMax,
	_OpTypeLowerName[424:433]: ReduceMax,
	_OpTypeName[433:442]:      ReduceMin,
	_OpTypeLowerName[433:442]: ReduceMin,
	_OpTypeName[442:455]:      ReduceProduct,
	_OpTypeLowerName[442:455]: ReduceProduct,
	_OpTypeName[455:464]:      ReduceSum,
	_OpTypeLowerName[455:464]: ReduceSum,
	_OpTypeName[464:476]:      ReduceWindow,
	_OpTypeLowerName[464:476]: ReduceWindow,
	_OpTypeName[476:485]:      Remainder,
	_OpTypeLowerName[476:485]: Remainder,
	_OpTypeName[485:492]:      Reshape,
	_OpTypeLowerName[485:492]: Reshape,
	_OpTypeName[492:499]:      Reverse,
	_OpTypeLowerName[492:499]: Reverse,
	_OpTypeName[499:514]:      RngBitGenerator,
	_OpTypeLowerName[499:514]: RngBitGenerator,
	_OpTypeName[514:529]:      RoundNearestAfz,
	_OpTypeLowerName[514:529]: RoundNearestAfz,
	_OpTypeName[529:545]:      RoundNearestEven,
	_OpTypeLowerName[529:545]: RoundNearestEven,
	_OpTypeName[545:550]:      Rsqrt,
	_OpTypeLowerName[545:550]: Rsqrt,
	_OpTypeName[550:560]:      ScatterMax,
	_OpTypeLowerName[550:560]: ScatterMax,
	_OpTypeName[560:570]:      ScatterMin,
	_OpTypeLowerName[560:570]: ScatterMin,
	_OpTypeName[570:580]:      ScatterSum,
	_OpTypeLowerName[570:580]: ScatterSum,
	_OpTypeName[580:599]:      SelectAndScatterMax,
	_OpTypeLowerName[580:599]: SelectAndScatterMax,
	_OpTypeName[599:618]:      SelectAndScatterMin,
	_OpTypeLowerName[599:618]: SelectAndScatterMin,
	_OpTypeName[618:637]:      SelectAndScatterSum,
	_OpTypeLowerName[618:637]: SelectAndScatterSum,
	_OpTypeName[637:646]:      ShiftLeft,
	_OpTypeLowerName[637:646]: ShiftLeft,
	_OpTypeName[646:666]:      ShiftRightArithmetic,
	_OpTypeLowerName[646:666]: ShiftRightArithmetic,
	_OpTypeName[666:683]:      ShiftRightLogical,
	_OpTypeLowerName[666:683]: ShiftRightLogical,
	_OpTypeName[683:687]:      Sign,
	_OpTypeLowerName[683:687]: Sign,
	_OpTypeName[687:691]:      Sine,
	_OpTypeLowerName[687:691]: Sine,
	_OpTypeName[691:696]:      Slice,
	_OpTypeLowerName[691:696]: Slice,
	_OpTypeName[696:700]:      Sqrt,
	_OpTypeLowerName[696:700]: Sqrt,
	_OpTypeName[700:708]:      Subtract,
	_OpTypeLowerName[700:708]: Subtract,
	_OpTypeName[708:711]:      Tan,
	_OpTypeLowerName[708:711]: Tan,
	_OpTypeName[711:715]:      Tanh,
	_OpTypeLowerName[711:715]: Tanh,
	_OpTypeName[715:724]:      Transpose,
	_OpTypeLowerName[715:724]: Transpose,
	_OpTypeName[724:729]:      Where,
	_OpTypeLowerName[724:729]: Where,
	_OpTypeName[729:732]:      Xor,
	_OpTypeLowerName[729:732]: Xor,
	_OpTypeName[732:736]:      Last,
	_OpTypeLowerName[732:736]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:51],
	_OpTypeName[51:56],
	_OpTypeName[56:77],
	_OpTypeName[77:97],
	_OpTypeName[97:114],
	_OpTypeName[114:121],
	_OpTypeName[121:130],
	_OpTypeName[130:144],
	_OpTypeName[144:148],
	_OpTypeName[148:152],
	_OpTypeName[152:157],
	_OpTypeName[157:164],
	_OpTypeName[164:171],
	_OpTypeName[171:175],
	_OpTypeName[175:181],
	_OpTypeName[181:198],
	_OpTypeName[198:204],
	_OpTypeName[204:207],
	_OpTypeName[207:218],
	_OpTypeName[218:237],
	_OpTypeName[237:242],
	_OpTypeName[242:246],
	_OpTypeName[246:250],
	_OpTypeName[250:258],
	_OpTypeName[258:261],
	_OpTypeName[261:271],
	_OpTypeName[271:279],
	_OpTypeName[279:286],
	_OpTypeName[286:293],
	_OpTypeName[293:301],
	_OpTypeName[301:307],
	_OpTypeName[307:310],
	_OpTypeName[310:312],
	_OpTypeName[312:315],
	_OpTypeName[315:321],
	_OpTypeName[321:326],
	_OpTypeName[326:330],
	_OpTypeName[330:346],
	_OpTypeName[346:361],
	_OpTypeName[361:377],
	_OpTypeName[377:393],
	_OpTypeName[393:408],
	_OpTypeName[408:424],
	_OpTypeName[424:433],
	_OpTypeName[433:442],
	_OpTypeName[442:455],
	_OpTypeName[455:464],
	_OpTypeName[464:476],
	_OpTypeName[476:485],
	_OpTypeName[485:492],
	_OpTypeName[492:499],
	_OpTypeName[499:514],
	_OpTypeName[514:529],
	_OpTypeName[529:545],
	_OpTypeName[545:550],
	_OpTypeName[550:560],
	_OpTypeName[560:570],
	_OpTypeName[570:580],
	_OpTypeName[580:599],
	_OpTypeName[599:618],
	_OpTypeName[618:637],
	_OpTypeName[637:646],
	_OpTypeName[646:666],
	_OpTypeName[666:683],
	_OpTypeName[683:687],
	_OpTypeName[687:691],
	_OpTypeName[691:696],
	_OpTypeName[696:700],
	_OpTypeName[700:708],
	_OpTypeName[708:711],
	_OpTypeName[711:715],
	_OpTypeName[715:724],
	_OpTypeName[724:729],
	_OpTypeName[729:732],
	_OpTypeName[732:736],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
