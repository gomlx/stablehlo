// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2CbrtCeilClampCompareComplexCosineCountLeadingZerosDivideErfExponentialExponentialMinusOneFloorImagLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertBroadcastInDimCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDotGeneralDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGatherGetDimensionSizeGetTupleElementIfInfeedIotaIsFiniteOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 51, 55, 60, 67, 74, 80, 97, 103, 106, 117, 136, 141, 145, 148, 158, 166, 173, 180, 188, 194, 197, 199, 205, 210, 214, 223, 230, 245, 261, 266, 275, 295, 312, 316, 320, 324, 332, 335, 339, 342, 351, 372, 392, 409, 423, 437, 441, 449, 468, 485, 494, 505, 512, 523, 533, 543, 564, 575, 588, 599, 609, 623, 641, 644, 650, 666, 681, 683, 689, 693, 701, 720, 727, 730, 741, 745, 751, 766, 779, 791, 798, 813, 820, 826, 842, 846, 851, 860, 875, 880, 897, 912, 917, 921}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2cbrtceilclampcomparecomplexcosinecountleadingzerosdivideerfexponentialexponentialminusonefloorimagloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertbroadcastindimcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldotgeneraldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgathergetdimensionsizegettupleelementifinfeediotaisfiniteoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[Cbrt-(8)]
	_ = x[Ceil-(9)]
	_ = x[Clamp-(10)]
	_ = x[Compare-(11)]
	_ = x[Complex-(12)]
	_ = x[Cosine-(13)]
	_ = x[CountLeadingZeros-(14)]
	_ = x[Divide-(15)]
	_ = x[Erf-(16)]
	_ = x[Exponential-(17)]
	_ = x[ExponentialMinusOne-(18)]
	_ = x[Floor-(19)]
	_ = x[Imag-(20)]
	_ = x[Log-(21)]
	_ = x[LogPlusOne-(22)]
	_ = x[Logistic-(23)]
	_ = x[Maximum-(24)]
	_ = x[Minimum-(25)]
	_ = x[Multiply-(26)]
	_ = x[Negate-(27)]
	_ = x[Not-(28)]
	_ = x[Or-(29)]
	_ = x[Popcnt-(30)]
	_ = x[Power-(31)]
	_ = x[Real-(32)]
	_ = x[Remainder-(33)]
	_ = x[Reshape-(34)]
	_ = x[RoundNearestAfz-(35)]
	_ = x[RoundNearestEven-(36)]
	_ = x[Rsqrt-(37)]
	_ = x[ShiftLeft-(38)]
	_ = x[ShiftRightArithmetic-(39)]
	_ = x[ShiftRightLogical-(40)]
	_ = x[Sign-(41)]
	_ = x[Sine-(42)]
	_ = x[Sqrt-(43)]
	_ = x[Subtract-(44)]
	_ = x[Tan-(45)]
	_ = x[Tanh-(46)]
	_ = x[Xor-(47)]
	_ = x[ArgMinMax-(48)]
	_ = x[BatchNormForInference-(49)]
	_ = x[BatchNormForTraining-(50)]
	_ = x[BatchNormGradient-(51)]
	_ = x[BitcastConvert-(52)]
	_ = x[BroadcastInDim-(53)]
	_ = x[Case-(54)]
	_ = x[Cholesky-(55)]
	_ = x[CollectiveBroadcast-(56)]
	_ = x[CollectivePermute-(57)]
	_ = x[Composite-(58)]
	_ = x[Concatenate-(59)]
	_ = x[Convert-(60)]
	_ = x[Convolution-(61)]
	_ = x[CustomCall-(62)]
	_ = x[DotGeneral-(63)]
	_ = x[DynamicBroadcastInDim-(64)]
	_ = x[DynamicConv-(65)]
	_ = x[DynamicGather-(66)]
	_ = x[DynamicIota-(67)]
	_ = x[DynamicPad-(68)]
	_ = x[DynamicReshape-(69)]
	_ = x[DynamicUpdateSlice-(70)]
	_ = x[Fft-(71)]
	_ = x[Gather-(72)]
	_ = x[GetDimensionSize-(73)]
	_ = x[GetTupleElement-(74)]
	_ = x[If-(75)]
	_ = x[Infeed-(76)]
	_ = x[Iota-(77)]
	_ = x[IsFinite-(78)]
	_ = x[OptimizationBarrier-(79)]
	_ = x[Outfeed-(80)]
	_ = x[Pad-(81)]
	_ = x[PartitionId-(82)]
	_ = x[Recv-(83)]
	_ = x[Reduce-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Slice-(94)]
	_ = x[Transpose-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, ArgMinMax, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, BroadcastInDim, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DotGeneral, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, Gather, GetDimensionSize, GetTupleElement, If, Infeed, Iota, IsFinite, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:51]:        Cbrt,
	_OpTypeLowerName[47:51]:   Cbrt,
	_OpTypeName[51:55]:        Ceil,
	_OpTypeLowerName[51:55]:   Ceil,
	_OpTypeName[55:60]:        Clamp,
	_OpTypeLowerName[55:60]:   Clamp,
	_OpTypeName[60:67]:        Compare,
	_OpTypeLowerName[60:67]:   Compare,
	_OpTypeName[67:74]:        Complex,
	_OpTypeLowerName[67:74]:   Complex,
	_OpTypeName[74:80]:        Cosine,
	_OpTypeLowerName[74:80]:   Cosine,
	_OpTypeName[80:97]:        CountLeadingZeros,
	_OpTypeLowerName[80:97]:   CountLeadingZeros,
	_OpTypeName[97:103]:       Divide,
	_OpTypeLowerName[97:103]:  Divide,
	_OpTypeName[103:106]:      Erf,
	_OpTypeLowerName[103:106]: Erf,
	_OpTypeName[106:117]:      Exponential,
	_OpTypeLowerName[106:117]: Exponential,
	_OpTypeName[117:136]:      ExponentialMinusOne,
	_OpTypeLowerName[117:136]: ExponentialMinusOne,
	_OpTypeName[136:141]:      Floor,
	_OpTypeLowerName[136:141]: Floor,
	_OpTypeName[141:145]:      Imag,
	_OpTypeLowerName[141:145]: Imag,
	_OpTypeName[145:148]:      Log,
	_OpTypeLowerName[145:148]: Log,
	_OpTypeName[148:158]:      LogPlusOne,
	_OpTypeLowerName[148:158]: LogPlusOne,
	_OpTypeName[158:166]:      Logistic,
	_OpTypeLowerName[158:166]: Logistic,
	_OpTypeName[166:173]:      Maximum,
	_OpTypeLowerName[166:173]: Maximum,
	_OpTypeName[173:180]:      Minimum,
	_OpTypeLowerName[173:180]: Minimum,
	_OpTypeName[180:188]:      Multiply,
	_OpTypeLowerName[180:188]: Multiply,
	_OpTypeName[188:194]:      Negate,
	_OpTypeLowerName[188:194]: Negate,
	_OpTypeName[194:197]:      Not,
	_OpTypeLowerName[194:197]: Not,
	_OpTypeName[197:199]:      Or,
	_OpTypeLowerName[197:199]: Or,
	_OpTypeName[199:205]:      Popcnt,
	_OpTypeLowerName[199:205]: Popcnt,
	_OpTypeName[205:210]:      Power,
	_OpTypeLowerName[205:210]: Power,
	_OpTypeName[210:214]:      Real,
	_OpTypeLowerName[210:214]: Real,
	_OpTypeName[214:223]:      Remainder,
	_OpTypeLowerName[214:223]: Remainder,
	_OpTypeName[223:230]:      Reshape,
	_OpTypeLowerName[223:230]: Reshape,
	_OpTypeName[230:245]:      RoundNearestAfz,
	_OpTypeLowerName[230:245]: RoundNearestAfz,
	_OpTypeName[245:261]:      RoundNearestEven,
	_OpTypeLowerName[245:261]: RoundNearestEven,
	_OpTypeName[261:266]:      Rsqrt,
	_OpTypeLowerName[261:266]: Rsqrt,
	_OpTypeName[266:275]:      ShiftLeft,
	_OpTypeLowerName[266:275]: ShiftLeft,
	_OpTypeName[275:295]:      ShiftRightArithmetic,
	_OpTypeLowerName[275:295]: ShiftRightArithmetic,
	_OpTypeName[295:312]:      ShiftRightLogical,
	_OpTypeLowerName[295:312]: ShiftRightLogical,
	_OpTypeName[312:316]:      Sign,
	_OpTypeLowerName[312:316]: Sign,
	_OpTypeName[316:320]:      Sine,
	_OpTypeLowerName[316:320]: Sine,
	_OpTypeName[320:324]:      Sqrt,
	_OpTypeLowerName[320:324]: Sqrt,
	_OpTypeName[324:332]:      Subtract,
	_OpTypeLowerName[324:332]: Subtract,
	_OpTypeName[332:335]:      Tan,
	_OpTypeLowerName[332:335]: Tan,
	_OpTypeName[335:339]:      Tanh,
	_OpTypeLowerName[335:339]: Tanh,
	_OpTypeName[339:342]:      Xor,
	_OpTypeLowerName[339:342]: Xor,
	_OpTypeName[342:351]:      ArgMinMax,
	_OpTypeLowerName[342:351]: ArgMinMax,
	_OpTypeName[351:372]:      BatchNormForInference,
	_OpTypeLowerName[351:372]: BatchNormForInference,
	_OpTypeName[372:392]:      BatchNormForTraining,
	_OpTypeLowerName[372:392]: BatchNormForTraining,
	_OpTypeName[392:409]:      BatchNormGradient,
	_OpTypeLowerName[392:409]: BatchNormGradient,
	_OpTypeName[409:423]:      BitcastConvert,
	_OpTypeLowerName[409:423]: BitcastConvert,
	_OpTypeName[423:437]:      BroadcastInDim,
	_OpTypeLowerName[423:437]: BroadcastInDim,
	_OpTypeName[437:441]:      Case,
	_OpTypeLowerName[437:441]: Case,
	_OpTypeName[441:449]:      Cholesky,
	_OpTypeLowerName[441:449]: Cholesky,
	_OpTypeName[449:468]:      CollectiveBroadcast,
	_OpTypeLowerName[449:468]: CollectiveBroadcast,
	_OpTypeName[468:485]:      CollectivePermute,
	_OpTypeLowerName[468:485]: CollectivePermute,
	_OpTypeName[485:494]:      Composite,
	_OpTypeLowerName[485:494]: Composite,
	_OpTypeName[494:505]:      Concatenate,
	_OpTypeLowerName[494:505]: Concatenate,
	_OpTypeName[505:512]:      Convert,
	_OpTypeLowerName[505:512]: Convert,
	_OpTypeName[512:523]:      Convolution,
	_OpTypeLowerName[512:523]: Convolution,
	_OpTypeName[523:533]:      CustomCall,
	_OpTypeLowerName[523:533]: CustomCall,
	_OpTypeName[533:543]:      DotGeneral,
	_OpTypeLowerName[533:543]: DotGeneral,
	_OpTypeName[543:564]:      DynamicBroadcastInDim,
	_OpTypeLowerName[543:564]: DynamicBroadcastInDim,
	_OpTypeName[564:575]:      DynamicConv,
	_OpTypeLowerName[564:575]: DynamicConv,
	_OpTypeName[575:588]:      DynamicGather,
	_OpTypeLowerName[575:588]: DynamicGather,
	_OpTypeName[588:599]:      DynamicIota,
	_OpTypeLowerName[588:599]: DynamicIota,
	_OpTypeName[599:609]:      DynamicPad,
	_OpTypeLowerName[599:609]: DynamicPad,
	_OpTypeName[609:623]:      DynamicReshape,
	_OpTypeLowerName[609:623]: DynamicReshape,
	_OpTypeName[623:641]:      DynamicUpdateSlice,
	_OpTypeLowerName[623:641]: DynamicUpdateSlice,
	_OpTypeName[641:644]:      Fft,
	_OpTypeLowerName[641:644]: Fft,
	_OpTypeName[644:650]:      Gather,
	_OpTypeLowerName[644:650]: Gather,
	_OpTypeName[650:666]:      GetDimensionSize,
	_OpTypeLowerName[650:666]: GetDimensionSize,
	_OpTypeName[666:681]:      GetTupleElement,
	_OpTypeLowerName[666:681]: GetTupleElement,
	_OpTypeName[681:683]:      If,
	_OpTypeLowerName[681:683]: If,
	_OpTypeName[683:689]:      Infeed,
	_OpTypeLowerName[683:689]: Infeed,
	_OpTypeName[689:693]:      Iota,
	_OpTypeLowerName[689:693]: Iota,
	_OpTypeName[693:701]:      IsFinite,
	_OpTypeLowerName[693:701]: IsFinite,
	_OpTypeName[701:720]:      OptimizationBarrier,
	_OpTypeLowerName[701:720]: OptimizationBarrier,
	_OpTypeName[720:727]:      Outfeed,
	_OpTypeLowerName[720:727]: Outfeed,
	_OpTypeName[727:730]:      Pad,
	_OpTypeLowerName[727:730]: Pad,
	_OpTypeName[730:741]:      PartitionId,
	_OpTypeLowerName[730:741]: PartitionId,
	_OpTypeName[741:745]:      Recv,
	_OpTypeLowerName[741:745]: Recv,
	_OpTypeName[745:751]:      Reduce,
	_OpTypeLowerName[745:751]: Reduce,
	_OpTypeName[751:766]:      ReducePrecision,
	_OpTypeLowerName[751:766]: ReducePrecision,
	_OpTypeName[766:779]:      ReduceScatter,
	_OpTypeLowerName[766:779]: ReduceScatter,
	_OpTypeName[779:791]:      ReduceWindow,
	_OpTypeLowerName[779:791]: ReduceWindow,
	_OpTypeName[791:798]:      Reverse,
	_OpTypeLowerName[791:798]: Reverse,
	_OpTypeName[798:813]:      RngBitGenerator,
	_OpTypeLowerName[798:813]: RngBitGenerator,
	_OpTypeName[813:820]:      Scatter,
	_OpTypeLowerName[813:820]: Scatter,
	_OpTypeName[820:826]:      Select,
	_OpTypeLowerName[820:826]: Select,
	_OpTypeName[826:842]:      SelectAndScatter,
	_OpTypeLowerName[826:842]: SelectAndScatter,
	_OpTypeName[842:846]:      Send,
	_OpTypeLowerName[842:846]: Send,
	_OpTypeName[846:851]:      Slice,
	_OpTypeLowerName[846:851]: Slice,
	_OpTypeName[851:860]:      Transpose,
	_OpTypeLowerName[851:860]: Transpose,
	_OpTypeName[860:875]:      TriangularSolve,
	_OpTypeLowerName[860:875]: TriangularSolve,
	_OpTypeName[875:880]:      Tuple,
	_OpTypeLowerName[875:880]: Tuple,
	_OpTypeName[880:897]:      UniformDequantize,
	_OpTypeLowerName[880:897]: UniformDequantize,
	_OpTypeName[897:912]:      UniformQuantize,
	_OpTypeLowerName[897:912]: UniformQuantize,
	_OpTypeName[912:917]:      While,
	_OpTypeLowerName[912:917]: While,
	_OpTypeName[917:921]:      Last,
	_OpTypeLowerName[917:921]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:51],
	_OpTypeName[51:55],
	_OpTypeName[55:60],
	_OpTypeName[60:67],
	_OpTypeName[67:74],
	_OpTypeName[74:80],
	_OpTypeName[80:97],
	_OpTypeName[97:103],
	_OpTypeName[103:106],
	_OpTypeName[106:117],
	_OpTypeName[117:136],
	_OpTypeName[136:141],
	_OpTypeName[141:145],
	_OpTypeName[145:148],
	_OpTypeName[148:158],
	_OpTypeName[158:166],
	_OpTypeName[166:173],
	_OpTypeName[173:180],
	_OpTypeName[180:188],
	_OpTypeName[188:194],
	_OpTypeName[194:197],
	_OpTypeName[197:199],
	_OpTypeName[199:205],
	_OpTypeName[205:210],
	_OpTypeName[210:214],
	_OpTypeName[214:223],
	_OpTypeName[223:230],
	_OpTypeName[230:245],
	_OpTypeName[245:261],
	_OpTypeName[261:266],
	_OpTypeName[266:275],
	_OpTypeName[275:295],
	_OpTypeName[295:312],
	_OpTypeName[312:316],
	_OpTypeName[316:320],
	_OpTypeName[320:324],
	_OpTypeName[324:332],
	_OpTypeName[332:335],
	_OpTypeName[335:339],
	_OpTypeName[339:342],
	_OpTypeName[342:351],
	_OpTypeName[351:372],
	_OpTypeName[372:392],
	_OpTypeName[392:409],
	_OpTypeName[409:423],
	_OpTypeName[423:437],
	_OpTypeName[437:441],
	_OpTypeName[441:449],
	_OpTypeName[449:468],
	_OpTypeName[468:485],
	_OpTypeName[485:494],
	_OpTypeName[494:505],
	_OpTypeName[505:512],
	_OpTypeName[512:523],
	_OpTypeName[523:533],
	_OpTypeName[533:543],
	_OpTypeName[543:564],
	_OpTypeName[564:575],
	_OpTypeName[575:588],
	_OpTypeName[588:599],
	_OpTypeName[599:609],
	_OpTypeName[609:623],
	_OpTypeName[623:641],
	_OpTypeName[641:644],
	_OpTypeName[644:650],
	_OpTypeName[650:666],
	_OpTypeName[666:681],
	_OpTypeName[681:683],
	_OpTypeName[683:689],
	_OpTypeName[689:693],
	_OpTypeName[693:701],
	_OpTypeName[701:720],
	_OpTypeName[720:727],
	_OpTypeName[727:730],
	_OpTypeName[730:741],
	_OpTypeName[741:745],
	_OpTypeName[745:751],
	_OpTypeName[751:766],
	_OpTypeName[766:779],
	_OpTypeName[779:791],
	_OpTypeName[791:798],
	_OpTypeName[798:813],
	_OpTypeName[813:820],
	_OpTypeName[820:826],
	_OpTypeName[826:842],
	_OpTypeName[842:846],
	_OpTypeName[846:851],
	_OpTypeName[851:860],
	_OpTypeName[860:875],
	_OpTypeName[875:880],
	_OpTypeName[880:897],
	_OpTypeName[897:912],
	_OpTypeName[912:917],
	_OpTypeName[917:921],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
