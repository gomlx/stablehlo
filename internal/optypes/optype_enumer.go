// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertConvolutionCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterReduceWindowSelectSelectAndScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 120, 131, 137, 154, 160, 170, 173, 184, 203, 208, 214, 218, 226, 230, 233, 243, 251, 258, 265, 273, 279, 282, 284, 287, 293, 298, 302, 311, 317, 324, 331, 346, 361, 377, 382, 389, 398, 418, 435, 439, 443, 448, 452, 460, 463, 467, 476, 479, 500, 520, 537, 541, 549, 568, 585, 594, 604, 625, 636, 649, 660, 670, 684, 702, 705, 721, 736, 738, 744, 763, 770, 781, 785, 800, 813, 825, 831, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertconvolutioncosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositecustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescatterreducewindowselectselectandscattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Convert-(16)]
	_ = x[Convolution-(17)]
	_ = x[Cosine-(18)]
	_ = x[CountLeadingZeros-(19)]
	_ = x[Divide-(20)]
	_ = x[DotGeneral-(21)]
	_ = x[Erf-(22)]
	_ = x[Exponential-(23)]
	_ = x[ExponentialMinusOne-(24)]
	_ = x[Floor-(25)]
	_ = x[Gather-(26)]
	_ = x[Imag-(27)]
	_ = x[IsFinite-(28)]
	_ = x[Iota-(29)]
	_ = x[Log-(30)]
	_ = x[LogPlusOne-(31)]
	_ = x[Logistic-(32)]
	_ = x[Maximum-(33)]
	_ = x[Minimum-(34)]
	_ = x[Multiply-(35)]
	_ = x[Negate-(36)]
	_ = x[Not-(37)]
	_ = x[Or-(38)]
	_ = x[Pad-(39)]
	_ = x[Popcnt-(40)]
	_ = x[Power-(41)]
	_ = x[Real-(42)]
	_ = x[Remainder-(43)]
	_ = x[Reduce-(44)]
	_ = x[Reshape-(45)]
	_ = x[Reverse-(46)]
	_ = x[RngBitGenerator-(47)]
	_ = x[RoundNearestAfz-(48)]
	_ = x[RoundNearestEven-(49)]
	_ = x[Rsqrt-(50)]
	_ = x[Scatter-(51)]
	_ = x[ShiftLeft-(52)]
	_ = x[ShiftRightArithmetic-(53)]
	_ = x[ShiftRightLogical-(54)]
	_ = x[Sign-(55)]
	_ = x[Sine-(56)]
	_ = x[Slice-(57)]
	_ = x[Sqrt-(58)]
	_ = x[Subtract-(59)]
	_ = x[Tan-(60)]
	_ = x[Tanh-(61)]
	_ = x[Transpose-(62)]
	_ = x[Xor-(63)]
	_ = x[BatchNormForInference-(64)]
	_ = x[BatchNormForTraining-(65)]
	_ = x[BatchNormGradient-(66)]
	_ = x[Case-(67)]
	_ = x[Cholesky-(68)]
	_ = x[CollectiveBroadcast-(69)]
	_ = x[CollectivePermute-(70)]
	_ = x[Composite-(71)]
	_ = x[CustomCall-(72)]
	_ = x[DynamicBroadcastInDim-(73)]
	_ = x[DynamicConv-(74)]
	_ = x[DynamicGather-(75)]
	_ = x[DynamicIota-(76)]
	_ = x[DynamicPad-(77)]
	_ = x[DynamicReshape-(78)]
	_ = x[DynamicUpdateSlice-(79)]
	_ = x[Fft-(80)]
	_ = x[GetDimensionSize-(81)]
	_ = x[GetTupleElement-(82)]
	_ = x[If-(83)]
	_ = x[Infeed-(84)]
	_ = x[OptimizationBarrier-(85)]
	_ = x[Outfeed-(86)]
	_ = x[PartitionId-(87)]
	_ = x[Recv-(88)]
	_ = x[ReducePrecision-(89)]
	_ = x[ReduceScatter-(90)]
	_ = x[ReduceWindow-(91)]
	_ = x[Select-(92)]
	_ = x[SelectAndScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Convolution, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Select, SelectAndScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:120]:      Convert,
	_OpTypeLowerName[113:120]: Convert,
	_OpTypeName[120:131]:      Convolution,
	_OpTypeLowerName[120:131]: Convolution,
	_OpTypeName[131:137]:      Cosine,
	_OpTypeLowerName[131:137]: Cosine,
	_OpTypeName[137:154]:      CountLeadingZeros,
	_OpTypeLowerName[137:154]: CountLeadingZeros,
	_OpTypeName[154:160]:      Divide,
	_OpTypeLowerName[154:160]: Divide,
	_OpTypeName[160:170]:      DotGeneral,
	_OpTypeLowerName[160:170]: DotGeneral,
	_OpTypeName[170:173]:      Erf,
	_OpTypeLowerName[170:173]: Erf,
	_OpTypeName[173:184]:      Exponential,
	_OpTypeLowerName[173:184]: Exponential,
	_OpTypeName[184:203]:      ExponentialMinusOne,
	_OpTypeLowerName[184:203]: ExponentialMinusOne,
	_OpTypeName[203:208]:      Floor,
	_OpTypeLowerName[203:208]: Floor,
	_OpTypeName[208:214]:      Gather,
	_OpTypeLowerName[208:214]: Gather,
	_OpTypeName[214:218]:      Imag,
	_OpTypeLowerName[214:218]: Imag,
	_OpTypeName[218:226]:      IsFinite,
	_OpTypeLowerName[218:226]: IsFinite,
	_OpTypeName[226:230]:      Iota,
	_OpTypeLowerName[226:230]: Iota,
	_OpTypeName[230:233]:      Log,
	_OpTypeLowerName[230:233]: Log,
	_OpTypeName[233:243]:      LogPlusOne,
	_OpTypeLowerName[233:243]: LogPlusOne,
	_OpTypeName[243:251]:      Logistic,
	_OpTypeLowerName[243:251]: Logistic,
	_OpTypeName[251:258]:      Maximum,
	_OpTypeLowerName[251:258]: Maximum,
	_OpTypeName[258:265]:      Minimum,
	_OpTypeLowerName[258:265]: Minimum,
	_OpTypeName[265:273]:      Multiply,
	_OpTypeLowerName[265:273]: Multiply,
	_OpTypeName[273:279]:      Negate,
	_OpTypeLowerName[273:279]: Negate,
	_OpTypeName[279:282]:      Not,
	_OpTypeLowerName[279:282]: Not,
	_OpTypeName[282:284]:      Or,
	_OpTypeLowerName[282:284]: Or,
	_OpTypeName[284:287]:      Pad,
	_OpTypeLowerName[284:287]: Pad,
	_OpTypeName[287:293]:      Popcnt,
	_OpTypeLowerName[287:293]: Popcnt,
	_OpTypeName[293:298]:      Power,
	_OpTypeLowerName[293:298]: Power,
	_OpTypeName[298:302]:      Real,
	_OpTypeLowerName[298:302]: Real,
	_OpTypeName[302:311]:      Remainder,
	_OpTypeLowerName[302:311]: Remainder,
	_OpTypeName[311:317]:      Reduce,
	_OpTypeLowerName[311:317]: Reduce,
	_OpTypeName[317:324]:      Reshape,
	_OpTypeLowerName[317:324]: Reshape,
	_OpTypeName[324:331]:      Reverse,
	_OpTypeLowerName[324:331]: Reverse,
	_OpTypeName[331:346]:      RngBitGenerator,
	_OpTypeLowerName[331:346]: RngBitGenerator,
	_OpTypeName[346:361]:      RoundNearestAfz,
	_OpTypeLowerName[346:361]: RoundNearestAfz,
	_OpTypeName[361:377]:      RoundNearestEven,
	_OpTypeLowerName[361:377]: RoundNearestEven,
	_OpTypeName[377:382]:      Rsqrt,
	_OpTypeLowerName[377:382]: Rsqrt,
	_OpTypeName[382:389]:      Scatter,
	_OpTypeLowerName[382:389]: Scatter,
	_OpTypeName[389:398]:      ShiftLeft,
	_OpTypeLowerName[389:398]: ShiftLeft,
	_OpTypeName[398:418]:      ShiftRightArithmetic,
	_OpTypeLowerName[398:418]: ShiftRightArithmetic,
	_OpTypeName[418:435]:      ShiftRightLogical,
	_OpTypeLowerName[418:435]: ShiftRightLogical,
	_OpTypeName[435:439]:      Sign,
	_OpTypeLowerName[435:439]: Sign,
	_OpTypeName[439:443]:      Sine,
	_OpTypeLowerName[439:443]: Sine,
	_OpTypeName[443:448]:      Slice,
	_OpTypeLowerName[443:448]: Slice,
	_OpTypeName[448:452]:      Sqrt,
	_OpTypeLowerName[448:452]: Sqrt,
	_OpTypeName[452:460]:      Subtract,
	_OpTypeLowerName[452:460]: Subtract,
	_OpTypeName[460:463]:      Tan,
	_OpTypeLowerName[460:463]: Tan,
	_OpTypeName[463:467]:      Tanh,
	_OpTypeLowerName[463:467]: Tanh,
	_OpTypeName[467:476]:      Transpose,
	_OpTypeLowerName[467:476]: Transpose,
	_OpTypeName[476:479]:      Xor,
	_OpTypeLowerName[476:479]: Xor,
	_OpTypeName[479:500]:      BatchNormForInference,
	_OpTypeLowerName[479:500]: BatchNormForInference,
	_OpTypeName[500:520]:      BatchNormForTraining,
	_OpTypeLowerName[500:520]: BatchNormForTraining,
	_OpTypeName[520:537]:      BatchNormGradient,
	_OpTypeLowerName[520:537]: BatchNormGradient,
	_OpTypeName[537:541]:      Case,
	_OpTypeLowerName[537:541]: Case,
	_OpTypeName[541:549]:      Cholesky,
	_OpTypeLowerName[541:549]: Cholesky,
	_OpTypeName[549:568]:      CollectiveBroadcast,
	_OpTypeLowerName[549:568]: CollectiveBroadcast,
	_OpTypeName[568:585]:      CollectivePermute,
	_OpTypeLowerName[568:585]: CollectivePermute,
	_OpTypeName[585:594]:      Composite,
	_OpTypeLowerName[585:594]: Composite,
	_OpTypeName[594:604]:      CustomCall,
	_OpTypeLowerName[594:604]: CustomCall,
	_OpTypeName[604:625]:      DynamicBroadcastInDim,
	_OpTypeLowerName[604:625]: DynamicBroadcastInDim,
	_OpTypeName[625:636]:      DynamicConv,
	_OpTypeLowerName[625:636]: DynamicConv,
	_OpTypeName[636:649]:      DynamicGather,
	_OpTypeLowerName[636:649]: DynamicGather,
	_OpTypeName[649:660]:      DynamicIota,
	_OpTypeLowerName[649:660]: DynamicIota,
	_OpTypeName[660:670]:      DynamicPad,
	_OpTypeLowerName[660:670]: DynamicPad,
	_OpTypeName[670:684]:      DynamicReshape,
	_OpTypeLowerName[670:684]: DynamicReshape,
	_OpTypeName[684:702]:      DynamicUpdateSlice,
	_OpTypeLowerName[684:702]: DynamicUpdateSlice,
	_OpTypeName[702:705]:      Fft,
	_OpTypeLowerName[702:705]: Fft,
	_OpTypeName[705:721]:      GetDimensionSize,
	_OpTypeLowerName[705:721]: GetDimensionSize,
	_OpTypeName[721:736]:      GetTupleElement,
	_OpTypeLowerName[721:736]: GetTupleElement,
	_OpTypeName[736:738]:      If,
	_OpTypeLowerName[736:738]: If,
	_OpTypeName[738:744]:      Infeed,
	_OpTypeLowerName[738:744]: Infeed,
	_OpTypeName[744:763]:      OptimizationBarrier,
	_OpTypeLowerName[744:763]: OptimizationBarrier,
	_OpTypeName[763:770]:      Outfeed,
	_OpTypeLowerName[763:770]: Outfeed,
	_OpTypeName[770:781]:      PartitionId,
	_OpTypeLowerName[770:781]: PartitionId,
	_OpTypeName[781:785]:      Recv,
	_OpTypeLowerName[781:785]: Recv,
	_OpTypeName[785:800]:      ReducePrecision,
	_OpTypeLowerName[785:800]: ReducePrecision,
	_OpTypeName[800:813]:      ReduceScatter,
	_OpTypeLowerName[800:813]: ReduceScatter,
	_OpTypeName[813:825]:      ReduceWindow,
	_OpTypeLowerName[813:825]: ReduceWindow,
	_OpTypeName[825:831]:      Select,
	_OpTypeLowerName[825:831]: Select,
	_OpTypeName[831:847]:      SelectAndScatter,
	_OpTypeLowerName[831:847]: SelectAndScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:120],
	_OpTypeName[120:131],
	_OpTypeName[131:137],
	_OpTypeName[137:154],
	_OpTypeName[154:160],
	_OpTypeName[160:170],
	_OpTypeName[170:173],
	_OpTypeName[173:184],
	_OpTypeName[184:203],
	_OpTypeName[203:208],
	_OpTypeName[208:214],
	_OpTypeName[214:218],
	_OpTypeName[218:226],
	_OpTypeName[226:230],
	_OpTypeName[230:233],
	_OpTypeName[233:243],
	_OpTypeName[243:251],
	_OpTypeName[251:258],
	_OpTypeName[258:265],
	_OpTypeName[265:273],
	_OpTypeName[273:279],
	_OpTypeName[279:282],
	_OpTypeName[282:284],
	_OpTypeName[284:287],
	_OpTypeName[287:293],
	_OpTypeName[293:298],
	_OpTypeName[298:302],
	_OpTypeName[302:311],
	_OpTypeName[311:317],
	_OpTypeName[317:324],
	_OpTypeName[324:331],
	_OpTypeName[331:346],
	_OpTypeName[346:361],
	_OpTypeName[361:377],
	_OpTypeName[377:382],
	_OpTypeName[382:389],
	_OpTypeName[389:398],
	_OpTypeName[398:418],
	_OpTypeName[418:435],
	_OpTypeName[435:439],
	_OpTypeName[439:443],
	_OpTypeName[443:448],
	_OpTypeName[448:452],
	_OpTypeName[452:460],
	_OpTypeName[460:463],
	_OpTypeName[463:467],
	_OpTypeName[467:476],
	_OpTypeName[476:479],
	_OpTypeName[479:500],
	_OpTypeName[500:520],
	_OpTypeName[520:537],
	_OpTypeName[537:541],
	_OpTypeName[541:549],
	_OpTypeName[549:568],
	_OpTypeName[568:585],
	_OpTypeName[585:594],
	_OpTypeName[594:604],
	_OpTypeName[604:625],
	_OpTypeName[625:636],
	_OpTypeName[636:649],
	_OpTypeName[649:660],
	_OpTypeName[660:670],
	_OpTypeName[670:684],
	_OpTypeName[684:702],
	_OpTypeName[702:705],
	_OpTypeName[705:721],
	_OpTypeName[721:736],
	_OpTypeName[736:738],
	_OpTypeName[738:744],
	_OpTypeName[744:763],
	_OpTypeName[763:770],
	_OpTypeName[770:781],
	_OpTypeName[781:785],
	_OpTypeName[785:800],
	_OpTypeName[800:813],
	_OpTypeName[813:825],
	_OpTypeName[825:831],
	_OpTypeName[831:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
