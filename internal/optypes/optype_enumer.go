// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGatherGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 94, 111, 117, 127, 130, 141, 160, 165, 169, 177, 181, 184, 194, 202, 209, 216, 224, 230, 233, 235, 241, 246, 250, 259, 266, 281, 297, 302, 311, 331, 348, 352, 356, 360, 368, 371, 375, 378, 399, 419, 436, 450, 454, 462, 481, 498, 507, 518, 525, 536, 546, 567, 578, 591, 602, 612, 626, 644, 647, 653, 669, 684, 686, 692, 711, 718, 721, 732, 736, 742, 757, 770, 782, 789, 804, 811, 817, 833, 837, 842, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgathergetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Cosine-(14)]
	_ = x[CountLeadingZeros-(15)]
	_ = x[Divide-(16)]
	_ = x[DotGeneral-(17)]
	_ = x[Erf-(18)]
	_ = x[Exponential-(19)]
	_ = x[ExponentialMinusOne-(20)]
	_ = x[Floor-(21)]
	_ = x[Imag-(22)]
	_ = x[IsFinite-(23)]
	_ = x[Iota-(24)]
	_ = x[Log-(25)]
	_ = x[LogPlusOne-(26)]
	_ = x[Logistic-(27)]
	_ = x[Maximum-(28)]
	_ = x[Minimum-(29)]
	_ = x[Multiply-(30)]
	_ = x[Negate-(31)]
	_ = x[Not-(32)]
	_ = x[Or-(33)]
	_ = x[Popcnt-(34)]
	_ = x[Power-(35)]
	_ = x[Real-(36)]
	_ = x[Remainder-(37)]
	_ = x[Reshape-(38)]
	_ = x[RoundNearestAfz-(39)]
	_ = x[RoundNearestEven-(40)]
	_ = x[Rsqrt-(41)]
	_ = x[ShiftLeft-(42)]
	_ = x[ShiftRightArithmetic-(43)]
	_ = x[ShiftRightLogical-(44)]
	_ = x[Sign-(45)]
	_ = x[Sine-(46)]
	_ = x[Sqrt-(47)]
	_ = x[Subtract-(48)]
	_ = x[Tan-(49)]
	_ = x[Tanh-(50)]
	_ = x[Xor-(51)]
	_ = x[BatchNormForInference-(52)]
	_ = x[BatchNormForTraining-(53)]
	_ = x[BatchNormGradient-(54)]
	_ = x[BitcastConvert-(55)]
	_ = x[Case-(56)]
	_ = x[Cholesky-(57)]
	_ = x[CollectiveBroadcast-(58)]
	_ = x[CollectivePermute-(59)]
	_ = x[Composite-(60)]
	_ = x[Concatenate-(61)]
	_ = x[Convert-(62)]
	_ = x[Convolution-(63)]
	_ = x[CustomCall-(64)]
	_ = x[DynamicBroadcastInDim-(65)]
	_ = x[DynamicConv-(66)]
	_ = x[DynamicGather-(67)]
	_ = x[DynamicIota-(68)]
	_ = x[DynamicPad-(69)]
	_ = x[DynamicReshape-(70)]
	_ = x[DynamicUpdateSlice-(71)]
	_ = x[Fft-(72)]
	_ = x[Gather-(73)]
	_ = x[GetDimensionSize-(74)]
	_ = x[GetTupleElement-(75)]
	_ = x[If-(76)]
	_ = x[Infeed-(77)]
	_ = x[OptimizationBarrier-(78)]
	_ = x[Outfeed-(79)]
	_ = x[Pad-(80)]
	_ = x[PartitionId-(81)]
	_ = x[Recv-(82)]
	_ = x[Reduce-(83)]
	_ = x[ReducePrecision-(84)]
	_ = x[ReduceScatter-(85)]
	_ = x[ReduceWindow-(86)]
	_ = x[Reverse-(87)]
	_ = x[RngBitGenerator-(88)]
	_ = x[Scatter-(89)]
	_ = x[Select-(90)]
	_ = x[SelectAndScatter-(91)]
	_ = x[Send-(92)]
	_ = x[Slice-(93)]
	_ = x[Transpose-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, Gather, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:94]:        Cosine,
	_OpTypeLowerName[88:94]:   Cosine,
	_OpTypeName[94:111]:       CountLeadingZeros,
	_OpTypeLowerName[94:111]:  CountLeadingZeros,
	_OpTypeName[111:117]:      Divide,
	_OpTypeLowerName[111:117]: Divide,
	_OpTypeName[117:127]:      DotGeneral,
	_OpTypeLowerName[117:127]: DotGeneral,
	_OpTypeName[127:130]:      Erf,
	_OpTypeLowerName[127:130]: Erf,
	_OpTypeName[130:141]:      Exponential,
	_OpTypeLowerName[130:141]: Exponential,
	_OpTypeName[141:160]:      ExponentialMinusOne,
	_OpTypeLowerName[141:160]: ExponentialMinusOne,
	_OpTypeName[160:165]:      Floor,
	_OpTypeLowerName[160:165]: Floor,
	_OpTypeName[165:169]:      Imag,
	_OpTypeLowerName[165:169]: Imag,
	_OpTypeName[169:177]:      IsFinite,
	_OpTypeLowerName[169:177]: IsFinite,
	_OpTypeName[177:181]:      Iota,
	_OpTypeLowerName[177:181]: Iota,
	_OpTypeName[181:184]:      Log,
	_OpTypeLowerName[181:184]: Log,
	_OpTypeName[184:194]:      LogPlusOne,
	_OpTypeLowerName[184:194]: LogPlusOne,
	_OpTypeName[194:202]:      Logistic,
	_OpTypeLowerName[194:202]: Logistic,
	_OpTypeName[202:209]:      Maximum,
	_OpTypeLowerName[202:209]: Maximum,
	_OpTypeName[209:216]:      Minimum,
	_OpTypeLowerName[209:216]: Minimum,
	_OpTypeName[216:224]:      Multiply,
	_OpTypeLowerName[216:224]: Multiply,
	_OpTypeName[224:230]:      Negate,
	_OpTypeLowerName[224:230]: Negate,
	_OpTypeName[230:233]:      Not,
	_OpTypeLowerName[230:233]: Not,
	_OpTypeName[233:235]:      Or,
	_OpTypeLowerName[233:235]: Or,
	_OpTypeName[235:241]:      Popcnt,
	_OpTypeLowerName[235:241]: Popcnt,
	_OpTypeName[241:246]:      Power,
	_OpTypeLowerName[241:246]: Power,
	_OpTypeName[246:250]:      Real,
	_OpTypeLowerName[246:250]: Real,
	_OpTypeName[250:259]:      Remainder,
	_OpTypeLowerName[250:259]: Remainder,
	_OpTypeName[259:266]:      Reshape,
	_OpTypeLowerName[259:266]: Reshape,
	_OpTypeName[266:281]:      RoundNearestAfz,
	_OpTypeLowerName[266:281]: RoundNearestAfz,
	_OpTypeName[281:297]:      RoundNearestEven,
	_OpTypeLowerName[281:297]: RoundNearestEven,
	_OpTypeName[297:302]:      Rsqrt,
	_OpTypeLowerName[297:302]: Rsqrt,
	_OpTypeName[302:311]:      ShiftLeft,
	_OpTypeLowerName[302:311]: ShiftLeft,
	_OpTypeName[311:331]:      ShiftRightArithmetic,
	_OpTypeLowerName[311:331]: ShiftRightArithmetic,
	_OpTypeName[331:348]:      ShiftRightLogical,
	_OpTypeLowerName[331:348]: ShiftRightLogical,
	_OpTypeName[348:352]:      Sign,
	_OpTypeLowerName[348:352]: Sign,
	_OpTypeName[352:356]:      Sine,
	_OpTypeLowerName[352:356]: Sine,
	_OpTypeName[356:360]:      Sqrt,
	_OpTypeLowerName[356:360]: Sqrt,
	_OpTypeName[360:368]:      Subtract,
	_OpTypeLowerName[360:368]: Subtract,
	_OpTypeName[368:371]:      Tan,
	_OpTypeLowerName[368:371]: Tan,
	_OpTypeName[371:375]:      Tanh,
	_OpTypeLowerName[371:375]: Tanh,
	_OpTypeName[375:378]:      Xor,
	_OpTypeLowerName[375:378]: Xor,
	_OpTypeName[378:399]:      BatchNormForInference,
	_OpTypeLowerName[378:399]: BatchNormForInference,
	_OpTypeName[399:419]:      BatchNormForTraining,
	_OpTypeLowerName[399:419]: BatchNormForTraining,
	_OpTypeName[419:436]:      BatchNormGradient,
	_OpTypeLowerName[419:436]: BatchNormGradient,
	_OpTypeName[436:450]:      BitcastConvert,
	_OpTypeLowerName[436:450]: BitcastConvert,
	_OpTypeName[450:454]:      Case,
	_OpTypeLowerName[450:454]: Case,
	_OpTypeName[454:462]:      Cholesky,
	_OpTypeLowerName[454:462]: Cholesky,
	_OpTypeName[462:481]:      CollectiveBroadcast,
	_OpTypeLowerName[462:481]: CollectiveBroadcast,
	_OpTypeName[481:498]:      CollectivePermute,
	_OpTypeLowerName[481:498]: CollectivePermute,
	_OpTypeName[498:507]:      Composite,
	_OpTypeLowerName[498:507]: Composite,
	_OpTypeName[507:518]:      Concatenate,
	_OpTypeLowerName[507:518]: Concatenate,
	_OpTypeName[518:525]:      Convert,
	_OpTypeLowerName[518:525]: Convert,
	_OpTypeName[525:536]:      Convolution,
	_OpTypeLowerName[525:536]: Convolution,
	_OpTypeName[536:546]:      CustomCall,
	_OpTypeLowerName[536:546]: CustomCall,
	_OpTypeName[546:567]:      DynamicBroadcastInDim,
	_OpTypeLowerName[546:567]: DynamicBroadcastInDim,
	_OpTypeName[567:578]:      DynamicConv,
	_OpTypeLowerName[567:578]: DynamicConv,
	_OpTypeName[578:591]:      DynamicGather,
	_OpTypeLowerName[578:591]: DynamicGather,
	_OpTypeName[591:602]:      DynamicIota,
	_OpTypeLowerName[591:602]: DynamicIota,
	_OpTypeName[602:612]:      DynamicPad,
	_OpTypeLowerName[602:612]: DynamicPad,
	_OpTypeName[612:626]:      DynamicReshape,
	_OpTypeLowerName[612:626]: DynamicReshape,
	_OpTypeName[626:644]:      DynamicUpdateSlice,
	_OpTypeLowerName[626:644]: DynamicUpdateSlice,
	_OpTypeName[644:647]:      Fft,
	_OpTypeLowerName[644:647]: Fft,
	_OpTypeName[647:653]:      Gather,
	_OpTypeLowerName[647:653]: Gather,
	_OpTypeName[653:669]:      GetDimensionSize,
	_OpTypeLowerName[653:669]: GetDimensionSize,
	_OpTypeName[669:684]:      GetTupleElement,
	_OpTypeLowerName[669:684]: GetTupleElement,
	_OpTypeName[684:686]:      If,
	_OpTypeLowerName[684:686]: If,
	_OpTypeName[686:692]:      Infeed,
	_OpTypeLowerName[686:692]: Infeed,
	_OpTypeName[692:711]:      OptimizationBarrier,
	_OpTypeLowerName[692:711]: OptimizationBarrier,
	_OpTypeName[711:718]:      Outfeed,
	_OpTypeLowerName[711:718]: Outfeed,
	_OpTypeName[718:721]:      Pad,
	_OpTypeLowerName[718:721]: Pad,
	_OpTypeName[721:732]:      PartitionId,
	_OpTypeLowerName[721:732]: PartitionId,
	_OpTypeName[732:736]:      Recv,
	_OpTypeLowerName[732:736]: Recv,
	_OpTypeName[736:742]:      Reduce,
	_OpTypeLowerName[736:742]: Reduce,
	_OpTypeName[742:757]:      ReducePrecision,
	_OpTypeLowerName[742:757]: ReducePrecision,
	_OpTypeName[757:770]:      ReduceScatter,
	_OpTypeLowerName[757:770]: ReduceScatter,
	_OpTypeName[770:782]:      ReduceWindow,
	_OpTypeLowerName[770:782]: ReduceWindow,
	_OpTypeName[782:789]:      Reverse,
	_OpTypeLowerName[782:789]: Reverse,
	_OpTypeName[789:804]:      RngBitGenerator,
	_OpTypeLowerName[789:804]: RngBitGenerator,
	_OpTypeName[804:811]:      Scatter,
	_OpTypeLowerName[804:811]: Scatter,
	_OpTypeName[811:817]:      Select,
	_OpTypeLowerName[811:817]: Select,
	_OpTypeName[817:833]:      SelectAndScatter,
	_OpTypeLowerName[817:833]: SelectAndScatter,
	_OpTypeName[833:837]:      Send,
	_OpTypeLowerName[833:837]: Send,
	_OpTypeName[837:842]:      Slice,
	_OpTypeLowerName[837:842]: Slice,
	_OpTypeName[842:851]:      Transpose,
	_OpTypeLowerName[842:851]: Transpose,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:94],
	_OpTypeName[94:111],
	_OpTypeName[111:117],
	_OpTypeName[117:127],
	_OpTypeName[127:130],
	_OpTypeName[130:141],
	_OpTypeName[141:160],
	_OpTypeName[160:165],
	_OpTypeName[165:169],
	_OpTypeName[169:177],
	_OpTypeName[177:181],
	_OpTypeName[181:184],
	_OpTypeName[184:194],
	_OpTypeName[194:202],
	_OpTypeName[202:209],
	_OpTypeName[209:216],
	_OpTypeName[216:224],
	_OpTypeName[224:230],
	_OpTypeName[230:233],
	_OpTypeName[233:235],
	_OpTypeName[235:241],
	_OpTypeName[241:246],
	_OpTypeName[246:250],
	_OpTypeName[250:259],
	_OpTypeName[259:266],
	_OpTypeName[266:281],
	_OpTypeName[281:297],
	_OpTypeName[297:302],
	_OpTypeName[302:311],
	_OpTypeName[311:331],
	_OpTypeName[331:348],
	_OpTypeName[348:352],
	_OpTypeName[352:356],
	_OpTypeName[356:360],
	_OpTypeName[360:368],
	_OpTypeName[368:371],
	_OpTypeName[371:375],
	_OpTypeName[375:378],
	_OpTypeName[378:399],
	_OpTypeName[399:419],
	_OpTypeName[419:436],
	_OpTypeName[436:450],
	_OpTypeName[450:454],
	_OpTypeName[454:462],
	_OpTypeName[462:481],
	_OpTypeName[481:498],
	_OpTypeName[498:507],
	_OpTypeName[507:518],
	_OpTypeName[518:525],
	_OpTypeName[525:536],
	_OpTypeName[536:546],
	_OpTypeName[546:567],
	_OpTypeName[567:578],
	_OpTypeName[578:591],
	_OpTypeName[591:602],
	_OpTypeName[602:612],
	_OpTypeName[612:626],
	_OpTypeName[626:644],
	_OpTypeName[644:647],
	_OpTypeName[647:653],
	_OpTypeName[653:669],
	_OpTypeName[669:684],
	_OpTypeName[684:686],
	_OpTypeName[686:692],
	_OpTypeName[692:711],
	_OpTypeName[711:718],
	_OpTypeName[718:721],
	_OpTypeName[721:732],
	_OpTypeName[732:736],
	_OpTypeName[736:742],
	_OpTypeName[742:757],
	_OpTypeName[757:770],
	_OpTypeName[770:782],
	_OpTypeName[782:789],
	_OpTypeName[789:804],
	_OpTypeName[804:811],
	_OpTypeName[811:817],
	_OpTypeName[817:833],
	_OpTypeName[833:837],
	_OpTypeName[837:842],
	_OpTypeName[842:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
