// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReshapeRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterReduceWindowReverseSelectSelectAndScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 120, 126, 143, 149, 159, 162, 173, 192, 197, 203, 207, 215, 219, 222, 232, 240, 247, 254, 262, 268, 271, 273, 276, 282, 287, 291, 300, 306, 313, 328, 343, 359, 364, 371, 380, 400, 417, 421, 425, 430, 434, 442, 445, 449, 458, 461, 482, 502, 519, 523, 531, 550, 567, 576, 587, 597, 618, 629, 642, 653, 663, 677, 695, 698, 714, 729, 731, 737, 756, 763, 774, 778, 793, 806, 818, 825, 831, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereshaperngbitgeneratorroundnearestafzroundnearestevenrsqrtscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositeconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescatterreducewindowreverseselectselectandscattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Convert-(16)]
	_ = x[Cosine-(17)]
	_ = x[CountLeadingZeros-(18)]
	_ = x[Divide-(19)]
	_ = x[DotGeneral-(20)]
	_ = x[Erf-(21)]
	_ = x[Exponential-(22)]
	_ = x[ExponentialMinusOne-(23)]
	_ = x[Floor-(24)]
	_ = x[Gather-(25)]
	_ = x[Imag-(26)]
	_ = x[IsFinite-(27)]
	_ = x[Iota-(28)]
	_ = x[Log-(29)]
	_ = x[LogPlusOne-(30)]
	_ = x[Logistic-(31)]
	_ = x[Maximum-(32)]
	_ = x[Minimum-(33)]
	_ = x[Multiply-(34)]
	_ = x[Negate-(35)]
	_ = x[Not-(36)]
	_ = x[Or-(37)]
	_ = x[Pad-(38)]
	_ = x[Popcnt-(39)]
	_ = x[Power-(40)]
	_ = x[Real-(41)]
	_ = x[Remainder-(42)]
	_ = x[Reduce-(43)]
	_ = x[Reshape-(44)]
	_ = x[RngBitGenerator-(45)]
	_ = x[RoundNearestAfz-(46)]
	_ = x[RoundNearestEven-(47)]
	_ = x[Rsqrt-(48)]
	_ = x[Scatter-(49)]
	_ = x[ShiftLeft-(50)]
	_ = x[ShiftRightArithmetic-(51)]
	_ = x[ShiftRightLogical-(52)]
	_ = x[Sign-(53)]
	_ = x[Sine-(54)]
	_ = x[Slice-(55)]
	_ = x[Sqrt-(56)]
	_ = x[Subtract-(57)]
	_ = x[Tan-(58)]
	_ = x[Tanh-(59)]
	_ = x[Transpose-(60)]
	_ = x[Xor-(61)]
	_ = x[BatchNormForInference-(62)]
	_ = x[BatchNormForTraining-(63)]
	_ = x[BatchNormGradient-(64)]
	_ = x[Case-(65)]
	_ = x[Cholesky-(66)]
	_ = x[CollectiveBroadcast-(67)]
	_ = x[CollectivePermute-(68)]
	_ = x[Composite-(69)]
	_ = x[Convolution-(70)]
	_ = x[CustomCall-(71)]
	_ = x[DynamicBroadcastInDim-(72)]
	_ = x[DynamicConv-(73)]
	_ = x[DynamicGather-(74)]
	_ = x[DynamicIota-(75)]
	_ = x[DynamicPad-(76)]
	_ = x[DynamicReshape-(77)]
	_ = x[DynamicUpdateSlice-(78)]
	_ = x[Fft-(79)]
	_ = x[GetDimensionSize-(80)]
	_ = x[GetTupleElement-(81)]
	_ = x[If-(82)]
	_ = x[Infeed-(83)]
	_ = x[OptimizationBarrier-(84)]
	_ = x[Outfeed-(85)]
	_ = x[PartitionId-(86)]
	_ = x[Recv-(87)]
	_ = x[ReducePrecision-(88)]
	_ = x[ReduceScatter-(89)]
	_ = x[ReduceWindow-(90)]
	_ = x[Reverse-(91)]
	_ = x[Select-(92)]
	_ = x[SelectAndScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, Reshape, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, Select, SelectAndScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:120]:      Convert,
	_OpTypeLowerName[113:120]: Convert,
	_OpTypeName[120:126]:      Cosine,
	_OpTypeLowerName[120:126]: Cosine,
	_OpTypeName[126:143]:      CountLeadingZeros,
	_OpTypeLowerName[126:143]: CountLeadingZeros,
	_OpTypeName[143:149]:      Divide,
	_OpTypeLowerName[143:149]: Divide,
	_OpTypeName[149:159]:      DotGeneral,
	_OpTypeLowerName[149:159]: DotGeneral,
	_OpTypeName[159:162]:      Erf,
	_OpTypeLowerName[159:162]: Erf,
	_OpTypeName[162:173]:      Exponential,
	_OpTypeLowerName[162:173]: Exponential,
	_OpTypeName[173:192]:      ExponentialMinusOne,
	_OpTypeLowerName[173:192]: ExponentialMinusOne,
	_OpTypeName[192:197]:      Floor,
	_OpTypeLowerName[192:197]: Floor,
	_OpTypeName[197:203]:      Gather,
	_OpTypeLowerName[197:203]: Gather,
	_OpTypeName[203:207]:      Imag,
	_OpTypeLowerName[203:207]: Imag,
	_OpTypeName[207:215]:      IsFinite,
	_OpTypeLowerName[207:215]: IsFinite,
	_OpTypeName[215:219]:      Iota,
	_OpTypeLowerName[215:219]: Iota,
	_OpTypeName[219:222]:      Log,
	_OpTypeLowerName[219:222]: Log,
	_OpTypeName[222:232]:      LogPlusOne,
	_OpTypeLowerName[222:232]: LogPlusOne,
	_OpTypeName[232:240]:      Logistic,
	_OpTypeLowerName[232:240]: Logistic,
	_OpTypeName[240:247]:      Maximum,
	_OpTypeLowerName[240:247]: Maximum,
	_OpTypeName[247:254]:      Minimum,
	_OpTypeLowerName[247:254]: Minimum,
	_OpTypeName[254:262]:      Multiply,
	_OpTypeLowerName[254:262]: Multiply,
	_OpTypeName[262:268]:      Negate,
	_OpTypeLowerName[262:268]: Negate,
	_OpTypeName[268:271]:      Not,
	_OpTypeLowerName[268:271]: Not,
	_OpTypeName[271:273]:      Or,
	_OpTypeLowerName[271:273]: Or,
	_OpTypeName[273:276]:      Pad,
	_OpTypeLowerName[273:276]: Pad,
	_OpTypeName[276:282]:      Popcnt,
	_OpTypeLowerName[276:282]: Popcnt,
	_OpTypeName[282:287]:      Power,
	_OpTypeLowerName[282:287]: Power,
	_OpTypeName[287:291]:      Real,
	_OpTypeLowerName[287:291]: Real,
	_OpTypeName[291:300]:      Remainder,
	_OpTypeLowerName[291:300]: Remainder,
	_OpTypeName[300:306]:      Reduce,
	_OpTypeLowerName[300:306]: Reduce,
	_OpTypeName[306:313]:      Reshape,
	_OpTypeLowerName[306:313]: Reshape,
	_OpTypeName[313:328]:      RngBitGenerator,
	_OpTypeLowerName[313:328]: RngBitGenerator,
	_OpTypeName[328:343]:      RoundNearestAfz,
	_OpTypeLowerName[328:343]: RoundNearestAfz,
	_OpTypeName[343:359]:      RoundNearestEven,
	_OpTypeLowerName[343:359]: RoundNearestEven,
	_OpTypeName[359:364]:      Rsqrt,
	_OpTypeLowerName[359:364]: Rsqrt,
	_OpTypeName[364:371]:      Scatter,
	_OpTypeLowerName[364:371]: Scatter,
	_OpTypeName[371:380]:      ShiftLeft,
	_OpTypeLowerName[371:380]: ShiftLeft,
	_OpTypeName[380:400]:      ShiftRightArithmetic,
	_OpTypeLowerName[380:400]: ShiftRightArithmetic,
	_OpTypeName[400:417]:      ShiftRightLogical,
	_OpTypeLowerName[400:417]: ShiftRightLogical,
	_OpTypeName[417:421]:      Sign,
	_OpTypeLowerName[417:421]: Sign,
	_OpTypeName[421:425]:      Sine,
	_OpTypeLowerName[421:425]: Sine,
	_OpTypeName[425:430]:      Slice,
	_OpTypeLowerName[425:430]: Slice,
	_OpTypeName[430:434]:      Sqrt,
	_OpTypeLowerName[430:434]: Sqrt,
	_OpTypeName[434:442]:      Subtract,
	_OpTypeLowerName[434:442]: Subtract,
	_OpTypeName[442:445]:      Tan,
	_OpTypeLowerName[442:445]: Tan,
	_OpTypeName[445:449]:      Tanh,
	_OpTypeLowerName[445:449]: Tanh,
	_OpTypeName[449:458]:      Transpose,
	_OpTypeLowerName[449:458]: Transpose,
	_OpTypeName[458:461]:      Xor,
	_OpTypeLowerName[458:461]: Xor,
	_OpTypeName[461:482]:      BatchNormForInference,
	_OpTypeLowerName[461:482]: BatchNormForInference,
	_OpTypeName[482:502]:      BatchNormForTraining,
	_OpTypeLowerName[482:502]: BatchNormForTraining,
	_OpTypeName[502:519]:      BatchNormGradient,
	_OpTypeLowerName[502:519]: BatchNormGradient,
	_OpTypeName[519:523]:      Case,
	_OpTypeLowerName[519:523]: Case,
	_OpTypeName[523:531]:      Cholesky,
	_OpTypeLowerName[523:531]: Cholesky,
	_OpTypeName[531:550]:      CollectiveBroadcast,
	_OpTypeLowerName[531:550]: CollectiveBroadcast,
	_OpTypeName[550:567]:      CollectivePermute,
	_OpTypeLowerName[550:567]: CollectivePermute,
	_OpTypeName[567:576]:      Composite,
	_OpTypeLowerName[567:576]: Composite,
	_OpTypeName[576:587]:      Convolution,
	_OpTypeLowerName[576:587]: Convolution,
	_OpTypeName[587:597]:      CustomCall,
	_OpTypeLowerName[587:597]: CustomCall,
	_OpTypeName[597:618]:      DynamicBroadcastInDim,
	_OpTypeLowerName[597:618]: DynamicBroadcastInDim,
	_OpTypeName[618:629]:      DynamicConv,
	_OpTypeLowerName[618:629]: DynamicConv,
	_OpTypeName[629:642]:      DynamicGather,
	_OpTypeLowerName[629:642]: DynamicGather,
	_OpTypeName[642:653]:      DynamicIota,
	_OpTypeLowerName[642:653]: DynamicIota,
	_OpTypeName[653:663]:      DynamicPad,
	_OpTypeLowerName[653:663]: DynamicPad,
	_OpTypeName[663:677]:      DynamicReshape,
	_OpTypeLowerName[663:677]: DynamicReshape,
	_OpTypeName[677:695]:      DynamicUpdateSlice,
	_OpTypeLowerName[677:695]: DynamicUpdateSlice,
	_OpTypeName[695:698]:      Fft,
	_OpTypeLowerName[695:698]: Fft,
	_OpTypeName[698:714]:      GetDimensionSize,
	_OpTypeLowerName[698:714]: GetDimensionSize,
	_OpTypeName[714:729]:      GetTupleElement,
	_OpTypeLowerName[714:729]: GetTupleElement,
	_OpTypeName[729:731]:      If,
	_OpTypeLowerName[729:731]: If,
	_OpTypeName[731:737]:      Infeed,
	_OpTypeLowerName[731:737]: Infeed,
	_OpTypeName[737:756]:      OptimizationBarrier,
	_OpTypeLowerName[737:756]: OptimizationBarrier,
	_OpTypeName[756:763]:      Outfeed,
	_OpTypeLowerName[756:763]: Outfeed,
	_OpTypeName[763:774]:      PartitionId,
	_OpTypeLowerName[763:774]: PartitionId,
	_OpTypeName[774:778]:      Recv,
	_OpTypeLowerName[774:778]: Recv,
	_OpTypeName[778:793]:      ReducePrecision,
	_OpTypeLowerName[778:793]: ReducePrecision,
	_OpTypeName[793:806]:      ReduceScatter,
	_OpTypeLowerName[793:806]: ReduceScatter,
	_OpTypeName[806:818]:      ReduceWindow,
	_OpTypeLowerName[806:818]: ReduceWindow,
	_OpTypeName[818:825]:      Reverse,
	_OpTypeLowerName[818:825]: Reverse,
	_OpTypeName[825:831]:      Select,
	_OpTypeLowerName[825:831]: Select,
	_OpTypeName[831:847]:      SelectAndScatter,
	_OpTypeLowerName[831:847]: SelectAndScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:120],
	_OpTypeName[120:126],
	_OpTypeName[126:143],
	_OpTypeName[143:149],
	_OpTypeName[149:159],
	_OpTypeName[159:162],
	_OpTypeName[162:173],
	_OpTypeName[173:192],
	_OpTypeName[192:197],
	_OpTypeName[197:203],
	_OpTypeName[203:207],
	_OpTypeName[207:215],
	_OpTypeName[215:219],
	_OpTypeName[219:222],
	_OpTypeName[222:232],
	_OpTypeName[232:240],
	_OpTypeName[240:247],
	_OpTypeName[247:254],
	_OpTypeName[254:262],
	_OpTypeName[262:268],
	_OpTypeName[268:271],
	_OpTypeName[271:273],
	_OpTypeName[273:276],
	_OpTypeName[276:282],
	_OpTypeName[282:287],
	_OpTypeName[287:291],
	_OpTypeName[291:300],
	_OpTypeName[300:306],
	_OpTypeName[306:313],
	_OpTypeName[313:328],
	_OpTypeName[328:343],
	_OpTypeName[343:359],
	_OpTypeName[359:364],
	_OpTypeName[364:371],
	_OpTypeName[371:380],
	_OpTypeName[380:400],
	_OpTypeName[400:417],
	_OpTypeName[417:421],
	_OpTypeName[421:425],
	_OpTypeName[425:430],
	_OpTypeName[430:434],
	_OpTypeName[434:442],
	_OpTypeName[442:445],
	_OpTypeName[445:449],
	_OpTypeName[449:458],
	_OpTypeName[458:461],
	_OpTypeName[461:482],
	_OpTypeName[482:502],
	_OpTypeName[502:519],
	_OpTypeName[519:523],
	_OpTypeName[523:531],
	_OpTypeName[531:550],
	_OpTypeName[550:567],
	_OpTypeName[567:576],
	_OpTypeName[576:587],
	_OpTypeName[587:597],
	_OpTypeName[597:618],
	_OpTypeName[618:629],
	_OpTypeName[629:642],
	_OpTypeName[642:653],
	_OpTypeName[653:663],
	_OpTypeName[663:677],
	_OpTypeName[677:695],
	_OpTypeName[695:698],
	_OpTypeName[698:714],
	_OpTypeName[714:729],
	_OpTypeName[729:731],
	_OpTypeName[731:737],
	_OpTypeName[737:756],
	_OpTypeName[756:763],
	_OpTypeName[763:774],
	_OpTypeName[774:778],
	_OpTypeName[778:793],
	_OpTypeName[793:806],
	_OpTypeName[806:818],
	_OpTypeName[818:825],
	_OpTypeName[825:831],
	_OpTypeName[831:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
