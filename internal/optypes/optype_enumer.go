// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReduceReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 119, 136, 142, 152, 155, 166, 185, 190, 196, 200, 208, 212, 215, 225, 233, 240, 247, 255, 261, 264, 266, 272, 277, 281, 290, 296, 303, 318, 334, 339, 348, 368, 385, 389, 393, 398, 402, 410, 413, 417, 426, 429, 450, 470, 487, 491, 499, 518, 535, 544, 551, 562, 572, 593, 604, 617, 628, 638, 652, 670, 673, 689, 704, 706, 712, 731, 738, 741, 752, 756, 771, 784, 796, 803, 818, 825, 831, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenatecosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreducereshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositeconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Cosine-(16)]
	_ = x[CountLeadingZeros-(17)]
	_ = x[Divide-(18)]
	_ = x[DotGeneral-(19)]
	_ = x[Erf-(20)]
	_ = x[Exponential-(21)]
	_ = x[ExponentialMinusOne-(22)]
	_ = x[Floor-(23)]
	_ = x[Gather-(24)]
	_ = x[Imag-(25)]
	_ = x[IsFinite-(26)]
	_ = x[Iota-(27)]
	_ = x[Log-(28)]
	_ = x[LogPlusOne-(29)]
	_ = x[Logistic-(30)]
	_ = x[Maximum-(31)]
	_ = x[Minimum-(32)]
	_ = x[Multiply-(33)]
	_ = x[Negate-(34)]
	_ = x[Not-(35)]
	_ = x[Or-(36)]
	_ = x[Popcnt-(37)]
	_ = x[Power-(38)]
	_ = x[Real-(39)]
	_ = x[Remainder-(40)]
	_ = x[Reduce-(41)]
	_ = x[Reshape-(42)]
	_ = x[RoundNearestAfz-(43)]
	_ = x[RoundNearestEven-(44)]
	_ = x[Rsqrt-(45)]
	_ = x[ShiftLeft-(46)]
	_ = x[ShiftRightArithmetic-(47)]
	_ = x[ShiftRightLogical-(48)]
	_ = x[Sign-(49)]
	_ = x[Sine-(50)]
	_ = x[Slice-(51)]
	_ = x[Sqrt-(52)]
	_ = x[Subtract-(53)]
	_ = x[Tan-(54)]
	_ = x[Tanh-(55)]
	_ = x[Transpose-(56)]
	_ = x[Xor-(57)]
	_ = x[BatchNormForInference-(58)]
	_ = x[BatchNormForTraining-(59)]
	_ = x[BatchNormGradient-(60)]
	_ = x[Case-(61)]
	_ = x[Cholesky-(62)]
	_ = x[CollectiveBroadcast-(63)]
	_ = x[CollectivePermute-(64)]
	_ = x[Composite-(65)]
	_ = x[Convert-(66)]
	_ = x[Convolution-(67)]
	_ = x[CustomCall-(68)]
	_ = x[DynamicBroadcastInDim-(69)]
	_ = x[DynamicConv-(70)]
	_ = x[DynamicGather-(71)]
	_ = x[DynamicIota-(72)]
	_ = x[DynamicPad-(73)]
	_ = x[DynamicReshape-(74)]
	_ = x[DynamicUpdateSlice-(75)]
	_ = x[Fft-(76)]
	_ = x[GetDimensionSize-(77)]
	_ = x[GetTupleElement-(78)]
	_ = x[If-(79)]
	_ = x[Infeed-(80)]
	_ = x[OptimizationBarrier-(81)]
	_ = x[Outfeed-(82)]
	_ = x[Pad-(83)]
	_ = x[PartitionId-(84)]
	_ = x[Recv-(85)]
	_ = x[ReducePrecision-(86)]
	_ = x[ReduceScatter-(87)]
	_ = x[ReduceWindow-(88)]
	_ = x[Reverse-(89)]
	_ = x[RngBitGenerator-(90)]
	_ = x[Scatter-(91)]
	_ = x[Select-(92)]
	_ = x[SelectAndScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reduce, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:119]:      Cosine,
	_OpTypeLowerName[113:119]: Cosine,
	_OpTypeName[119:136]:      CountLeadingZeros,
	_OpTypeLowerName[119:136]: CountLeadingZeros,
	_OpTypeName[136:142]:      Divide,
	_OpTypeLowerName[136:142]: Divide,
	_OpTypeName[142:152]:      DotGeneral,
	_OpTypeLowerName[142:152]: DotGeneral,
	_OpTypeName[152:155]:      Erf,
	_OpTypeLowerName[152:155]: Erf,
	_OpTypeName[155:166]:      Exponential,
	_OpTypeLowerName[155:166]: Exponential,
	_OpTypeName[166:185]:      ExponentialMinusOne,
	_OpTypeLowerName[166:185]: ExponentialMinusOne,
	_OpTypeName[185:190]:      Floor,
	_OpTypeLowerName[185:190]: Floor,
	_OpTypeName[190:196]:      Gather,
	_OpTypeLowerName[190:196]: Gather,
	_OpTypeName[196:200]:      Imag,
	_OpTypeLowerName[196:200]: Imag,
	_OpTypeName[200:208]:      IsFinite,
	_OpTypeLowerName[200:208]: IsFinite,
	_OpTypeName[208:212]:      Iota,
	_OpTypeLowerName[208:212]: Iota,
	_OpTypeName[212:215]:      Log,
	_OpTypeLowerName[212:215]: Log,
	_OpTypeName[215:225]:      LogPlusOne,
	_OpTypeLowerName[215:225]: LogPlusOne,
	_OpTypeName[225:233]:      Logistic,
	_OpTypeLowerName[225:233]: Logistic,
	_OpTypeName[233:240]:      Maximum,
	_OpTypeLowerName[233:240]: Maximum,
	_OpTypeName[240:247]:      Minimum,
	_OpTypeLowerName[240:247]: Minimum,
	_OpTypeName[247:255]:      Multiply,
	_OpTypeLowerName[247:255]: Multiply,
	_OpTypeName[255:261]:      Negate,
	_OpTypeLowerName[255:261]: Negate,
	_OpTypeName[261:264]:      Not,
	_OpTypeLowerName[261:264]: Not,
	_OpTypeName[264:266]:      Or,
	_OpTypeLowerName[264:266]: Or,
	_OpTypeName[266:272]:      Popcnt,
	_OpTypeLowerName[266:272]: Popcnt,
	_OpTypeName[272:277]:      Power,
	_OpTypeLowerName[272:277]: Power,
	_OpTypeName[277:281]:      Real,
	_OpTypeLowerName[277:281]: Real,
	_OpTypeName[281:290]:      Remainder,
	_OpTypeLowerName[281:290]: Remainder,
	_OpTypeName[290:296]:      Reduce,
	_OpTypeLowerName[290:296]: Reduce,
	_OpTypeName[296:303]:      Reshape,
	_OpTypeLowerName[296:303]: Reshape,
	_OpTypeName[303:318]:      RoundNearestAfz,
	_OpTypeLowerName[303:318]: RoundNearestAfz,
	_OpTypeName[318:334]:      RoundNearestEven,
	_OpTypeLowerName[318:334]: RoundNearestEven,
	_OpTypeName[334:339]:      Rsqrt,
	_OpTypeLowerName[334:339]: Rsqrt,
	_OpTypeName[339:348]:      ShiftLeft,
	_OpTypeLowerName[339:348]: ShiftLeft,
	_OpTypeName[348:368]:      ShiftRightArithmetic,
	_OpTypeLowerName[348:368]: ShiftRightArithmetic,
	_OpTypeName[368:385]:      ShiftRightLogical,
	_OpTypeLowerName[368:385]: ShiftRightLogical,
	_OpTypeName[385:389]:      Sign,
	_OpTypeLowerName[385:389]: Sign,
	_OpTypeName[389:393]:      Sine,
	_OpTypeLowerName[389:393]: Sine,
	_OpTypeName[393:398]:      Slice,
	_OpTypeLowerName[393:398]: Slice,
	_OpTypeName[398:402]:      Sqrt,
	_OpTypeLowerName[398:402]: Sqrt,
	_OpTypeName[402:410]:      Subtract,
	_OpTypeLowerName[402:410]: Subtract,
	_OpTypeName[410:413]:      Tan,
	_OpTypeLowerName[410:413]: Tan,
	_OpTypeName[413:417]:      Tanh,
	_OpTypeLowerName[413:417]: Tanh,
	_OpTypeName[417:426]:      Transpose,
	_OpTypeLowerName[417:426]: Transpose,
	_OpTypeName[426:429]:      Xor,
	_OpTypeLowerName[426:429]: Xor,
	_OpTypeName[429:450]:      BatchNormForInference,
	_OpTypeLowerName[429:450]: BatchNormForInference,
	_OpTypeName[450:470]:      BatchNormForTraining,
	_OpTypeLowerName[450:470]: BatchNormForTraining,
	_OpTypeName[470:487]:      BatchNormGradient,
	_OpTypeLowerName[470:487]: BatchNormGradient,
	_OpTypeName[487:491]:      Case,
	_OpTypeLowerName[487:491]: Case,
	_OpTypeName[491:499]:      Cholesky,
	_OpTypeLowerName[491:499]: Cholesky,
	_OpTypeName[499:518]:      CollectiveBroadcast,
	_OpTypeLowerName[499:518]: CollectiveBroadcast,
	_OpTypeName[518:535]:      CollectivePermute,
	_OpTypeLowerName[518:535]: CollectivePermute,
	_OpTypeName[535:544]:      Composite,
	_OpTypeLowerName[535:544]: Composite,
	_OpTypeName[544:551]:      Convert,
	_OpTypeLowerName[544:551]: Convert,
	_OpTypeName[551:562]:      Convolution,
	_OpTypeLowerName[551:562]: Convolution,
	_OpTypeName[562:572]:      CustomCall,
	_OpTypeLowerName[562:572]: CustomCall,
	_OpTypeName[572:593]:      DynamicBroadcastInDim,
	_OpTypeLowerName[572:593]: DynamicBroadcastInDim,
	_OpTypeName[593:604]:      DynamicConv,
	_OpTypeLowerName[593:604]: DynamicConv,
	_OpTypeName[604:617]:      DynamicGather,
	_OpTypeLowerName[604:617]: DynamicGather,
	_OpTypeName[617:628]:      DynamicIota,
	_OpTypeLowerName[617:628]: DynamicIota,
	_OpTypeName[628:638]:      DynamicPad,
	_OpTypeLowerName[628:638]: DynamicPad,
	_OpTypeName[638:652]:      DynamicReshape,
	_OpTypeLowerName[638:652]: DynamicReshape,
	_OpTypeName[652:670]:      DynamicUpdateSlice,
	_OpTypeLowerName[652:670]: DynamicUpdateSlice,
	_OpTypeName[670:673]:      Fft,
	_OpTypeLowerName[670:673]: Fft,
	_OpTypeName[673:689]:      GetDimensionSize,
	_OpTypeLowerName[673:689]: GetDimensionSize,
	_OpTypeName[689:704]:      GetTupleElement,
	_OpTypeLowerName[689:704]: GetTupleElement,
	_OpTypeName[704:706]:      If,
	_OpTypeLowerName[704:706]: If,
	_OpTypeName[706:712]:      Infeed,
	_OpTypeLowerName[706:712]: Infeed,
	_OpTypeName[712:731]:      OptimizationBarrier,
	_OpTypeLowerName[712:731]: OptimizationBarrier,
	_OpTypeName[731:738]:      Outfeed,
	_OpTypeLowerName[731:738]: Outfeed,
	_OpTypeName[738:741]:      Pad,
	_OpTypeLowerName[738:741]: Pad,
	_OpTypeName[741:752]:      PartitionId,
	_OpTypeLowerName[741:752]: PartitionId,
	_OpTypeName[752:756]:      Recv,
	_OpTypeLowerName[752:756]: Recv,
	_OpTypeName[756:771]:      ReducePrecision,
	_OpTypeLowerName[756:771]: ReducePrecision,
	_OpTypeName[771:784]:      ReduceScatter,
	_OpTypeLowerName[771:784]: ReduceScatter,
	_OpTypeName[784:796]:      ReduceWindow,
	_OpTypeLowerName[784:796]: ReduceWindow,
	_OpTypeName[796:803]:      Reverse,
	_OpTypeLowerName[796:803]: Reverse,
	_OpTypeName[803:818]:      RngBitGenerator,
	_OpTypeLowerName[803:818]: RngBitGenerator,
	_OpTypeName[818:825]:      Scatter,
	_OpTypeLowerName[818:825]: Scatter,
	_OpTypeName[825:831]:      Select,
	_OpTypeLowerName[825:831]: Select,
	_OpTypeName[831:847]:      SelectAndScatter,
	_OpTypeLowerName[831:847]: SelectAndScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:119],
	_OpTypeName[119:136],
	_OpTypeName[136:142],
	_OpTypeName[142:152],
	_OpTypeName[152:155],
	_OpTypeName[155:166],
	_OpTypeName[166:185],
	_OpTypeName[185:190],
	_OpTypeName[190:196],
	_OpTypeName[196:200],
	_OpTypeName[200:208],
	_OpTypeName[208:212],
	_OpTypeName[212:215],
	_OpTypeName[215:225],
	_OpTypeName[225:233],
	_OpTypeName[233:240],
	_OpTypeName[240:247],
	_OpTypeName[247:255],
	_OpTypeName[255:261],
	_OpTypeName[261:264],
	_OpTypeName[264:266],
	_OpTypeName[266:272],
	_OpTypeName[272:277],
	_OpTypeName[277:281],
	_OpTypeName[281:290],
	_OpTypeName[290:296],
	_OpTypeName[296:303],
	_OpTypeName[303:318],
	_OpTypeName[318:334],
	_OpTypeName[334:339],
	_OpTypeName[339:348],
	_OpTypeName[348:368],
	_OpTypeName[368:385],
	_OpTypeName[385:389],
	_OpTypeName[389:393],
	_OpTypeName[393:398],
	_OpTypeName[398:402],
	_OpTypeName[402:410],
	_OpTypeName[410:413],
	_OpTypeName[413:417],
	_OpTypeName[417:426],
	_OpTypeName[426:429],
	_OpTypeName[429:450],
	_OpTypeName[450:470],
	_OpTypeName[470:487],
	_OpTypeName[487:491],
	_OpTypeName[491:499],
	_OpTypeName[499:518],
	_OpTypeName[518:535],
	_OpTypeName[535:544],
	_OpTypeName[544:551],
	_OpTypeName[551:562],
	_OpTypeName[562:572],
	_OpTypeName[572:593],
	_OpTypeName[593:604],
	_OpTypeName[604:617],
	_OpTypeName[617:628],
	_OpTypeName[628:638],
	_OpTypeName[638:652],
	_OpTypeName[652:670],
	_OpTypeName[670:673],
	_OpTypeName[673:689],
	_OpTypeName[689:704],
	_OpTypeName[704:706],
	_OpTypeName[706:712],
	_OpTypeName[712:731],
	_OpTypeName[731:738],
	_OpTypeName[738:741],
	_OpTypeName[741:752],
	_OpTypeName[752:756],
	_OpTypeName[756:771],
	_OpTypeName[771:784],
	_OpTypeName[784:796],
	_OpTypeName[796:803],
	_OpTypeName[803:818],
	_OpTypeName[818:825],
	_OpTypeName[825:831],
	_OpTypeName[831:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
