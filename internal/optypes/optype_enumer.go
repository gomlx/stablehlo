// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndArgMinMaxAtan2BatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastBroadcastBroadcastInDimCbrtCeilCompareComplexConjCosineCountLeadingZerosDivideErfExponentialExponentialMinusOneFloorImagIotaIsFiniteLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemainderReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeWhereXorLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 51, 56, 77, 97, 114, 121, 130, 144, 148, 152, 159, 166, 170, 176, 193, 199, 202, 213, 232, 237, 241, 245, 253, 256, 266, 274, 281, 288, 296, 302, 305, 307, 310, 316, 321, 325, 341, 356, 372, 388, 403, 419, 428, 437, 450, 459, 471, 480, 487, 494, 509, 524, 540, 545, 555, 565, 575, 594, 613, 632, 641, 661, 678, 682, 686, 691, 695, 703, 706, 710, 719, 724, 727, 731}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandargminmaxatan2batchnormforinferencebatchnormfortrainingbatchnormgradientbitcastbroadcastbroadcastindimcbrtceilcomparecomplexconjcosinecountleadingzerosdivideerfexponentialexponentialminusonefloorimagiotaisfiniteloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremainderreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposewherexorlast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[ArgMinMax-(7)]
	_ = x[Atan2-(8)]
	_ = x[BatchNormForInference-(9)]
	_ = x[BatchNormForTraining-(10)]
	_ = x[BatchNormGradient-(11)]
	_ = x[Bitcast-(12)]
	_ = x[Broadcast-(13)]
	_ = x[BroadcastInDim-(14)]
	_ = x[Cbrt-(15)]
	_ = x[Ceil-(16)]
	_ = x[Compare-(17)]
	_ = x[Complex-(18)]
	_ = x[Conj-(19)]
	_ = x[Cosine-(20)]
	_ = x[CountLeadingZeros-(21)]
	_ = x[Divide-(22)]
	_ = x[Erf-(23)]
	_ = x[Exponential-(24)]
	_ = x[ExponentialMinusOne-(25)]
	_ = x[Floor-(26)]
	_ = x[Imag-(27)]
	_ = x[Iota-(28)]
	_ = x[IsFinite-(29)]
	_ = x[Log-(30)]
	_ = x[LogPlusOne-(31)]
	_ = x[Logistic-(32)]
	_ = x[Maximum-(33)]
	_ = x[Minimum-(34)]
	_ = x[Multiply-(35)]
	_ = x[Negate-(36)]
	_ = x[Not-(37)]
	_ = x[Or-(38)]
	_ = x[Pad-(39)]
	_ = x[Popcnt-(40)]
	_ = x[Power-(41)]
	_ = x[Real-(42)]
	_ = x[ReduceBitwiseAnd-(43)]
	_ = x[ReduceBitwiseOr-(44)]
	_ = x[ReduceBitwiseXor-(45)]
	_ = x[ReduceLogicalAnd-(46)]
	_ = x[ReduceLogicalOr-(47)]
	_ = x[ReduceLogicalXor-(48)]
	_ = x[ReduceMax-(49)]
	_ = x[ReduceMin-(50)]
	_ = x[ReduceProduct-(51)]
	_ = x[ReduceSum-(52)]
	_ = x[ReduceWindow-(53)]
	_ = x[Remainder-(54)]
	_ = x[Reshape-(55)]
	_ = x[Reverse-(56)]
	_ = x[RngBitGenerator-(57)]
	_ = x[RoundNearestAfz-(58)]
	_ = x[RoundNearestEven-(59)]
	_ = x[Rsqrt-(60)]
	_ = x[ScatterMax-(61)]
	_ = x[ScatterMin-(62)]
	_ = x[ScatterSum-(63)]
	_ = x[SelectAndScatterMax-(64)]
	_ = x[SelectAndScatterMin-(65)]
	_ = x[SelectAndScatterSum-(66)]
	_ = x[ShiftLeft-(67)]
	_ = x[ShiftRightArithmetic-(68)]
	_ = x[ShiftRightLogical-(69)]
	_ = x[Sign-(70)]
	_ = x[Sine-(71)]
	_ = x[Slice-(72)]
	_ = x[Sqrt-(73)]
	_ = x[Subtract-(74)]
	_ = x[Tan-(75)]
	_ = x[Tanh-(76)]
	_ = x[Transpose-(77)]
	_ = x[Where-(78)]
	_ = x[Xor-(79)]
	_ = x[Last-(80)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, ArgMinMax, Atan2, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Bitcast, Broadcast, BroadcastInDim, Cbrt, Ceil, Compare, Complex, Conj, Cosine, CountLeadingZeros, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, IsFinite, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, ReduceWindow, Remainder, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Where, Xor, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:51]:        ArgMinMax,
	_OpTypeLowerName[42:51]:   ArgMinMax,
	_OpTypeName[51:56]:        Atan2,
	_OpTypeLowerName[51:56]:   Atan2,
	_OpTypeName[56:77]:        BatchNormForInference,
	_OpTypeLowerName[56:77]:   BatchNormForInference,
	_OpTypeName[77:97]:        BatchNormForTraining,
	_OpTypeLowerName[77:97]:   BatchNormForTraining,
	_OpTypeName[97:114]:       BatchNormGradient,
	_OpTypeLowerName[97:114]:  BatchNormGradient,
	_OpTypeName[114:121]:      Bitcast,
	_OpTypeLowerName[114:121]: Bitcast,
	_OpTypeName[121:130]:      Broadcast,
	_OpTypeLowerName[121:130]: Broadcast,
	_OpTypeName[130:144]:      BroadcastInDim,
	_OpTypeLowerName[130:144]: BroadcastInDim,
	_OpTypeName[144:148]:      Cbrt,
	_OpTypeLowerName[144:148]: Cbrt,
	_OpTypeName[148:152]:      Ceil,
	_OpTypeLowerName[148:152]: Ceil,
	_OpTypeName[152:159]:      Compare,
	_OpTypeLowerName[152:159]: Compare,
	_OpTypeName[159:166]:      Complex,
	_OpTypeLowerName[159:166]: Complex,
	_OpTypeName[166:170]:      Conj,
	_OpTypeLowerName[166:170]: Conj,
	_OpTypeName[170:176]:      Cosine,
	_OpTypeLowerName[170:176]: Cosine,
	_OpTypeName[176:193]:      CountLeadingZeros,
	_OpTypeLowerName[176:193]: CountLeadingZeros,
	_OpTypeName[193:199]:      Divide,
	_OpTypeLowerName[193:199]: Divide,
	_OpTypeName[199:202]:      Erf,
	_OpTypeLowerName[199:202]: Erf,
	_OpTypeName[202:213]:      Exponential,
	_OpTypeLowerName[202:213]: Exponential,
	_OpTypeName[213:232]:      ExponentialMinusOne,
	_OpTypeLowerName[213:232]: ExponentialMinusOne,
	_OpTypeName[232:237]:      Floor,
	_OpTypeLowerName[232:237]: Floor,
	_OpTypeName[237:241]:      Imag,
	_OpTypeLowerName[237:241]: Imag,
	_OpTypeName[241:245]:      Iota,
	_OpTypeLowerName[241:245]: Iota,
	_OpTypeName[245:253]:      IsFinite,
	_OpTypeLowerName[245:253]: IsFinite,
	_OpTypeName[253:256]:      Log,
	_OpTypeLowerName[253:256]: Log,
	_OpTypeName[256:266]:      LogPlusOne,
	_OpTypeLowerName[256:266]: LogPlusOne,
	_OpTypeName[266:274]:      Logistic,
	_OpTypeLowerName[266:274]: Logistic,
	_OpTypeName[274:281]:      Maximum,
	_OpTypeLowerName[274:281]: Maximum,
	_OpTypeName[281:288]:      Minimum,
	_OpTypeLowerName[281:288]: Minimum,
	_OpTypeName[288:296]:      Multiply,
	_OpTypeLowerName[288:296]: Multiply,
	_OpTypeName[296:302]:      Negate,
	_OpTypeLowerName[296:302]: Negate,
	_OpTypeName[302:305]:      Not,
	_OpTypeLowerName[302:305]: Not,
	_OpTypeName[305:307]:      Or,
	_OpTypeLowerName[305:307]: Or,
	_OpTypeName[307:310]:      Pad,
	_OpTypeLowerName[307:310]: Pad,
	_OpTypeName[310:316]:      Popcnt,
	_OpTypeLowerName[310:316]: Popcnt,
	_OpTypeName[316:321]:      Power,
	_OpTypeLowerName[316:321]: Power,
	_OpTypeName[321:325]:      Real,
	_OpTypeLowerName[321:325]: Real,
	_OpTypeName[325:341]:      ReduceBitwiseAnd,
	_OpTypeLowerName[325:341]: ReduceBitwiseAnd,
	_OpTypeName[341:356]:      ReduceBitwiseOr,
	_OpTypeLowerName[341:356]: ReduceBitwiseOr,
	_OpTypeName[356:372]:      ReduceBitwiseXor,
	_OpTypeLowerName[356:372]: ReduceBitwiseXor,
	_OpTypeName[372:388]:      ReduceLogicalAnd,
	_OpTypeLowerName[372:388]: ReduceLogicalAnd,
	_OpTypeName[388:403]:      ReduceLogicalOr,
	_OpTypeLowerName[388:403]: ReduceLogicalOr,
	_OpTypeName[403:419]:      ReduceLogicalXor,
	_OpTypeLowerName[403:419]: ReduceLogicalXor,
	_OpTypeName[419:428]:      ReduceMax,
	_OpTypeLowerName[419:428]: ReduceMax,
	_OpTypeName[428:437]:      ReduceMin,
	_OpTypeLowerName[428:437]: ReduceMin,
	_OpTypeName[437:450]:      ReduceProduct,
	_OpTypeLowerName[437:450]: ReduceProduct,
	_OpTypeName[450:459]:      ReduceSum,
	_OpTypeLowerName[450:459]: ReduceSum,
	_OpTypeName[459:471]:      ReduceWindow,
	_OpTypeLowerName[459:471]: ReduceWindow,
	_OpTypeName[471:480]:      Remainder,
	_OpTypeLowerName[471:480]: Remainder,
	_OpTypeName[480:487]:      Reshape,
	_OpTypeLowerName[480:487]: Reshape,
	_OpTypeName[487:494]:      Reverse,
	_OpTypeLowerName[487:494]: Reverse,
	_OpTypeName[494:509]:      RngBitGenerator,
	_OpTypeLowerName[494:509]: RngBitGenerator,
	_OpTypeName[509:524]:      RoundNearestAfz,
	_OpTypeLowerName[509:524]: RoundNearestAfz,
	_OpTypeName[524:540]:      RoundNearestEven,
	_OpTypeLowerName[524:540]: RoundNearestEven,
	_OpTypeName[540:545]:      Rsqrt,
	_OpTypeLowerName[540:545]: Rsqrt,
	_OpTypeName[545:555]:      ScatterMax,
	_OpTypeLowerName[545:555]: ScatterMax,
	_OpTypeName[555:565]:      ScatterMin,
	_OpTypeLowerName[555:565]: ScatterMin,
	_OpTypeName[565:575]:      ScatterSum,
	_OpTypeLowerName[565:575]: ScatterSum,
	_OpTypeName[575:594]:      SelectAndScatterMax,
	_OpTypeLowerName[575:594]: SelectAndScatterMax,
	_OpTypeName[594:613]:      SelectAndScatterMin,
	_OpTypeLowerName[594:613]: SelectAndScatterMin,
	_OpTypeName[613:632]:      SelectAndScatterSum,
	_OpTypeLowerName[613:632]: SelectAndScatterSum,
	_OpTypeName[632:641]:      ShiftLeft,
	_OpTypeLowerName[632:641]: ShiftLeft,
	_OpTypeName[641:661]:      ShiftRightArithmetic,
	_OpTypeLowerName[641:661]: ShiftRightArithmetic,
	_OpTypeName[661:678]:      ShiftRightLogical,
	_OpTypeLowerName[661:678]: ShiftRightLogical,
	_OpTypeName[678:682]:      Sign,
	_OpTypeLowerName[678:682]: Sign,
	_OpTypeName[682:686]:      Sine,
	_OpTypeLowerName[682:686]: Sine,
	_OpTypeName[686:691]:      Slice,
	_OpTypeLowerName[686:691]: Slice,
	_OpTypeName[691:695]:      Sqrt,
	_OpTypeLowerName[691:695]: Sqrt,
	_OpTypeName[695:703]:      Subtract,
	_OpTypeLowerName[695:703]: Subtract,
	_OpTypeName[703:706]:      Tan,
	_OpTypeLowerName[703:706]: Tan,
	_OpTypeName[706:710]:      Tanh,
	_OpTypeLowerName[706:710]: Tanh,
	_OpTypeName[710:719]:      Transpose,
	_OpTypeLowerName[710:719]: Transpose,
	_OpTypeName[719:724]:      Where,
	_OpTypeLowerName[719:724]: Where,
	_OpTypeName[724:727]:      Xor,
	_OpTypeLowerName[724:727]: Xor,
	_OpTypeName[727:731]:      Last,
	_OpTypeLowerName[727:731]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:51],
	_OpTypeName[51:56],
	_OpTypeName[56:77],
	_OpTypeName[77:97],
	_OpTypeName[97:114],
	_OpTypeName[114:121],
	_OpTypeName[121:130],
	_OpTypeName[130:144],
	_OpTypeName[144:148],
	_OpTypeName[148:152],
	_OpTypeName[152:159],
	_OpTypeName[159:166],
	_OpTypeName[166:170],
	_OpTypeName[170:176],
	_OpTypeName[176:193],
	_OpTypeName[193:199],
	_OpTypeName[199:202],
	_OpTypeName[202:213],
	_OpTypeName[213:232],
	_OpTypeName[232:237],
	_OpTypeName[237:241],
	_OpTypeName[241:245],
	_OpTypeName[245:253],
	_OpTypeName[253:256],
	_OpTypeName[256:266],
	_OpTypeName[266:274],
	_OpTypeName[274:281],
	_OpTypeName[281:288],
	_OpTypeName[288:296],
	_OpTypeName[296:302],
	_OpTypeName[302:305],
	_OpTypeName[305:307],
	_OpTypeName[307:310],
	_OpTypeName[310:316],
	_OpTypeName[316:321],
	_OpTypeName[321:325],
	_OpTypeName[325:341],
	_OpTypeName[341:356],
	_OpTypeName[356:372],
	_OpTypeName[372:388],
	_OpTypeName[388:403],
	_OpTypeName[403:419],
	_OpTypeName[419:428],
	_OpTypeName[428:437],
	_OpTypeName[437:450],
	_OpTypeName[450:459],
	_OpTypeName[459:471],
	_OpTypeName[471:480],
	_OpTypeName[480:487],
	_OpTypeName[487:494],
	_OpTypeName[494:509],
	_OpTypeName[509:524],
	_OpTypeName[524:540],
	_OpTypeName[540:545],
	_OpTypeName[545:555],
	_OpTypeName[555:565],
	_OpTypeName[565:575],
	_OpTypeName[575:594],
	_OpTypeName[594:613],
	_OpTypeName[613:632],
	_OpTypeName[632:641],
	_OpTypeName[641:661],
	_OpTypeName[661:678],
	_OpTypeName[678:682],
	_OpTypeName[682:686],
	_OpTypeName[686:691],
	_OpTypeName[691:695],
	_OpTypeName[695:703],
	_OpTypeName[703:706],
	_OpTypeName[706:710],
	_OpTypeName[710:719],
	_OpTypeName[719:724],
	_OpTypeName[724:727],
	_OpTypeName[727:731],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
