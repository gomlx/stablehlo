// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorImagIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGatherGetDimensionSizeGetTupleElementIfInfeedIsFiniteOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 94, 111, 117, 127, 130, 141, 160, 165, 169, 173, 176, 186, 194, 201, 208, 216, 222, 225, 227, 233, 238, 242, 251, 258, 273, 289, 294, 303, 323, 340, 344, 348, 352, 360, 363, 367, 370, 379, 400, 420, 437, 451, 455, 463, 482, 499, 508, 519, 526, 537, 547, 568, 579, 592, 603, 613, 627, 645, 648, 654, 670, 685, 687, 693, 701, 720, 727, 730, 741, 745, 751, 766, 779, 791, 798, 813, 820, 826, 842, 846, 851, 860, 875, 880, 897, 912, 917, 921}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorimagiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgathergetdimensionsizegettupleelementifinfeedisfiniteoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Cosine-(14)]
	_ = x[CountLeadingZeros-(15)]
	_ = x[Divide-(16)]
	_ = x[DotGeneral-(17)]
	_ = x[Erf-(18)]
	_ = x[Exponential-(19)]
	_ = x[ExponentialMinusOne-(20)]
	_ = x[Floor-(21)]
	_ = x[Imag-(22)]
	_ = x[Iota-(23)]
	_ = x[Log-(24)]
	_ = x[LogPlusOne-(25)]
	_ = x[Logistic-(26)]
	_ = x[Maximum-(27)]
	_ = x[Minimum-(28)]
	_ = x[Multiply-(29)]
	_ = x[Negate-(30)]
	_ = x[Not-(31)]
	_ = x[Or-(32)]
	_ = x[Popcnt-(33)]
	_ = x[Power-(34)]
	_ = x[Real-(35)]
	_ = x[Remainder-(36)]
	_ = x[Reshape-(37)]
	_ = x[RoundNearestAfz-(38)]
	_ = x[RoundNearestEven-(39)]
	_ = x[Rsqrt-(40)]
	_ = x[ShiftLeft-(41)]
	_ = x[ShiftRightArithmetic-(42)]
	_ = x[ShiftRightLogical-(43)]
	_ = x[Sign-(44)]
	_ = x[Sine-(45)]
	_ = x[Sqrt-(46)]
	_ = x[Subtract-(47)]
	_ = x[Tan-(48)]
	_ = x[Tanh-(49)]
	_ = x[Xor-(50)]
	_ = x[ArgMinMax-(51)]
	_ = x[BatchNormForInference-(52)]
	_ = x[BatchNormForTraining-(53)]
	_ = x[BatchNormGradient-(54)]
	_ = x[BitcastConvert-(55)]
	_ = x[Case-(56)]
	_ = x[Cholesky-(57)]
	_ = x[CollectiveBroadcast-(58)]
	_ = x[CollectivePermute-(59)]
	_ = x[Composite-(60)]
	_ = x[Concatenate-(61)]
	_ = x[Convert-(62)]
	_ = x[Convolution-(63)]
	_ = x[CustomCall-(64)]
	_ = x[DynamicBroadcastInDim-(65)]
	_ = x[DynamicConv-(66)]
	_ = x[DynamicGather-(67)]
	_ = x[DynamicIota-(68)]
	_ = x[DynamicPad-(69)]
	_ = x[DynamicReshape-(70)]
	_ = x[DynamicUpdateSlice-(71)]
	_ = x[Fft-(72)]
	_ = x[Gather-(73)]
	_ = x[GetDimensionSize-(74)]
	_ = x[GetTupleElement-(75)]
	_ = x[If-(76)]
	_ = x[Infeed-(77)]
	_ = x[IsFinite-(78)]
	_ = x[OptimizationBarrier-(79)]
	_ = x[Outfeed-(80)]
	_ = x[Pad-(81)]
	_ = x[PartitionId-(82)]
	_ = x[Recv-(83)]
	_ = x[Reduce-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Slice-(94)]
	_ = x[Transpose-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, ArgMinMax, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, Gather, GetDimensionSize, GetTupleElement, If, Infeed, IsFinite, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:94]:        Cosine,
	_OpTypeLowerName[88:94]:   Cosine,
	_OpTypeName[94:111]:       CountLeadingZeros,
	_OpTypeLowerName[94:111]:  CountLeadingZeros,
	_OpTypeName[111:117]:      Divide,
	_OpTypeLowerName[111:117]: Divide,
	_OpTypeName[117:127]:      DotGeneral,
	_OpTypeLowerName[117:127]: DotGeneral,
	_OpTypeName[127:130]:      Erf,
	_OpTypeLowerName[127:130]: Erf,
	_OpTypeName[130:141]:      Exponential,
	_OpTypeLowerName[130:141]: Exponential,
	_OpTypeName[141:160]:      ExponentialMinusOne,
	_OpTypeLowerName[141:160]: ExponentialMinusOne,
	_OpTypeName[160:165]:      Floor,
	_OpTypeLowerName[160:165]: Floor,
	_OpTypeName[165:169]:      Imag,
	_OpTypeLowerName[165:169]: Imag,
	_OpTypeName[169:173]:      Iota,
	_OpTypeLowerName[169:173]: Iota,
	_OpTypeName[173:176]:      Log,
	_OpTypeLowerName[173:176]: Log,
	_OpTypeName[176:186]:      LogPlusOne,
	_OpTypeLowerName[176:186]: LogPlusOne,
	_OpTypeName[186:194]:      Logistic,
	_OpTypeLowerName[186:194]: Logistic,
	_OpTypeName[194:201]:      Maximum,
	_OpTypeLowerName[194:201]: Maximum,
	_OpTypeName[201:208]:      Minimum,
	_OpTypeLowerName[201:208]: Minimum,
	_OpTypeName[208:216]:      Multiply,
	_OpTypeLowerName[208:216]: Multiply,
	_OpTypeName[216:222]:      Negate,
	_OpTypeLowerName[216:222]: Negate,
	_OpTypeName[222:225]:      Not,
	_OpTypeLowerName[222:225]: Not,
	_OpTypeName[225:227]:      Or,
	_OpTypeLowerName[225:227]: Or,
	_OpTypeName[227:233]:      Popcnt,
	_OpTypeLowerName[227:233]: Popcnt,
	_OpTypeName[233:238]:      Power,
	_OpTypeLowerName[233:238]: Power,
	_OpTypeName[238:242]:      Real,
	_OpTypeLowerName[238:242]: Real,
	_OpTypeName[242:251]:      Remainder,
	_OpTypeLowerName[242:251]: Remainder,
	_OpTypeName[251:258]:      Reshape,
	_OpTypeLowerName[251:258]: Reshape,
	_OpTypeName[258:273]:      RoundNearestAfz,
	_OpTypeLowerName[258:273]: RoundNearestAfz,
	_OpTypeName[273:289]:      RoundNearestEven,
	_OpTypeLowerName[273:289]: RoundNearestEven,
	_OpTypeName[289:294]:      Rsqrt,
	_OpTypeLowerName[289:294]: Rsqrt,
	_OpTypeName[294:303]:      ShiftLeft,
	_OpTypeLowerName[294:303]: ShiftLeft,
	_OpTypeName[303:323]:      ShiftRightArithmetic,
	_OpTypeLowerName[303:323]: ShiftRightArithmetic,
	_OpTypeName[323:340]:      ShiftRightLogical,
	_OpTypeLowerName[323:340]: ShiftRightLogical,
	_OpTypeName[340:344]:      Sign,
	_OpTypeLowerName[340:344]: Sign,
	_OpTypeName[344:348]:      Sine,
	_OpTypeLowerName[344:348]: Sine,
	_OpTypeName[348:352]:      Sqrt,
	_OpTypeLowerName[348:352]: Sqrt,
	_OpTypeName[352:360]:      Subtract,
	_OpTypeLowerName[352:360]: Subtract,
	_OpTypeName[360:363]:      Tan,
	_OpTypeLowerName[360:363]: Tan,
	_OpTypeName[363:367]:      Tanh,
	_OpTypeLowerName[363:367]: Tanh,
	_OpTypeName[367:370]:      Xor,
	_OpTypeLowerName[367:370]: Xor,
	_OpTypeName[370:379]:      ArgMinMax,
	_OpTypeLowerName[370:379]: ArgMinMax,
	_OpTypeName[379:400]:      BatchNormForInference,
	_OpTypeLowerName[379:400]: BatchNormForInference,
	_OpTypeName[400:420]:      BatchNormForTraining,
	_OpTypeLowerName[400:420]: BatchNormForTraining,
	_OpTypeName[420:437]:      BatchNormGradient,
	_OpTypeLowerName[420:437]: BatchNormGradient,
	_OpTypeName[437:451]:      BitcastConvert,
	_OpTypeLowerName[437:451]: BitcastConvert,
	_OpTypeName[451:455]:      Case,
	_OpTypeLowerName[451:455]: Case,
	_OpTypeName[455:463]:      Cholesky,
	_OpTypeLowerName[455:463]: Cholesky,
	_OpTypeName[463:482]:      CollectiveBroadcast,
	_OpTypeLowerName[463:482]: CollectiveBroadcast,
	_OpTypeName[482:499]:      CollectivePermute,
	_OpTypeLowerName[482:499]: CollectivePermute,
	_OpTypeName[499:508]:      Composite,
	_OpTypeLowerName[499:508]: Composite,
	_OpTypeName[508:519]:      Concatenate,
	_OpTypeLowerName[508:519]: Concatenate,
	_OpTypeName[519:526]:      Convert,
	_OpTypeLowerName[519:526]: Convert,
	_OpTypeName[526:537]:      Convolution,
	_OpTypeLowerName[526:537]: Convolution,
	_OpTypeName[537:547]:      CustomCall,
	_OpTypeLowerName[537:547]: CustomCall,
	_OpTypeName[547:568]:      DynamicBroadcastInDim,
	_OpTypeLowerName[547:568]: DynamicBroadcastInDim,
	_OpTypeName[568:579]:      DynamicConv,
	_OpTypeLowerName[568:579]: DynamicConv,
	_OpTypeName[579:592]:      DynamicGather,
	_OpTypeLowerName[579:592]: DynamicGather,
	_OpTypeName[592:603]:      DynamicIota,
	_OpTypeLowerName[592:603]: DynamicIota,
	_OpTypeName[603:613]:      DynamicPad,
	_OpTypeLowerName[603:613]: DynamicPad,
	_OpTypeName[613:627]:      DynamicReshape,
	_OpTypeLowerName[613:627]: DynamicReshape,
	_OpTypeName[627:645]:      DynamicUpdateSlice,
	_OpTypeLowerName[627:645]: DynamicUpdateSlice,
	_OpTypeName[645:648]:      Fft,
	_OpTypeLowerName[645:648]: Fft,
	_OpTypeName[648:654]:      Gather,
	_OpTypeLowerName[648:654]: Gather,
	_OpTypeName[654:670]:      GetDimensionSize,
	_OpTypeLowerName[654:670]: GetDimensionSize,
	_OpTypeName[670:685]:      GetTupleElement,
	_OpTypeLowerName[670:685]: GetTupleElement,
	_OpTypeName[685:687]:      If,
	_OpTypeLowerName[685:687]: If,
	_OpTypeName[687:693]:      Infeed,
	_OpTypeLowerName[687:693]: Infeed,
	_OpTypeName[693:701]:      IsFinite,
	_OpTypeLowerName[693:701]: IsFinite,
	_OpTypeName[701:720]:      OptimizationBarrier,
	_OpTypeLowerName[701:720]: OptimizationBarrier,
	_OpTypeName[720:727]:      Outfeed,
	_OpTypeLowerName[720:727]: Outfeed,
	_OpTypeName[727:730]:      Pad,
	_OpTypeLowerName[727:730]: Pad,
	_OpTypeName[730:741]:      PartitionId,
	_OpTypeLowerName[730:741]: PartitionId,
	_OpTypeName[741:745]:      Recv,
	_OpTypeLowerName[741:745]: Recv,
	_OpTypeName[745:751]:      Reduce,
	_OpTypeLowerName[745:751]: Reduce,
	_OpTypeName[751:766]:      ReducePrecision,
	_OpTypeLowerName[751:766]: ReducePrecision,
	_OpTypeName[766:779]:      ReduceScatter,
	_OpTypeLowerName[766:779]: ReduceScatter,
	_OpTypeName[779:791]:      ReduceWindow,
	_OpTypeLowerName[779:791]: ReduceWindow,
	_OpTypeName[791:798]:      Reverse,
	_OpTypeLowerName[791:798]: Reverse,
	_OpTypeName[798:813]:      RngBitGenerator,
	_OpTypeLowerName[798:813]: RngBitGenerator,
	_OpTypeName[813:820]:      Scatter,
	_OpTypeLowerName[813:820]: Scatter,
	_OpTypeName[820:826]:      Select,
	_OpTypeLowerName[820:826]: Select,
	_OpTypeName[826:842]:      SelectAndScatter,
	_OpTypeLowerName[826:842]: SelectAndScatter,
	_OpTypeName[842:846]:      Send,
	_OpTypeLowerName[842:846]: Send,
	_OpTypeName[846:851]:      Slice,
	_OpTypeLowerName[846:851]: Slice,
	_OpTypeName[851:860]:      Transpose,
	_OpTypeLowerName[851:860]: Transpose,
	_OpTypeName[860:875]:      TriangularSolve,
	_OpTypeLowerName[860:875]: TriangularSolve,
	_OpTypeName[875:880]:      Tuple,
	_OpTypeLowerName[875:880]: Tuple,
	_OpTypeName[880:897]:      UniformDequantize,
	_OpTypeLowerName[880:897]: UniformDequantize,
	_OpTypeName[897:912]:      UniformQuantize,
	_OpTypeLowerName[897:912]: UniformQuantize,
	_OpTypeName[912:917]:      While,
	_OpTypeLowerName[912:917]: While,
	_OpTypeName[917:921]:      Last,
	_OpTypeLowerName[917:921]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:94],
	_OpTypeName[94:111],
	_OpTypeName[111:117],
	_OpTypeName[117:127],
	_OpTypeName[127:130],
	_OpTypeName[130:141],
	_OpTypeName[141:160],
	_OpTypeName[160:165],
	_OpTypeName[165:169],
	_OpTypeName[169:173],
	_OpTypeName[173:176],
	_OpTypeName[176:186],
	_OpTypeName[186:194],
	_OpTypeName[194:201],
	_OpTypeName[201:208],
	_OpTypeName[208:216],
	_OpTypeName[216:222],
	_OpTypeName[222:225],
	_OpTypeName[225:227],
	_OpTypeName[227:233],
	_OpTypeName[233:238],
	_OpTypeName[238:242],
	_OpTypeName[242:251],
	_OpTypeName[251:258],
	_OpTypeName[258:273],
	_OpTypeName[273:289],
	_OpTypeName[289:294],
	_OpTypeName[294:303],
	_OpTypeName[303:323],
	_OpTypeName[323:340],
	_OpTypeName[340:344],
	_OpTypeName[344:348],
	_OpTypeName[348:352],
	_OpTypeName[352:360],
	_OpTypeName[360:363],
	_OpTypeName[363:367],
	_OpTypeName[367:370],
	_OpTypeName[370:379],
	_OpTypeName[379:400],
	_OpTypeName[400:420],
	_OpTypeName[420:437],
	_OpTypeName[437:451],
	_OpTypeName[451:455],
	_OpTypeName[455:463],
	_OpTypeName[463:482],
	_OpTypeName[482:499],
	_OpTypeName[499:508],
	_OpTypeName[508:519],
	_OpTypeName[519:526],
	_OpTypeName[526:537],
	_OpTypeName[537:547],
	_OpTypeName[547:568],
	_OpTypeName[568:579],
	_OpTypeName[579:592],
	_OpTypeName[592:603],
	_OpTypeName[603:613],
	_OpTypeName[613:627],
	_OpTypeName[627:645],
	_OpTypeName[645:648],
	_OpTypeName[648:654],
	_OpTypeName[654:670],
	_OpTypeName[670:685],
	_OpTypeName[685:687],
	_OpTypeName[687:693],
	_OpTypeName[693:701],
	_OpTypeName[701:720],
	_OpTypeName[720:727],
	_OpTypeName[727:730],
	_OpTypeName[730:741],
	_OpTypeName[741:745],
	_OpTypeName[745:751],
	_OpTypeName[751:766],
	_OpTypeName[766:779],
	_OpTypeName[779:791],
	_OpTypeName[791:798],
	_OpTypeName[798:813],
	_OpTypeName[813:820],
	_OpTypeName[820:826],
	_OpTypeName[826:842],
	_OpTypeName[842:846],
	_OpTypeName[846:851],
	_OpTypeName[851:860],
	_OpTypeName[860:875],
	_OpTypeName[875:880],
	_OpTypeName[880:897],
	_OpTypeName[897:912],
	_OpTypeName[912:917],
	_OpTypeName[917:921],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
