// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndArgMinMaxAtan2BatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastBroadcastBroadcastInDimCeilCompareConjCosineCountLeadingZerosDivideErfExponentialExponentialMinusOneFloorImagIotaIsFiniteLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemainderReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanhTransposeWhereXorLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 51, 56, 77, 97, 114, 121, 130, 144, 148, 155, 159, 165, 182, 188, 191, 202, 221, 226, 230, 234, 242, 245, 255, 263, 270, 277, 285, 291, 294, 296, 299, 305, 310, 314, 330, 345, 361, 377, 392, 408, 417, 426, 439, 448, 460, 469, 476, 483, 498, 513, 529, 534, 544, 554, 564, 583, 602, 621, 630, 650, 667, 671, 675, 680, 684, 692, 696, 705, 710, 713, 717}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandargminmaxatan2batchnormforinferencebatchnormfortrainingbatchnormgradientbitcastbroadcastbroadcastindimceilcompareconjcosinecountleadingzerosdivideerfexponentialexponentialminusonefloorimagiotaisfiniteloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremainderreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttanhtransposewherexorlast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[ArgMinMax-(7)]
	_ = x[Atan2-(8)]
	_ = x[BatchNormForInference-(9)]
	_ = x[BatchNormForTraining-(10)]
	_ = x[BatchNormGradient-(11)]
	_ = x[Bitcast-(12)]
	_ = x[Broadcast-(13)]
	_ = x[BroadcastInDim-(14)]
	_ = x[Ceil-(15)]
	_ = x[Compare-(16)]
	_ = x[Conj-(17)]
	_ = x[Cosine-(18)]
	_ = x[CountLeadingZeros-(19)]
	_ = x[Divide-(20)]
	_ = x[Erf-(21)]
	_ = x[Exponential-(22)]
	_ = x[ExponentialMinusOne-(23)]
	_ = x[Floor-(24)]
	_ = x[Imag-(25)]
	_ = x[Iota-(26)]
	_ = x[IsFinite-(27)]
	_ = x[Log-(28)]
	_ = x[LogPlusOne-(29)]
	_ = x[Logistic-(30)]
	_ = x[Maximum-(31)]
	_ = x[Minimum-(32)]
	_ = x[Multiply-(33)]
	_ = x[Negate-(34)]
	_ = x[Not-(35)]
	_ = x[Or-(36)]
	_ = x[Pad-(37)]
	_ = x[Popcnt-(38)]
	_ = x[Power-(39)]
	_ = x[Real-(40)]
	_ = x[ReduceBitwiseAnd-(41)]
	_ = x[ReduceBitwiseOr-(42)]
	_ = x[ReduceBitwiseXor-(43)]
	_ = x[ReduceLogicalAnd-(44)]
	_ = x[ReduceLogicalOr-(45)]
	_ = x[ReduceLogicalXor-(46)]
	_ = x[ReduceMax-(47)]
	_ = x[ReduceMin-(48)]
	_ = x[ReduceProduct-(49)]
	_ = x[ReduceSum-(50)]
	_ = x[ReduceWindow-(51)]
	_ = x[Remainder-(52)]
	_ = x[Reshape-(53)]
	_ = x[Reverse-(54)]
	_ = x[RngBitGenerator-(55)]
	_ = x[RoundNearestAfz-(56)]
	_ = x[RoundNearestEven-(57)]
	_ = x[Rsqrt-(58)]
	_ = x[ScatterMax-(59)]
	_ = x[ScatterMin-(60)]
	_ = x[ScatterSum-(61)]
	_ = x[SelectAndScatterMax-(62)]
	_ = x[SelectAndScatterMin-(63)]
	_ = x[SelectAndScatterSum-(64)]
	_ = x[ShiftLeft-(65)]
	_ = x[ShiftRightArithmetic-(66)]
	_ = x[ShiftRightLogical-(67)]
	_ = x[Sign-(68)]
	_ = x[Sine-(69)]
	_ = x[Slice-(70)]
	_ = x[Sqrt-(71)]
	_ = x[Subtract-(72)]
	_ = x[Tanh-(73)]
	_ = x[Transpose-(74)]
	_ = x[Where-(75)]
	_ = x[Xor-(76)]
	_ = x[Last-(77)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, ArgMinMax, Atan2, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Bitcast, Broadcast, BroadcastInDim, Ceil, Compare, Conj, Cosine, CountLeadingZeros, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, IsFinite, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, ReduceWindow, Remainder, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tanh, Transpose, Where, Xor, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:51]:        ArgMinMax,
	_OpTypeLowerName[42:51]:   ArgMinMax,
	_OpTypeName[51:56]:        Atan2,
	_OpTypeLowerName[51:56]:   Atan2,
	_OpTypeName[56:77]:        BatchNormForInference,
	_OpTypeLowerName[56:77]:   BatchNormForInference,
	_OpTypeName[77:97]:        BatchNormForTraining,
	_OpTypeLowerName[77:97]:   BatchNormForTraining,
	_OpTypeName[97:114]:       BatchNormGradient,
	_OpTypeLowerName[97:114]:  BatchNormGradient,
	_OpTypeName[114:121]:      Bitcast,
	_OpTypeLowerName[114:121]: Bitcast,
	_OpTypeName[121:130]:      Broadcast,
	_OpTypeLowerName[121:130]: Broadcast,
	_OpTypeName[130:144]:      BroadcastInDim,
	_OpTypeLowerName[130:144]: BroadcastInDim,
	_OpTypeName[144:148]:      Ceil,
	_OpTypeLowerName[144:148]: Ceil,
	_OpTypeName[148:155]:      Compare,
	_OpTypeLowerName[148:155]: Compare,
	_OpTypeName[155:159]:      Conj,
	_OpTypeLowerName[155:159]: Conj,
	_OpTypeName[159:165]:      Cosine,
	_OpTypeLowerName[159:165]: Cosine,
	_OpTypeName[165:182]:      CountLeadingZeros,
	_OpTypeLowerName[165:182]: CountLeadingZeros,
	_OpTypeName[182:188]:      Divide,
	_OpTypeLowerName[182:188]: Divide,
	_OpTypeName[188:191]:      Erf,
	_OpTypeLowerName[188:191]: Erf,
	_OpTypeName[191:202]:      Exponential,
	_OpTypeLowerName[191:202]: Exponential,
	_OpTypeName[202:221]:      ExponentialMinusOne,
	_OpTypeLowerName[202:221]: ExponentialMinusOne,
	_OpTypeName[221:226]:      Floor,
	_OpTypeLowerName[221:226]: Floor,
	_OpTypeName[226:230]:      Imag,
	_OpTypeLowerName[226:230]: Imag,
	_OpTypeName[230:234]:      Iota,
	_OpTypeLowerName[230:234]: Iota,
	_OpTypeName[234:242]:      IsFinite,
	_OpTypeLowerName[234:242]: IsFinite,
	_OpTypeName[242:245]:      Log,
	_OpTypeLowerName[242:245]: Log,
	_OpTypeName[245:255]:      LogPlusOne,
	_OpTypeLowerName[245:255]: LogPlusOne,
	_OpTypeName[255:263]:      Logistic,
	_OpTypeLowerName[255:263]: Logistic,
	_OpTypeName[263:270]:      Maximum,
	_OpTypeLowerName[263:270]: Maximum,
	_OpTypeName[270:277]:      Minimum,
	_OpTypeLowerName[270:277]: Minimum,
	_OpTypeName[277:285]:      Multiply,
	_OpTypeLowerName[277:285]: Multiply,
	_OpTypeName[285:291]:      Negate,
	_OpTypeLowerName[285:291]: Negate,
	_OpTypeName[291:294]:      Not,
	_OpTypeLowerName[291:294]: Not,
	_OpTypeName[294:296]:      Or,
	_OpTypeLowerName[294:296]: Or,
	_OpTypeName[296:299]:      Pad,
	_OpTypeLowerName[296:299]: Pad,
	_OpTypeName[299:305]:      Popcnt,
	_OpTypeLowerName[299:305]: Popcnt,
	_OpTypeName[305:310]:      Power,
	_OpTypeLowerName[305:310]: Power,
	_OpTypeName[310:314]:      Real,
	_OpTypeLowerName[310:314]: Real,
	_OpTypeName[314:330]:      ReduceBitwiseAnd,
	_OpTypeLowerName[314:330]: ReduceBitwiseAnd,
	_OpTypeName[330:345]:      ReduceBitwiseOr,
	_OpTypeLowerName[330:345]: ReduceBitwiseOr,
	_OpTypeName[345:361]:      ReduceBitwiseXor,
	_OpTypeLowerName[345:361]: ReduceBitwiseXor,
	_OpTypeName[361:377]:      ReduceLogicalAnd,
	_OpTypeLowerName[361:377]: ReduceLogicalAnd,
	_OpTypeName[377:392]:      ReduceLogicalOr,
	_OpTypeLowerName[377:392]: ReduceLogicalOr,
	_OpTypeName[392:408]:      ReduceLogicalXor,
	_OpTypeLowerName[392:408]: ReduceLogicalXor,
	_OpTypeName[408:417]:      ReduceMax,
	_OpTypeLowerName[408:417]: ReduceMax,
	_OpTypeName[417:426]:      ReduceMin,
	_OpTypeLowerName[417:426]: ReduceMin,
	_OpTypeName[426:439]:      ReduceProduct,
	_OpTypeLowerName[426:439]: ReduceProduct,
	_OpTypeName[439:448]:      ReduceSum,
	_OpTypeLowerName[439:448]: ReduceSum,
	_OpTypeName[448:460]:      ReduceWindow,
	_OpTypeLowerName[448:460]: ReduceWindow,
	_OpTypeName[460:469]:      Remainder,
	_OpTypeLowerName[460:469]: Remainder,
	_OpTypeName[469:476]:      Reshape,
	_OpTypeLowerName[469:476]: Reshape,
	_OpTypeName[476:483]:      Reverse,
	_OpTypeLowerName[476:483]: Reverse,
	_OpTypeName[483:498]:      RngBitGenerator,
	_OpTypeLowerName[483:498]: RngBitGenerator,
	_OpTypeName[498:513]:      RoundNearestAfz,
	_OpTypeLowerName[498:513]: RoundNearestAfz,
	_OpTypeName[513:529]:      RoundNearestEven,
	_OpTypeLowerName[513:529]: RoundNearestEven,
	_OpTypeName[529:534]:      Rsqrt,
	_OpTypeLowerName[529:534]: Rsqrt,
	_OpTypeName[534:544]:      ScatterMax,
	_OpTypeLowerName[534:544]: ScatterMax,
	_OpTypeName[544:554]:      ScatterMin,
	_OpTypeLowerName[544:554]: ScatterMin,
	_OpTypeName[554:564]:      ScatterSum,
	_OpTypeLowerName[554:564]: ScatterSum,
	_OpTypeName[564:583]:      SelectAndScatterMax,
	_OpTypeLowerName[564:583]: SelectAndScatterMax,
	_OpTypeName[583:602]:      SelectAndScatterMin,
	_OpTypeLowerName[583:602]: SelectAndScatterMin,
	_OpTypeName[602:621]:      SelectAndScatterSum,
	_OpTypeLowerName[602:621]: SelectAndScatterSum,
	_OpTypeName[621:630]:      ShiftLeft,
	_OpTypeLowerName[621:630]: ShiftLeft,
	_OpTypeName[630:650]:      ShiftRightArithmetic,
	_OpTypeLowerName[630:650]: ShiftRightArithmetic,
	_OpTypeName[650:667]:      ShiftRightLogical,
	_OpTypeLowerName[650:667]: ShiftRightLogical,
	_OpTypeName[667:671]:      Sign,
	_OpTypeLowerName[667:671]: Sign,
	_OpTypeName[671:675]:      Sine,
	_OpTypeLowerName[671:675]: Sine,
	_OpTypeName[675:680]:      Slice,
	_OpTypeLowerName[675:680]: Slice,
	_OpTypeName[680:684]:      Sqrt,
	_OpTypeLowerName[680:684]: Sqrt,
	_OpTypeName[684:692]:      Subtract,
	_OpTypeLowerName[684:692]: Subtract,
	_OpTypeName[692:696]:      Tanh,
	_OpTypeLowerName[692:696]: Tanh,
	_OpTypeName[696:705]:      Transpose,
	_OpTypeLowerName[696:705]: Transpose,
	_OpTypeName[705:710]:      Where,
	_OpTypeLowerName[705:710]: Where,
	_OpTypeName[710:713]:      Xor,
	_OpTypeLowerName[710:713]: Xor,
	_OpTypeName[713:717]:      Last,
	_OpTypeLowerName[713:717]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:51],
	_OpTypeName[51:56],
	_OpTypeName[56:77],
	_OpTypeName[77:97],
	_OpTypeName[97:114],
	_OpTypeName[114:121],
	_OpTypeName[121:130],
	_OpTypeName[130:144],
	_OpTypeName[144:148],
	_OpTypeName[148:155],
	_OpTypeName[155:159],
	_OpTypeName[159:165],
	_OpTypeName[165:182],
	_OpTypeName[182:188],
	_OpTypeName[188:191],
	_OpTypeName[191:202],
	_OpTypeName[202:221],
	_OpTypeName[221:226],
	_OpTypeName[226:230],
	_OpTypeName[230:234],
	_OpTypeName[234:242],
	_OpTypeName[242:245],
	_OpTypeName[245:255],
	_OpTypeName[255:263],
	_OpTypeName[263:270],
	_OpTypeName[270:277],
	_OpTypeName[277:285],
	_OpTypeName[285:291],
	_OpTypeName[291:294],
	_OpTypeName[294:296],
	_OpTypeName[296:299],
	_OpTypeName[299:305],
	_OpTypeName[305:310],
	_OpTypeName[310:314],
	_OpTypeName[314:330],
	_OpTypeName[330:345],
	_OpTypeName[345:361],
	_OpTypeName[361:377],
	_OpTypeName[377:392],
	_OpTypeName[392:408],
	_OpTypeName[408:417],
	_OpTypeName[417:426],
	_OpTypeName[426:439],
	_OpTypeName[439:448],
	_OpTypeName[448:460],
	_OpTypeName[460:469],
	_OpTypeName[469:476],
	_OpTypeName[476:483],
	_OpTypeName[483:498],
	_OpTypeName[498:513],
	_OpTypeName[513:529],
	_OpTypeName[529:534],
	_OpTypeName[534:544],
	_OpTypeName[544:554],
	_OpTypeName[554:564],
	_OpTypeName[564:583],
	_OpTypeName[583:602],
	_OpTypeName[602:621],
	_OpTypeName[621:630],
	_OpTypeName[630:650],
	_OpTypeName[650:667],
	_OpTypeName[667:671],
	_OpTypeName[671:675],
	_OpTypeName[675:680],
	_OpTypeName[680:684],
	_OpTypeName[684:692],
	_OpTypeName[692:696],
	_OpTypeName[696:705],
	_OpTypeName[705:710],
	_OpTypeName[710:713],
	_OpTypeName[713:717],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
