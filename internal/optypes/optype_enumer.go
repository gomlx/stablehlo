// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReduceReshapeRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReducePrecisionReduceScatterReduceWindowReverseSelectSelectAndScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 119, 136, 142, 152, 155, 166, 185, 190, 196, 200, 208, 212, 215, 225, 233, 240, 247, 255, 261, 264, 266, 272, 277, 281, 290, 296, 303, 318, 333, 349, 354, 361, 370, 390, 407, 411, 415, 420, 424, 432, 435, 439, 448, 451, 472, 492, 509, 513, 521, 540, 557, 566, 573, 584, 594, 615, 626, 639, 650, 660, 674, 692, 695, 711, 726, 728, 734, 753, 760, 763, 774, 778, 793, 806, 818, 825, 831, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenatecosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreducereshaperngbitgeneratorroundnearestafzroundnearestevenrsqrtscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositeconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreduceprecisionreducescatterreducewindowreverseselectselectandscattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Cosine-(16)]
	_ = x[CountLeadingZeros-(17)]
	_ = x[Divide-(18)]
	_ = x[DotGeneral-(19)]
	_ = x[Erf-(20)]
	_ = x[Exponential-(21)]
	_ = x[ExponentialMinusOne-(22)]
	_ = x[Floor-(23)]
	_ = x[Gather-(24)]
	_ = x[Imag-(25)]
	_ = x[IsFinite-(26)]
	_ = x[Iota-(27)]
	_ = x[Log-(28)]
	_ = x[LogPlusOne-(29)]
	_ = x[Logistic-(30)]
	_ = x[Maximum-(31)]
	_ = x[Minimum-(32)]
	_ = x[Multiply-(33)]
	_ = x[Negate-(34)]
	_ = x[Not-(35)]
	_ = x[Or-(36)]
	_ = x[Popcnt-(37)]
	_ = x[Power-(38)]
	_ = x[Real-(39)]
	_ = x[Remainder-(40)]
	_ = x[Reduce-(41)]
	_ = x[Reshape-(42)]
	_ = x[RngBitGenerator-(43)]
	_ = x[RoundNearestAfz-(44)]
	_ = x[RoundNearestEven-(45)]
	_ = x[Rsqrt-(46)]
	_ = x[Scatter-(47)]
	_ = x[ShiftLeft-(48)]
	_ = x[ShiftRightArithmetic-(49)]
	_ = x[ShiftRightLogical-(50)]
	_ = x[Sign-(51)]
	_ = x[Sine-(52)]
	_ = x[Slice-(53)]
	_ = x[Sqrt-(54)]
	_ = x[Subtract-(55)]
	_ = x[Tan-(56)]
	_ = x[Tanh-(57)]
	_ = x[Transpose-(58)]
	_ = x[Xor-(59)]
	_ = x[BatchNormForInference-(60)]
	_ = x[BatchNormForTraining-(61)]
	_ = x[BatchNormGradient-(62)]
	_ = x[Case-(63)]
	_ = x[Cholesky-(64)]
	_ = x[CollectiveBroadcast-(65)]
	_ = x[CollectivePermute-(66)]
	_ = x[Composite-(67)]
	_ = x[Convert-(68)]
	_ = x[Convolution-(69)]
	_ = x[CustomCall-(70)]
	_ = x[DynamicBroadcastInDim-(71)]
	_ = x[DynamicConv-(72)]
	_ = x[DynamicGather-(73)]
	_ = x[DynamicIota-(74)]
	_ = x[DynamicPad-(75)]
	_ = x[DynamicReshape-(76)]
	_ = x[DynamicUpdateSlice-(77)]
	_ = x[Fft-(78)]
	_ = x[GetDimensionSize-(79)]
	_ = x[GetTupleElement-(80)]
	_ = x[If-(81)]
	_ = x[Infeed-(82)]
	_ = x[OptimizationBarrier-(83)]
	_ = x[Outfeed-(84)]
	_ = x[Pad-(85)]
	_ = x[PartitionId-(86)]
	_ = x[Recv-(87)]
	_ = x[ReducePrecision-(88)]
	_ = x[ReduceScatter-(89)]
	_ = x[ReduceWindow-(90)]
	_ = x[Reverse-(91)]
	_ = x[Select-(92)]
	_ = x[SelectAndScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reduce, Reshape, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, Select, SelectAndScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:119]:      Cosine,
	_OpTypeLowerName[113:119]: Cosine,
	_OpTypeName[119:136]:      CountLeadingZeros,
	_OpTypeLowerName[119:136]: CountLeadingZeros,
	_OpTypeName[136:142]:      Divide,
	_OpTypeLowerName[136:142]: Divide,
	_OpTypeName[142:152]:      DotGeneral,
	_OpTypeLowerName[142:152]: DotGeneral,
	_OpTypeName[152:155]:      Erf,
	_OpTypeLowerName[152:155]: Erf,
	_OpTypeName[155:166]:      Exponential,
	_OpTypeLowerName[155:166]: Exponential,
	_OpTypeName[166:185]:      ExponentialMinusOne,
	_OpTypeLowerName[166:185]: ExponentialMinusOne,
	_OpTypeName[185:190]:      Floor,
	_OpTypeLowerName[185:190]: Floor,
	_OpTypeName[190:196]:      Gather,
	_OpTypeLowerName[190:196]: Gather,
	_OpTypeName[196:200]:      Imag,
	_OpTypeLowerName[196:200]: Imag,
	_OpTypeName[200:208]:      IsFinite,
	_OpTypeLowerName[200:208]: IsFinite,
	_OpTypeName[208:212]:      Iota,
	_OpTypeLowerName[208:212]: Iota,
	_OpTypeName[212:215]:      Log,
	_OpTypeLowerName[212:215]: Log,
	_OpTypeName[215:225]:      LogPlusOne,
	_OpTypeLowerName[215:225]: LogPlusOne,
	_OpTypeName[225:233]:      Logistic,
	_OpTypeLowerName[225:233]: Logistic,
	_OpTypeName[233:240]:      Maximum,
	_OpTypeLowerName[233:240]: Maximum,
	_OpTypeName[240:247]:      Minimum,
	_OpTypeLowerName[240:247]: Minimum,
	_OpTypeName[247:255]:      Multiply,
	_OpTypeLowerName[247:255]: Multiply,
	_OpTypeName[255:261]:      Negate,
	_OpTypeLowerName[255:261]: Negate,
	_OpTypeName[261:264]:      Not,
	_OpTypeLowerName[261:264]: Not,
	_OpTypeName[264:266]:      Or,
	_OpTypeLowerName[264:266]: Or,
	_OpTypeName[266:272]:      Popcnt,
	_OpTypeLowerName[266:272]: Popcnt,
	_OpTypeName[272:277]:      Power,
	_OpTypeLowerName[272:277]: Power,
	_OpTypeName[277:281]:      Real,
	_OpTypeLowerName[277:281]: Real,
	_OpTypeName[281:290]:      Remainder,
	_OpTypeLowerName[281:290]: Remainder,
	_OpTypeName[290:296]:      Reduce,
	_OpTypeLowerName[290:296]: Reduce,
	_OpTypeName[296:303]:      Reshape,
	_OpTypeLowerName[296:303]: Reshape,
	_OpTypeName[303:318]:      RngBitGenerator,
	_OpTypeLowerName[303:318]: RngBitGenerator,
	_OpTypeName[318:333]:      RoundNearestAfz,
	_OpTypeLowerName[318:333]: RoundNearestAfz,
	_OpTypeName[333:349]:      RoundNearestEven,
	_OpTypeLowerName[333:349]: RoundNearestEven,
	_OpTypeName[349:354]:      Rsqrt,
	_OpTypeLowerName[349:354]: Rsqrt,
	_OpTypeName[354:361]:      Scatter,
	_OpTypeLowerName[354:361]: Scatter,
	_OpTypeName[361:370]:      ShiftLeft,
	_OpTypeLowerName[361:370]: ShiftLeft,
	_OpTypeName[370:390]:      ShiftRightArithmetic,
	_OpTypeLowerName[370:390]: ShiftRightArithmetic,
	_OpTypeName[390:407]:      ShiftRightLogical,
	_OpTypeLowerName[390:407]: ShiftRightLogical,
	_OpTypeName[407:411]:      Sign,
	_OpTypeLowerName[407:411]: Sign,
	_OpTypeName[411:415]:      Sine,
	_OpTypeLowerName[411:415]: Sine,
	_OpTypeName[415:420]:      Slice,
	_OpTypeLowerName[415:420]: Slice,
	_OpTypeName[420:424]:      Sqrt,
	_OpTypeLowerName[420:424]: Sqrt,
	_OpTypeName[424:432]:      Subtract,
	_OpTypeLowerName[424:432]: Subtract,
	_OpTypeName[432:435]:      Tan,
	_OpTypeLowerName[432:435]: Tan,
	_OpTypeName[435:439]:      Tanh,
	_OpTypeLowerName[435:439]: Tanh,
	_OpTypeName[439:448]:      Transpose,
	_OpTypeLowerName[439:448]: Transpose,
	_OpTypeName[448:451]:      Xor,
	_OpTypeLowerName[448:451]: Xor,
	_OpTypeName[451:472]:      BatchNormForInference,
	_OpTypeLowerName[451:472]: BatchNormForInference,
	_OpTypeName[472:492]:      BatchNormForTraining,
	_OpTypeLowerName[472:492]: BatchNormForTraining,
	_OpTypeName[492:509]:      BatchNormGradient,
	_OpTypeLowerName[492:509]: BatchNormGradient,
	_OpTypeName[509:513]:      Case,
	_OpTypeLowerName[509:513]: Case,
	_OpTypeName[513:521]:      Cholesky,
	_OpTypeLowerName[513:521]: Cholesky,
	_OpTypeName[521:540]:      CollectiveBroadcast,
	_OpTypeLowerName[521:540]: CollectiveBroadcast,
	_OpTypeName[540:557]:      CollectivePermute,
	_OpTypeLowerName[540:557]: CollectivePermute,
	_OpTypeName[557:566]:      Composite,
	_OpTypeLowerName[557:566]: Composite,
	_OpTypeName[566:573]:      Convert,
	_OpTypeLowerName[566:573]: Convert,
	_OpTypeName[573:584]:      Convolution,
	_OpTypeLowerName[573:584]: Convolution,
	_OpTypeName[584:594]:      CustomCall,
	_OpTypeLowerName[584:594]: CustomCall,
	_OpTypeName[594:615]:      DynamicBroadcastInDim,
	_OpTypeLowerName[594:615]: DynamicBroadcastInDim,
	_OpTypeName[615:626]:      DynamicConv,
	_OpTypeLowerName[615:626]: DynamicConv,
	_OpTypeName[626:639]:      DynamicGather,
	_OpTypeLowerName[626:639]: DynamicGather,
	_OpTypeName[639:650]:      DynamicIota,
	_OpTypeLowerName[639:650]: DynamicIota,
	_OpTypeName[650:660]:      DynamicPad,
	_OpTypeLowerName[650:660]: DynamicPad,
	_OpTypeName[660:674]:      DynamicReshape,
	_OpTypeLowerName[660:674]: DynamicReshape,
	_OpTypeName[674:692]:      DynamicUpdateSlice,
	_OpTypeLowerName[674:692]: DynamicUpdateSlice,
	_OpTypeName[692:695]:      Fft,
	_OpTypeLowerName[692:695]: Fft,
	_OpTypeName[695:711]:      GetDimensionSize,
	_OpTypeLowerName[695:711]: GetDimensionSize,
	_OpTypeName[711:726]:      GetTupleElement,
	_OpTypeLowerName[711:726]: GetTupleElement,
	_OpTypeName[726:728]:      If,
	_OpTypeLowerName[726:728]: If,
	_OpTypeName[728:734]:      Infeed,
	_OpTypeLowerName[728:734]: Infeed,
	_OpTypeName[734:753]:      OptimizationBarrier,
	_OpTypeLowerName[734:753]: OptimizationBarrier,
	_OpTypeName[753:760]:      Outfeed,
	_OpTypeLowerName[753:760]: Outfeed,
	_OpTypeName[760:763]:      Pad,
	_OpTypeLowerName[760:763]: Pad,
	_OpTypeName[763:774]:      PartitionId,
	_OpTypeLowerName[763:774]: PartitionId,
	_OpTypeName[774:778]:      Recv,
	_OpTypeLowerName[774:778]: Recv,
	_OpTypeName[778:793]:      ReducePrecision,
	_OpTypeLowerName[778:793]: ReducePrecision,
	_OpTypeName[793:806]:      ReduceScatter,
	_OpTypeLowerName[793:806]: ReduceScatter,
	_OpTypeName[806:818]:      ReduceWindow,
	_OpTypeLowerName[806:818]: ReduceWindow,
	_OpTypeName[818:825]:      Reverse,
	_OpTypeLowerName[818:825]: Reverse,
	_OpTypeName[825:831]:      Select,
	_OpTypeLowerName[825:831]: Select,
	_OpTypeName[831:847]:      SelectAndScatter,
	_OpTypeLowerName[831:847]: SelectAndScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:119],
	_OpTypeName[119:136],
	_OpTypeName[136:142],
	_OpTypeName[142:152],
	_OpTypeName[152:155],
	_OpTypeName[155:166],
	_OpTypeName[166:185],
	_OpTypeName[185:190],
	_OpTypeName[190:196],
	_OpTypeName[196:200],
	_OpTypeName[200:208],
	_OpTypeName[208:212],
	_OpTypeName[212:215],
	_OpTypeName[215:225],
	_OpTypeName[225:233],
	_OpTypeName[233:240],
	_OpTypeName[240:247],
	_OpTypeName[247:255],
	_OpTypeName[255:261],
	_OpTypeName[261:264],
	_OpTypeName[264:266],
	_OpTypeName[266:272],
	_OpTypeName[272:277],
	_OpTypeName[277:281],
	_OpTypeName[281:290],
	_OpTypeName[290:296],
	_OpTypeName[296:303],
	_OpTypeName[303:318],
	_OpTypeName[318:333],
	_OpTypeName[333:349],
	_OpTypeName[349:354],
	_OpTypeName[354:361],
	_OpTypeName[361:370],
	_OpTypeName[370:390],
	_OpTypeName[390:407],
	_OpTypeName[407:411],
	_OpTypeName[411:415],
	_OpTypeName[415:420],
	_OpTypeName[420:424],
	_OpTypeName[424:432],
	_OpTypeName[432:435],
	_OpTypeName[435:439],
	_OpTypeName[439:448],
	_OpTypeName[448:451],
	_OpTypeName[451:472],
	_OpTypeName[472:492],
	_OpTypeName[492:509],
	_OpTypeName[509:513],
	_OpTypeName[513:521],
	_OpTypeName[521:540],
	_OpTypeName[540:557],
	_OpTypeName[557:566],
	_OpTypeName[566:573],
	_OpTypeName[573:584],
	_OpTypeName[584:594],
	_OpTypeName[594:615],
	_OpTypeName[615:626],
	_OpTypeName[626:639],
	_OpTypeName[639:650],
	_OpTypeName[650:660],
	_OpTypeName[660:674],
	_OpTypeName[674:692],
	_OpTypeName[692:695],
	_OpTypeName[695:711],
	_OpTypeName[711:726],
	_OpTypeName[726:728],
	_OpTypeName[728:734],
	_OpTypeName[734:753],
	_OpTypeName[753:760],
	_OpTypeName[760:763],
	_OpTypeName[763:774],
	_OpTypeName[774:778],
	_OpTypeName[778:793],
	_OpTypeName[793:806],
	_OpTypeName[806:818],
	_OpTypeName[818:825],
	_OpTypeName[825:831],
	_OpTypeName[831:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
