// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertConvolutionCosineCountLeadingZerosDivideDotGeneralDynamicSliceDynamicUpdateSliceErfExponentialExponentialMinusOneFftFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReduceWindowReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterSelectSelectAndScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 120, 131, 137, 154, 160, 170, 182, 200, 203, 214, 233, 236, 241, 247, 251, 259, 263, 266, 276, 284, 291, 298, 306, 312, 315, 317, 320, 326, 331, 335, 344, 350, 362, 369, 376, 391, 406, 422, 427, 434, 440, 456, 465, 485, 502, 506, 510, 515, 519, 527, 530, 534, 543, 546, 567, 587, 604, 608, 616, 635, 652, 661, 671, 692, 703, 716, 727, 737, 751, 767, 782, 784, 790, 809, 816, 827, 831, 846, 859, 863, 878, 883, 900, 915, 920, 924}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertconvolutioncosinecountleadingzerosdividedotgeneraldynamicslicedynamicupdatesliceerfexponentialexponentialminusonefftfloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereducewindowreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscatterselectselectandscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositecustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapegetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Convert-(16)]
	_ = x[Convolution-(17)]
	_ = x[Cosine-(18)]
	_ = x[CountLeadingZeros-(19)]
	_ = x[Divide-(20)]
	_ = x[DotGeneral-(21)]
	_ = x[DynamicSlice-(22)]
	_ = x[DynamicUpdateSlice-(23)]
	_ = x[Erf-(24)]
	_ = x[Exponential-(25)]
	_ = x[ExponentialMinusOne-(26)]
	_ = x[Fft-(27)]
	_ = x[Floor-(28)]
	_ = x[Gather-(29)]
	_ = x[Imag-(30)]
	_ = x[IsFinite-(31)]
	_ = x[Iota-(32)]
	_ = x[Log-(33)]
	_ = x[LogPlusOne-(34)]
	_ = x[Logistic-(35)]
	_ = x[Maximum-(36)]
	_ = x[Minimum-(37)]
	_ = x[Multiply-(38)]
	_ = x[Negate-(39)]
	_ = x[Not-(40)]
	_ = x[Or-(41)]
	_ = x[Pad-(42)]
	_ = x[Popcnt-(43)]
	_ = x[Power-(44)]
	_ = x[Real-(45)]
	_ = x[Remainder-(46)]
	_ = x[Reduce-(47)]
	_ = x[ReduceWindow-(48)]
	_ = x[Reshape-(49)]
	_ = x[Reverse-(50)]
	_ = x[RngBitGenerator-(51)]
	_ = x[RoundNearestAfz-(52)]
	_ = x[RoundNearestEven-(53)]
	_ = x[Rsqrt-(54)]
	_ = x[Scatter-(55)]
	_ = x[Select-(56)]
	_ = x[SelectAndScatter-(57)]
	_ = x[ShiftLeft-(58)]
	_ = x[ShiftRightArithmetic-(59)]
	_ = x[ShiftRightLogical-(60)]
	_ = x[Sign-(61)]
	_ = x[Sine-(62)]
	_ = x[Slice-(63)]
	_ = x[Sqrt-(64)]
	_ = x[Subtract-(65)]
	_ = x[Tan-(66)]
	_ = x[Tanh-(67)]
	_ = x[Transpose-(68)]
	_ = x[Xor-(69)]
	_ = x[BatchNormForInference-(70)]
	_ = x[BatchNormForTraining-(71)]
	_ = x[BatchNormGradient-(72)]
	_ = x[Case-(73)]
	_ = x[Cholesky-(74)]
	_ = x[CollectiveBroadcast-(75)]
	_ = x[CollectivePermute-(76)]
	_ = x[Composite-(77)]
	_ = x[CustomCall-(78)]
	_ = x[DynamicBroadcastInDim-(79)]
	_ = x[DynamicConv-(80)]
	_ = x[DynamicGather-(81)]
	_ = x[DynamicIota-(82)]
	_ = x[DynamicPad-(83)]
	_ = x[DynamicReshape-(84)]
	_ = x[GetDimensionSize-(85)]
	_ = x[GetTupleElement-(86)]
	_ = x[If-(87)]
	_ = x[Infeed-(88)]
	_ = x[OptimizationBarrier-(89)]
	_ = x[Outfeed-(90)]
	_ = x[PartitionId-(91)]
	_ = x[Recv-(92)]
	_ = x[ReducePrecision-(93)]
	_ = x[ReduceScatter-(94)]
	_ = x[Send-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Convolution, Cosine, CountLeadingZeros, Divide, DotGeneral, DynamicSlice, DynamicUpdateSlice, Erf, Exponential, ExponentialMinusOne, Fft, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, ReduceWindow, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, Select, SelectAndScatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:120]:      Convert,
	_OpTypeLowerName[113:120]: Convert,
	_OpTypeName[120:131]:      Convolution,
	_OpTypeLowerName[120:131]: Convolution,
	_OpTypeName[131:137]:      Cosine,
	_OpTypeLowerName[131:137]: Cosine,
	_OpTypeName[137:154]:      CountLeadingZeros,
	_OpTypeLowerName[137:154]: CountLeadingZeros,
	_OpTypeName[154:160]:      Divide,
	_OpTypeLowerName[154:160]: Divide,
	_OpTypeName[160:170]:      DotGeneral,
	_OpTypeLowerName[160:170]: DotGeneral,
	_OpTypeName[170:182]:      DynamicSlice,
	_OpTypeLowerName[170:182]: DynamicSlice,
	_OpTypeName[182:200]:      DynamicUpdateSlice,
	_OpTypeLowerName[182:200]: DynamicUpdateSlice,
	_OpTypeName[200:203]:      Erf,
	_OpTypeLowerName[200:203]: Erf,
	_OpTypeName[203:214]:      Exponential,
	_OpTypeLowerName[203:214]: Exponential,
	_OpTypeName[214:233]:      ExponentialMinusOne,
	_OpTypeLowerName[214:233]: ExponentialMinusOne,
	_OpTypeName[233:236]:      Fft,
	_OpTypeLowerName[233:236]: Fft,
	_OpTypeName[236:241]:      Floor,
	_OpTypeLowerName[236:241]: Floor,
	_OpTypeName[241:247]:      Gather,
	_OpTypeLowerName[241:247]: Gather,
	_OpTypeName[247:251]:      Imag,
	_OpTypeLowerName[247:251]: Imag,
	_OpTypeName[251:259]:      IsFinite,
	_OpTypeLowerName[251:259]: IsFinite,
	_OpTypeName[259:263]:      Iota,
	_OpTypeLowerName[259:263]: Iota,
	_OpTypeName[263:266]:      Log,
	_OpTypeLowerName[263:266]: Log,
	_OpTypeName[266:276]:      LogPlusOne,
	_OpTypeLowerName[266:276]: LogPlusOne,
	_OpTypeName[276:284]:      Logistic,
	_OpTypeLowerName[276:284]: Logistic,
	_OpTypeName[284:291]:      Maximum,
	_OpTypeLowerName[284:291]: Maximum,
	_OpTypeName[291:298]:      Minimum,
	_OpTypeLowerName[291:298]: Minimum,
	_OpTypeName[298:306]:      Multiply,
	_OpTypeLowerName[298:306]: Multiply,
	_OpTypeName[306:312]:      Negate,
	_OpTypeLowerName[306:312]: Negate,
	_OpTypeName[312:315]:      Not,
	_OpTypeLowerName[312:315]: Not,
	_OpTypeName[315:317]:      Or,
	_OpTypeLowerName[315:317]: Or,
	_OpTypeName[317:320]:      Pad,
	_OpTypeLowerName[317:320]: Pad,
	_OpTypeName[320:326]:      Popcnt,
	_OpTypeLowerName[320:326]: Popcnt,
	_OpTypeName[326:331]:      Power,
	_OpTypeLowerName[326:331]: Power,
	_OpTypeName[331:335]:      Real,
	_OpTypeLowerName[331:335]: Real,
	_OpTypeName[335:344]:      Remainder,
	_OpTypeLowerName[335:344]: Remainder,
	_OpTypeName[344:350]:      Reduce,
	_OpTypeLowerName[344:350]: Reduce,
	_OpTypeName[350:362]:      ReduceWindow,
	_OpTypeLowerName[350:362]: ReduceWindow,
	_OpTypeName[362:369]:      Reshape,
	_OpTypeLowerName[362:369]: Reshape,
	_OpTypeName[369:376]:      Reverse,
	_OpTypeLowerName[369:376]: Reverse,
	_OpTypeName[376:391]:      RngBitGenerator,
	_OpTypeLowerName[376:391]: RngBitGenerator,
	_OpTypeName[391:406]:      RoundNearestAfz,
	_OpTypeLowerName[391:406]: RoundNearestAfz,
	_OpTypeName[406:422]:      RoundNearestEven,
	_OpTypeLowerName[406:422]: RoundNearestEven,
	_OpTypeName[422:427]:      Rsqrt,
	_OpTypeLowerName[422:427]: Rsqrt,
	_OpTypeName[427:434]:      Scatter,
	_OpTypeLowerName[427:434]: Scatter,
	_OpTypeName[434:440]:      Select,
	_OpTypeLowerName[434:440]: Select,
	_OpTypeName[440:456]:      SelectAndScatter,
	_OpTypeLowerName[440:456]: SelectAndScatter,
	_OpTypeName[456:465]:      ShiftLeft,
	_OpTypeLowerName[456:465]: ShiftLeft,
	_OpTypeName[465:485]:      ShiftRightArithmetic,
	_OpTypeLowerName[465:485]: ShiftRightArithmetic,
	_OpTypeName[485:502]:      ShiftRightLogical,
	_OpTypeLowerName[485:502]: ShiftRightLogical,
	_OpTypeName[502:506]:      Sign,
	_OpTypeLowerName[502:506]: Sign,
	_OpTypeName[506:510]:      Sine,
	_OpTypeLowerName[506:510]: Sine,
	_OpTypeName[510:515]:      Slice,
	_OpTypeLowerName[510:515]: Slice,
	_OpTypeName[515:519]:      Sqrt,
	_OpTypeLowerName[515:519]: Sqrt,
	_OpTypeName[519:527]:      Subtract,
	_OpTypeLowerName[519:527]: Subtract,
	_OpTypeName[527:530]:      Tan,
	_OpTypeLowerName[527:530]: Tan,
	_OpTypeName[530:534]:      Tanh,
	_OpTypeLowerName[530:534]: Tanh,
	_OpTypeName[534:543]:      Transpose,
	_OpTypeLowerName[534:543]: Transpose,
	_OpTypeName[543:546]:      Xor,
	_OpTypeLowerName[543:546]: Xor,
	_OpTypeName[546:567]:      BatchNormForInference,
	_OpTypeLowerName[546:567]: BatchNormForInference,
	_OpTypeName[567:587]:      BatchNormForTraining,
	_OpTypeLowerName[567:587]: BatchNormForTraining,
	_OpTypeName[587:604]:      BatchNormGradient,
	_OpTypeLowerName[587:604]: BatchNormGradient,
	_OpTypeName[604:608]:      Case,
	_OpTypeLowerName[604:608]: Case,
	_OpTypeName[608:616]:      Cholesky,
	_OpTypeLowerName[608:616]: Cholesky,
	_OpTypeName[616:635]:      CollectiveBroadcast,
	_OpTypeLowerName[616:635]: CollectiveBroadcast,
	_OpTypeName[635:652]:      CollectivePermute,
	_OpTypeLowerName[635:652]: CollectivePermute,
	_OpTypeName[652:661]:      Composite,
	_OpTypeLowerName[652:661]: Composite,
	_OpTypeName[661:671]:      CustomCall,
	_OpTypeLowerName[661:671]: CustomCall,
	_OpTypeName[671:692]:      DynamicBroadcastInDim,
	_OpTypeLowerName[671:692]: DynamicBroadcastInDim,
	_OpTypeName[692:703]:      DynamicConv,
	_OpTypeLowerName[692:703]: DynamicConv,
	_OpTypeName[703:716]:      DynamicGather,
	_OpTypeLowerName[703:716]: DynamicGather,
	_OpTypeName[716:727]:      DynamicIota,
	_OpTypeLowerName[716:727]: DynamicIota,
	_OpTypeName[727:737]:      DynamicPad,
	_OpTypeLowerName[727:737]: DynamicPad,
	_OpTypeName[737:751]:      DynamicReshape,
	_OpTypeLowerName[737:751]: DynamicReshape,
	_OpTypeName[751:767]:      GetDimensionSize,
	_OpTypeLowerName[751:767]: GetDimensionSize,
	_OpTypeName[767:782]:      GetTupleElement,
	_OpTypeLowerName[767:782]: GetTupleElement,
	_OpTypeName[782:784]:      If,
	_OpTypeLowerName[782:784]: If,
	_OpTypeName[784:790]:      Infeed,
	_OpTypeLowerName[784:790]: Infeed,
	_OpTypeName[790:809]:      OptimizationBarrier,
	_OpTypeLowerName[790:809]: OptimizationBarrier,
	_OpTypeName[809:816]:      Outfeed,
	_OpTypeLowerName[809:816]: Outfeed,
	_OpTypeName[816:827]:      PartitionId,
	_OpTypeLowerName[816:827]: PartitionId,
	_OpTypeName[827:831]:      Recv,
	_OpTypeLowerName[827:831]: Recv,
	_OpTypeName[831:846]:      ReducePrecision,
	_OpTypeLowerName[831:846]: ReducePrecision,
	_OpTypeName[846:859]:      ReduceScatter,
	_OpTypeLowerName[846:859]: ReduceScatter,
	_OpTypeName[859:863]:      Send,
	_OpTypeLowerName[859:863]: Send,
	_OpTypeName[863:878]:      TriangularSolve,
	_OpTypeLowerName[863:878]: TriangularSolve,
	_OpTypeName[878:883]:      Tuple,
	_OpTypeLowerName[878:883]: Tuple,
	_OpTypeName[883:900]:      UniformDequantize,
	_OpTypeLowerName[883:900]: UniformDequantize,
	_OpTypeName[900:915]:      UniformQuantize,
	_OpTypeLowerName[900:915]: UniformQuantize,
	_OpTypeName[915:920]:      While,
	_OpTypeLowerName[915:920]: While,
	_OpTypeName[920:924]:      Last,
	_OpTypeLowerName[920:924]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:120],
	_OpTypeName[120:131],
	_OpTypeName[131:137],
	_OpTypeName[137:154],
	_OpTypeName[154:160],
	_OpTypeName[160:170],
	_OpTypeName[170:182],
	_OpTypeName[182:200],
	_OpTypeName[200:203],
	_OpTypeName[203:214],
	_OpTypeName[214:233],
	_OpTypeName[233:236],
	_OpTypeName[236:241],
	_OpTypeName[241:247],
	_OpTypeName[247:251],
	_OpTypeName[251:259],
	_OpTypeName[259:263],
	_OpTypeName[263:266],
	_OpTypeName[266:276],
	_OpTypeName[276:284],
	_OpTypeName[284:291],
	_OpTypeName[291:298],
	_OpTypeName[298:306],
	_OpTypeName[306:312],
	_OpTypeName[312:315],
	_OpTypeName[315:317],
	_OpTypeName[317:320],
	_OpTypeName[320:326],
	_OpTypeName[326:331],
	_OpTypeName[331:335],
	_OpTypeName[335:344],
	_OpTypeName[344:350],
	_OpTypeName[350:362],
	_OpTypeName[362:369],
	_OpTypeName[369:376],
	_OpTypeName[376:391],
	_OpTypeName[391:406],
	_OpTypeName[406:422],
	_OpTypeName[422:427],
	_OpTypeName[427:434],
	_OpTypeName[434:440],
	_OpTypeName[440:456],
	_OpTypeName[456:465],
	_OpTypeName[465:485],
	_OpTypeName[485:502],
	_OpTypeName[502:506],
	_OpTypeName[506:510],
	_OpTypeName[510:515],
	_OpTypeName[515:519],
	_OpTypeName[519:527],
	_OpTypeName[527:530],
	_OpTypeName[530:534],
	_OpTypeName[534:543],
	_OpTypeName[543:546],
	_OpTypeName[546:567],
	_OpTypeName[567:587],
	_OpTypeName[587:604],
	_OpTypeName[604:608],
	_OpTypeName[608:616],
	_OpTypeName[616:635],
	_OpTypeName[635:652],
	_OpTypeName[652:661],
	_OpTypeName[661:671],
	_OpTypeName[671:692],
	_OpTypeName[692:703],
	_OpTypeName[703:716],
	_OpTypeName[716:727],
	_OpTypeName[727:737],
	_OpTypeName[737:751],
	_OpTypeName[751:767],
	_OpTypeName[767:782],
	_OpTypeName[782:784],
	_OpTypeName[784:790],
	_OpTypeName[790:809],
	_OpTypeName[809:816],
	_OpTypeName[816:827],
	_OpTypeName[827:831],
	_OpTypeName[831:846],
	_OpTypeName[846:859],
	_OpTypeName[859:863],
	_OpTypeName[863:878],
	_OpTypeName[878:883],
	_OpTypeName[883:900],
	_OpTypeName[900:915],
	_OpTypeName[915:920],
	_OpTypeName[920:924],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
