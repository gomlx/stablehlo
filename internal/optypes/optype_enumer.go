// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BatchNormInferenceBatchNormTrainingBatchNormGradBitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertConvolutionCosineCountLeadingZerosDivideDotGeneralDynamicSliceDynamicUpdateSliceErfExponentialExponentialMinusOneFftFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReduceWindowReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterSelectSelectAndScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 65, 82, 95, 109, 123, 127, 131, 136, 143, 150, 161, 168, 179, 185, 202, 208, 218, 230, 248, 251, 262, 281, 284, 289, 295, 299, 307, 311, 314, 324, 332, 339, 346, 354, 360, 363, 365, 368, 374, 379, 383, 392, 398, 410, 417, 424, 439, 454, 470, 475, 482, 488, 504, 513, 533, 550, 554, 558, 563, 567, 575, 578, 582, 591, 594, 598, 606, 625, 642, 651, 661, 682, 693, 706, 717, 727, 741, 757, 772, 774, 780, 799, 806, 817, 821, 836, 849, 853, 868, 873, 890, 905, 910, 914}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2batchnorminferencebatchnormtrainingbatchnormgradbitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertconvolutioncosinecountleadingzerosdividedotgeneraldynamicslicedynamicupdatesliceerfexponentialexponentialminusonefftfloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereducewindowreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscatterselectselectandscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorcasecholeskycollectivebroadcastcollectivepermutecompositecustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapegetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BatchNormInference-(8)]
	_ = x[BatchNormTraining-(9)]
	_ = x[BatchNormGrad-(10)]
	_ = x[BitcastConvert-(11)]
	_ = x[BroadcastInDim-(12)]
	_ = x[Cbrt-(13)]
	_ = x[Ceil-(14)]
	_ = x[Clamp-(15)]
	_ = x[Compare-(16)]
	_ = x[Complex-(17)]
	_ = x[Concatenate-(18)]
	_ = x[Convert-(19)]
	_ = x[Convolution-(20)]
	_ = x[Cosine-(21)]
	_ = x[CountLeadingZeros-(22)]
	_ = x[Divide-(23)]
	_ = x[DotGeneral-(24)]
	_ = x[DynamicSlice-(25)]
	_ = x[DynamicUpdateSlice-(26)]
	_ = x[Erf-(27)]
	_ = x[Exponential-(28)]
	_ = x[ExponentialMinusOne-(29)]
	_ = x[Fft-(30)]
	_ = x[Floor-(31)]
	_ = x[Gather-(32)]
	_ = x[Imag-(33)]
	_ = x[IsFinite-(34)]
	_ = x[Iota-(35)]
	_ = x[Log-(36)]
	_ = x[LogPlusOne-(37)]
	_ = x[Logistic-(38)]
	_ = x[Maximum-(39)]
	_ = x[Minimum-(40)]
	_ = x[Multiply-(41)]
	_ = x[Negate-(42)]
	_ = x[Not-(43)]
	_ = x[Or-(44)]
	_ = x[Pad-(45)]
	_ = x[Popcnt-(46)]
	_ = x[Power-(47)]
	_ = x[Real-(48)]
	_ = x[Remainder-(49)]
	_ = x[Reduce-(50)]
	_ = x[ReduceWindow-(51)]
	_ = x[Reshape-(52)]
	_ = x[Reverse-(53)]
	_ = x[RngBitGenerator-(54)]
	_ = x[RoundNearestAfz-(55)]
	_ = x[RoundNearestEven-(56)]
	_ = x[Rsqrt-(57)]
	_ = x[Scatter-(58)]
	_ = x[Select-(59)]
	_ = x[SelectAndScatter-(60)]
	_ = x[ShiftLeft-(61)]
	_ = x[ShiftRightArithmetic-(62)]
	_ = x[ShiftRightLogical-(63)]
	_ = x[Sign-(64)]
	_ = x[Sine-(65)]
	_ = x[Slice-(66)]
	_ = x[Sqrt-(67)]
	_ = x[Subtract-(68)]
	_ = x[Tan-(69)]
	_ = x[Tanh-(70)]
	_ = x[Transpose-(71)]
	_ = x[Xor-(72)]
	_ = x[Case-(73)]
	_ = x[Cholesky-(74)]
	_ = x[CollectiveBroadcast-(75)]
	_ = x[CollectivePermute-(76)]
	_ = x[Composite-(77)]
	_ = x[CustomCall-(78)]
	_ = x[DynamicBroadcastInDim-(79)]
	_ = x[DynamicConv-(80)]
	_ = x[DynamicGather-(81)]
	_ = x[DynamicIota-(82)]
	_ = x[DynamicPad-(83)]
	_ = x[DynamicReshape-(84)]
	_ = x[GetDimensionSize-(85)]
	_ = x[GetTupleElement-(86)]
	_ = x[If-(87)]
	_ = x[Infeed-(88)]
	_ = x[OptimizationBarrier-(89)]
	_ = x[Outfeed-(90)]
	_ = x[PartitionId-(91)]
	_ = x[Recv-(92)]
	_ = x[ReducePrecision-(93)]
	_ = x[ReduceScatter-(94)]
	_ = x[Send-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BatchNormInference, BatchNormTraining, BatchNormGrad, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Convolution, Cosine, CountLeadingZeros, Divide, DotGeneral, DynamicSlice, DynamicUpdateSlice, Erf, Exponential, ExponentialMinusOne, Fft, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, ReduceWindow, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, Select, SelectAndScatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:65]:        BatchNormInference,
	_OpTypeLowerName[47:65]:   BatchNormInference,
	_OpTypeName[65:82]:        BatchNormTraining,
	_OpTypeLowerName[65:82]:   BatchNormTraining,
	_OpTypeName[82:95]:        BatchNormGrad,
	_OpTypeLowerName[82:95]:   BatchNormGrad,
	_OpTypeName[95:109]:       BitcastConvert,
	_OpTypeLowerName[95:109]:  BitcastConvert,
	_OpTypeName[109:123]:      BroadcastInDim,
	_OpTypeLowerName[109:123]: BroadcastInDim,
	_OpTypeName[123:127]:      Cbrt,
	_OpTypeLowerName[123:127]: Cbrt,
	_OpTypeName[127:131]:      Ceil,
	_OpTypeLowerName[127:131]: Ceil,
	_OpTypeName[131:136]:      Clamp,
	_OpTypeLowerName[131:136]: Clamp,
	_OpTypeName[136:143]:      Compare,
	_OpTypeLowerName[136:143]: Compare,
	_OpTypeName[143:150]:      Complex,
	_OpTypeLowerName[143:150]: Complex,
	_OpTypeName[150:161]:      Concatenate,
	_OpTypeLowerName[150:161]: Concatenate,
	_OpTypeName[161:168]:      Convert,
	_OpTypeLowerName[161:168]: Convert,
	_OpTypeName[168:179]:      Convolution,
	_OpTypeLowerName[168:179]: Convolution,
	_OpTypeName[179:185]:      Cosine,
	_OpTypeLowerName[179:185]: Cosine,
	_OpTypeName[185:202]:      CountLeadingZeros,
	_OpTypeLowerName[185:202]: CountLeadingZeros,
	_OpTypeName[202:208]:      Divide,
	_OpTypeLowerName[202:208]: Divide,
	_OpTypeName[208:218]:      DotGeneral,
	_OpTypeLowerName[208:218]: DotGeneral,
	_OpTypeName[218:230]:      DynamicSlice,
	_OpTypeLowerName[218:230]: DynamicSlice,
	_OpTypeName[230:248]:      DynamicUpdateSlice,
	_OpTypeLowerName[230:248]: DynamicUpdateSlice,
	_OpTypeName[248:251]:      Erf,
	_OpTypeLowerName[248:251]: Erf,
	_OpTypeName[251:262]:      Exponential,
	_OpTypeLowerName[251:262]: Exponential,
	_OpTypeName[262:281]:      ExponentialMinusOne,
	_OpTypeLowerName[262:281]: ExponentialMinusOne,
	_OpTypeName[281:284]:      Fft,
	_OpTypeLowerName[281:284]: Fft,
	_OpTypeName[284:289]:      Floor,
	_OpTypeLowerName[284:289]: Floor,
	_OpTypeName[289:295]:      Gather,
	_OpTypeLowerName[289:295]: Gather,
	_OpTypeName[295:299]:      Imag,
	_OpTypeLowerName[295:299]: Imag,
	_OpTypeName[299:307]:      IsFinite,
	_OpTypeLowerName[299:307]: IsFinite,
	_OpTypeName[307:311]:      Iota,
	_OpTypeLowerName[307:311]: Iota,
	_OpTypeName[311:314]:      Log,
	_OpTypeLowerName[311:314]: Log,
	_OpTypeName[314:324]:      LogPlusOne,
	_OpTypeLowerName[314:324]: LogPlusOne,
	_OpTypeName[324:332]:      Logistic,
	_OpTypeLowerName[324:332]: Logistic,
	_OpTypeName[332:339]:      Maximum,
	_OpTypeLowerName[332:339]: Maximum,
	_OpTypeName[339:346]:      Minimum,
	_OpTypeLowerName[339:346]: Minimum,
	_OpTypeName[346:354]:      Multiply,
	_OpTypeLowerName[346:354]: Multiply,
	_OpTypeName[354:360]:      Negate,
	_OpTypeLowerName[354:360]: Negate,
	_OpTypeName[360:363]:      Not,
	_OpTypeLowerName[360:363]: Not,
	_OpTypeName[363:365]:      Or,
	_OpTypeLowerName[363:365]: Or,
	_OpTypeName[365:368]:      Pad,
	_OpTypeLowerName[365:368]: Pad,
	_OpTypeName[368:374]:      Popcnt,
	_OpTypeLowerName[368:374]: Popcnt,
	_OpTypeName[374:379]:      Power,
	_OpTypeLowerName[374:379]: Power,
	_OpTypeName[379:383]:      Real,
	_OpTypeLowerName[379:383]: Real,
	_OpTypeName[383:392]:      Remainder,
	_OpTypeLowerName[383:392]: Remainder,
	_OpTypeName[392:398]:      Reduce,
	_OpTypeLowerName[392:398]: Reduce,
	_OpTypeName[398:410]:      ReduceWindow,
	_OpTypeLowerName[398:410]: ReduceWindow,
	_OpTypeName[410:417]:      Reshape,
	_OpTypeLowerName[410:417]: Reshape,
	_OpTypeName[417:424]:      Reverse,
	_OpTypeLowerName[417:424]: Reverse,
	_OpTypeName[424:439]:      RngBitGenerator,
	_OpTypeLowerName[424:439]: RngBitGenerator,
	_OpTypeName[439:454]:      RoundNearestAfz,
	_OpTypeLowerName[439:454]: RoundNearestAfz,
	_OpTypeName[454:470]:      RoundNearestEven,
	_OpTypeLowerName[454:470]: RoundNearestEven,
	_OpTypeName[470:475]:      Rsqrt,
	_OpTypeLowerName[470:475]: Rsqrt,
	_OpTypeName[475:482]:      Scatter,
	_OpTypeLowerName[475:482]: Scatter,
	_OpTypeName[482:488]:      Select,
	_OpTypeLowerName[482:488]: Select,
	_OpTypeName[488:504]:      SelectAndScatter,
	_OpTypeLowerName[488:504]: SelectAndScatter,
	_OpTypeName[504:513]:      ShiftLeft,
	_OpTypeLowerName[504:513]: ShiftLeft,
	_OpTypeName[513:533]:      ShiftRightArithmetic,
	_OpTypeLowerName[513:533]: ShiftRightArithmetic,
	_OpTypeName[533:550]:      ShiftRightLogical,
	_OpTypeLowerName[533:550]: ShiftRightLogical,
	_OpTypeName[550:554]:      Sign,
	_OpTypeLowerName[550:554]: Sign,
	_OpTypeName[554:558]:      Sine,
	_OpTypeLowerName[554:558]: Sine,
	_OpTypeName[558:563]:      Slice,
	_OpTypeLowerName[558:563]: Slice,
	_OpTypeName[563:567]:      Sqrt,
	_OpTypeLowerName[563:567]: Sqrt,
	_OpTypeName[567:575]:      Subtract,
	_OpTypeLowerName[567:575]: Subtract,
	_OpTypeName[575:578]:      Tan,
	_OpTypeLowerName[575:578]: Tan,
	_OpTypeName[578:582]:      Tanh,
	_OpTypeLowerName[578:582]: Tanh,
	_OpTypeName[582:591]:      Transpose,
	_OpTypeLowerName[582:591]: Transpose,
	_OpTypeName[591:594]:      Xor,
	_OpTypeLowerName[591:594]: Xor,
	_OpTypeName[594:598]:      Case,
	_OpTypeLowerName[594:598]: Case,
	_OpTypeName[598:606]:      Cholesky,
	_OpTypeLowerName[598:606]: Cholesky,
	_OpTypeName[606:625]:      CollectiveBroadcast,
	_OpTypeLowerName[606:625]: CollectiveBroadcast,
	_OpTypeName[625:642]:      CollectivePermute,
	_OpTypeLowerName[625:642]: CollectivePermute,
	_OpTypeName[642:651]:      Composite,
	_OpTypeLowerName[642:651]: Composite,
	_OpTypeName[651:661]:      CustomCall,
	_OpTypeLowerName[651:661]: CustomCall,
	_OpTypeName[661:682]:      DynamicBroadcastInDim,
	_OpTypeLowerName[661:682]: DynamicBroadcastInDim,
	_OpTypeName[682:693]:      DynamicConv,
	_OpTypeLowerName[682:693]: DynamicConv,
	_OpTypeName[693:706]:      DynamicGather,
	_OpTypeLowerName[693:706]: DynamicGather,
	_OpTypeName[706:717]:      DynamicIota,
	_OpTypeLowerName[706:717]: DynamicIota,
	_OpTypeName[717:727]:      DynamicPad,
	_OpTypeLowerName[717:727]: DynamicPad,
	_OpTypeName[727:741]:      DynamicReshape,
	_OpTypeLowerName[727:741]: DynamicReshape,
	_OpTypeName[741:757]:      GetDimensionSize,
	_OpTypeLowerName[741:757]: GetDimensionSize,
	_OpTypeName[757:772]:      GetTupleElement,
	_OpTypeLowerName[757:772]: GetTupleElement,
	_OpTypeName[772:774]:      If,
	_OpTypeLowerName[772:774]: If,
	_OpTypeName[774:780]:      Infeed,
	_OpTypeLowerName[774:780]: Infeed,
	_OpTypeName[780:799]:      OptimizationBarrier,
	_OpTypeLowerName[780:799]: OptimizationBarrier,
	_OpTypeName[799:806]:      Outfeed,
	_OpTypeLowerName[799:806]: Outfeed,
	_OpTypeName[806:817]:      PartitionId,
	_OpTypeLowerName[806:817]: PartitionId,
	_OpTypeName[817:821]:      Recv,
	_OpTypeLowerName[817:821]: Recv,
	_OpTypeName[821:836]:      ReducePrecision,
	_OpTypeLowerName[821:836]: ReducePrecision,
	_OpTypeName[836:849]:      ReduceScatter,
	_OpTypeLowerName[836:849]: ReduceScatter,
	_OpTypeName[849:853]:      Send,
	_OpTypeLowerName[849:853]: Send,
	_OpTypeName[853:868]:      TriangularSolve,
	_OpTypeLowerName[853:868]: TriangularSolve,
	_OpTypeName[868:873]:      Tuple,
	_OpTypeLowerName[868:873]: Tuple,
	_OpTypeName[873:890]:      UniformDequantize,
	_OpTypeLowerName[873:890]: UniformDequantize,
	_OpTypeName[890:905]:      UniformQuantize,
	_OpTypeLowerName[890:905]: UniformQuantize,
	_OpTypeName[905:910]:      While,
	_OpTypeLowerName[905:910]: While,
	_OpTypeName[910:914]:      Last,
	_OpTypeLowerName[910:914]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:65],
	_OpTypeName[65:82],
	_OpTypeName[82:95],
	_OpTypeName[95:109],
	_OpTypeName[109:123],
	_OpTypeName[123:127],
	_OpTypeName[127:131],
	_OpTypeName[131:136],
	_OpTypeName[136:143],
	_OpTypeName[143:150],
	_OpTypeName[150:161],
	_OpTypeName[161:168],
	_OpTypeName[168:179],
	_OpTypeName[179:185],
	_OpTypeName[185:202],
	_OpTypeName[202:208],
	_OpTypeName[208:218],
	_OpTypeName[218:230],
	_OpTypeName[230:248],
	_OpTypeName[248:251],
	_OpTypeName[251:262],
	_OpTypeName[262:281],
	_OpTypeName[281:284],
	_OpTypeName[284:289],
	_OpTypeName[289:295],
	_OpTypeName[295:299],
	_OpTypeName[299:307],
	_OpTypeName[307:311],
	_OpTypeName[311:314],
	_OpTypeName[314:324],
	_OpTypeName[324:332],
	_OpTypeName[332:339],
	_OpTypeName[339:346],
	_OpTypeName[346:354],
	_OpTypeName[354:360],
	_OpTypeName[360:363],
	_OpTypeName[363:365],
	_OpTypeName[365:368],
	_OpTypeName[368:374],
	_OpTypeName[374:379],
	_OpTypeName[379:383],
	_OpTypeName[383:392],
	_OpTypeName[392:398],
	_OpTypeName[398:410],
	_OpTypeName[410:417],
	_OpTypeName[417:424],
	_OpTypeName[424:439],
	_OpTypeName[439:454],
	_OpTypeName[454:470],
	_OpTypeName[470:475],
	_OpTypeName[475:482],
	_OpTypeName[482:488],
	_OpTypeName[488:504],
	_OpTypeName[504:513],
	_OpTypeName[513:533],
	_OpTypeName[533:550],
	_OpTypeName[550:554],
	_OpTypeName[554:558],
	_OpTypeName[558:563],
	_OpTypeName[563:567],
	_OpTypeName[567:575],
	_OpTypeName[575:578],
	_OpTypeName[578:582],
	_OpTypeName[582:591],
	_OpTypeName[591:594],
	_OpTypeName[594:598],
	_OpTypeName[598:606],
	_OpTypeName[606:625],
	_OpTypeName[625:642],
	_OpTypeName[642:651],
	_OpTypeName[651:661],
	_OpTypeName[661:682],
	_OpTypeName[682:693],
	_OpTypeName[693:706],
	_OpTypeName[706:717],
	_OpTypeName[717:727],
	_OpTypeName[727:741],
	_OpTypeName[741:757],
	_OpTypeName[757:772],
	_OpTypeName[772:774],
	_OpTypeName[774:780],
	_OpTypeName[780:799],
	_OpTypeName[799:806],
	_OpTypeName[806:817],
	_OpTypeName[817:821],
	_OpTypeName[821:836],
	_OpTypeName[836:849],
	_OpTypeName[849:853],
	_OpTypeName[853:868],
	_OpTypeName[868:873],
	_OpTypeName[873:890],
	_OpTypeName[890:905],
	_OpTypeName[905:910],
	_OpTypeName[910:914],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
