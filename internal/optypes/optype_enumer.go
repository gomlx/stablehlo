// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 94, 111, 117, 127, 130, 141, 160, 165, 171, 175, 183, 187, 190, 200, 208, 215, 222, 230, 236, 239, 241, 247, 252, 256, 265, 272, 287, 303, 308, 317, 337, 354, 358, 362, 366, 374, 377, 381, 384, 405, 425, 442, 456, 460, 468, 487, 504, 513, 524, 531, 542, 552, 573, 584, 597, 608, 618, 632, 650, 653, 669, 684, 686, 692, 711, 718, 721, 732, 736, 742, 757, 770, 782, 789, 804, 811, 817, 833, 837, 842, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Cosine-(14)]
	_ = x[CountLeadingZeros-(15)]
	_ = x[Divide-(16)]
	_ = x[DotGeneral-(17)]
	_ = x[Erf-(18)]
	_ = x[Exponential-(19)]
	_ = x[ExponentialMinusOne-(20)]
	_ = x[Floor-(21)]
	_ = x[Gather-(22)]
	_ = x[Imag-(23)]
	_ = x[IsFinite-(24)]
	_ = x[Iota-(25)]
	_ = x[Log-(26)]
	_ = x[LogPlusOne-(27)]
	_ = x[Logistic-(28)]
	_ = x[Maximum-(29)]
	_ = x[Minimum-(30)]
	_ = x[Multiply-(31)]
	_ = x[Negate-(32)]
	_ = x[Not-(33)]
	_ = x[Or-(34)]
	_ = x[Popcnt-(35)]
	_ = x[Power-(36)]
	_ = x[Real-(37)]
	_ = x[Remainder-(38)]
	_ = x[Reshape-(39)]
	_ = x[RoundNearestAfz-(40)]
	_ = x[RoundNearestEven-(41)]
	_ = x[Rsqrt-(42)]
	_ = x[ShiftLeft-(43)]
	_ = x[ShiftRightArithmetic-(44)]
	_ = x[ShiftRightLogical-(45)]
	_ = x[Sign-(46)]
	_ = x[Sine-(47)]
	_ = x[Sqrt-(48)]
	_ = x[Subtract-(49)]
	_ = x[Tan-(50)]
	_ = x[Tanh-(51)]
	_ = x[Xor-(52)]
	_ = x[BatchNormForInference-(53)]
	_ = x[BatchNormForTraining-(54)]
	_ = x[BatchNormGradient-(55)]
	_ = x[BitcastConvert-(56)]
	_ = x[Case-(57)]
	_ = x[Cholesky-(58)]
	_ = x[CollectiveBroadcast-(59)]
	_ = x[CollectivePermute-(60)]
	_ = x[Composite-(61)]
	_ = x[Concatenate-(62)]
	_ = x[Convert-(63)]
	_ = x[Convolution-(64)]
	_ = x[CustomCall-(65)]
	_ = x[DynamicBroadcastInDim-(66)]
	_ = x[DynamicConv-(67)]
	_ = x[DynamicGather-(68)]
	_ = x[DynamicIota-(69)]
	_ = x[DynamicPad-(70)]
	_ = x[DynamicReshape-(71)]
	_ = x[DynamicUpdateSlice-(72)]
	_ = x[Fft-(73)]
	_ = x[GetDimensionSize-(74)]
	_ = x[GetTupleElement-(75)]
	_ = x[If-(76)]
	_ = x[Infeed-(77)]
	_ = x[OptimizationBarrier-(78)]
	_ = x[Outfeed-(79)]
	_ = x[Pad-(80)]
	_ = x[PartitionId-(81)]
	_ = x[Recv-(82)]
	_ = x[Reduce-(83)]
	_ = x[ReducePrecision-(84)]
	_ = x[ReduceScatter-(85)]
	_ = x[ReduceWindow-(86)]
	_ = x[Reverse-(87)]
	_ = x[RngBitGenerator-(88)]
	_ = x[Scatter-(89)]
	_ = x[Select-(90)]
	_ = x[SelectAndScatter-(91)]
	_ = x[Send-(92)]
	_ = x[Slice-(93)]
	_ = x[Transpose-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:94]:        Cosine,
	_OpTypeLowerName[88:94]:   Cosine,
	_OpTypeName[94:111]:       CountLeadingZeros,
	_OpTypeLowerName[94:111]:  CountLeadingZeros,
	_OpTypeName[111:117]:      Divide,
	_OpTypeLowerName[111:117]: Divide,
	_OpTypeName[117:127]:      DotGeneral,
	_OpTypeLowerName[117:127]: DotGeneral,
	_OpTypeName[127:130]:      Erf,
	_OpTypeLowerName[127:130]: Erf,
	_OpTypeName[130:141]:      Exponential,
	_OpTypeLowerName[130:141]: Exponential,
	_OpTypeName[141:160]:      ExponentialMinusOne,
	_OpTypeLowerName[141:160]: ExponentialMinusOne,
	_OpTypeName[160:165]:      Floor,
	_OpTypeLowerName[160:165]: Floor,
	_OpTypeName[165:171]:      Gather,
	_OpTypeLowerName[165:171]: Gather,
	_OpTypeName[171:175]:      Imag,
	_OpTypeLowerName[171:175]: Imag,
	_OpTypeName[175:183]:      IsFinite,
	_OpTypeLowerName[175:183]: IsFinite,
	_OpTypeName[183:187]:      Iota,
	_OpTypeLowerName[183:187]: Iota,
	_OpTypeName[187:190]:      Log,
	_OpTypeLowerName[187:190]: Log,
	_OpTypeName[190:200]:      LogPlusOne,
	_OpTypeLowerName[190:200]: LogPlusOne,
	_OpTypeName[200:208]:      Logistic,
	_OpTypeLowerName[200:208]: Logistic,
	_OpTypeName[208:215]:      Maximum,
	_OpTypeLowerName[208:215]: Maximum,
	_OpTypeName[215:222]:      Minimum,
	_OpTypeLowerName[215:222]: Minimum,
	_OpTypeName[222:230]:      Multiply,
	_OpTypeLowerName[222:230]: Multiply,
	_OpTypeName[230:236]:      Negate,
	_OpTypeLowerName[230:236]: Negate,
	_OpTypeName[236:239]:      Not,
	_OpTypeLowerName[236:239]: Not,
	_OpTypeName[239:241]:      Or,
	_OpTypeLowerName[239:241]: Or,
	_OpTypeName[241:247]:      Popcnt,
	_OpTypeLowerName[241:247]: Popcnt,
	_OpTypeName[247:252]:      Power,
	_OpTypeLowerName[247:252]: Power,
	_OpTypeName[252:256]:      Real,
	_OpTypeLowerName[252:256]: Real,
	_OpTypeName[256:265]:      Remainder,
	_OpTypeLowerName[256:265]: Remainder,
	_OpTypeName[265:272]:      Reshape,
	_OpTypeLowerName[265:272]: Reshape,
	_OpTypeName[272:287]:      RoundNearestAfz,
	_OpTypeLowerName[272:287]: RoundNearestAfz,
	_OpTypeName[287:303]:      RoundNearestEven,
	_OpTypeLowerName[287:303]: RoundNearestEven,
	_OpTypeName[303:308]:      Rsqrt,
	_OpTypeLowerName[303:308]: Rsqrt,
	_OpTypeName[308:317]:      ShiftLeft,
	_OpTypeLowerName[308:317]: ShiftLeft,
	_OpTypeName[317:337]:      ShiftRightArithmetic,
	_OpTypeLowerName[317:337]: ShiftRightArithmetic,
	_OpTypeName[337:354]:      ShiftRightLogical,
	_OpTypeLowerName[337:354]: ShiftRightLogical,
	_OpTypeName[354:358]:      Sign,
	_OpTypeLowerName[354:358]: Sign,
	_OpTypeName[358:362]:      Sine,
	_OpTypeLowerName[358:362]: Sine,
	_OpTypeName[362:366]:      Sqrt,
	_OpTypeLowerName[362:366]: Sqrt,
	_OpTypeName[366:374]:      Subtract,
	_OpTypeLowerName[366:374]: Subtract,
	_OpTypeName[374:377]:      Tan,
	_OpTypeLowerName[374:377]: Tan,
	_OpTypeName[377:381]:      Tanh,
	_OpTypeLowerName[377:381]: Tanh,
	_OpTypeName[381:384]:      Xor,
	_OpTypeLowerName[381:384]: Xor,
	_OpTypeName[384:405]:      BatchNormForInference,
	_OpTypeLowerName[384:405]: BatchNormForInference,
	_OpTypeName[405:425]:      BatchNormForTraining,
	_OpTypeLowerName[405:425]: BatchNormForTraining,
	_OpTypeName[425:442]:      BatchNormGradient,
	_OpTypeLowerName[425:442]: BatchNormGradient,
	_OpTypeName[442:456]:      BitcastConvert,
	_OpTypeLowerName[442:456]: BitcastConvert,
	_OpTypeName[456:460]:      Case,
	_OpTypeLowerName[456:460]: Case,
	_OpTypeName[460:468]:      Cholesky,
	_OpTypeLowerName[460:468]: Cholesky,
	_OpTypeName[468:487]:      CollectiveBroadcast,
	_OpTypeLowerName[468:487]: CollectiveBroadcast,
	_OpTypeName[487:504]:      CollectivePermute,
	_OpTypeLowerName[487:504]: CollectivePermute,
	_OpTypeName[504:513]:      Composite,
	_OpTypeLowerName[504:513]: Composite,
	_OpTypeName[513:524]:      Concatenate,
	_OpTypeLowerName[513:524]: Concatenate,
	_OpTypeName[524:531]:      Convert,
	_OpTypeLowerName[524:531]: Convert,
	_OpTypeName[531:542]:      Convolution,
	_OpTypeLowerName[531:542]: Convolution,
	_OpTypeName[542:552]:      CustomCall,
	_OpTypeLowerName[542:552]: CustomCall,
	_OpTypeName[552:573]:      DynamicBroadcastInDim,
	_OpTypeLowerName[552:573]: DynamicBroadcastInDim,
	_OpTypeName[573:584]:      DynamicConv,
	_OpTypeLowerName[573:584]: DynamicConv,
	_OpTypeName[584:597]:      DynamicGather,
	_OpTypeLowerName[584:597]: DynamicGather,
	_OpTypeName[597:608]:      DynamicIota,
	_OpTypeLowerName[597:608]: DynamicIota,
	_OpTypeName[608:618]:      DynamicPad,
	_OpTypeLowerName[608:618]: DynamicPad,
	_OpTypeName[618:632]:      DynamicReshape,
	_OpTypeLowerName[618:632]: DynamicReshape,
	_OpTypeName[632:650]:      DynamicUpdateSlice,
	_OpTypeLowerName[632:650]: DynamicUpdateSlice,
	_OpTypeName[650:653]:      Fft,
	_OpTypeLowerName[650:653]: Fft,
	_OpTypeName[653:669]:      GetDimensionSize,
	_OpTypeLowerName[653:669]: GetDimensionSize,
	_OpTypeName[669:684]:      GetTupleElement,
	_OpTypeLowerName[669:684]: GetTupleElement,
	_OpTypeName[684:686]:      If,
	_OpTypeLowerName[684:686]: If,
	_OpTypeName[686:692]:      Infeed,
	_OpTypeLowerName[686:692]: Infeed,
	_OpTypeName[692:711]:      OptimizationBarrier,
	_OpTypeLowerName[692:711]: OptimizationBarrier,
	_OpTypeName[711:718]:      Outfeed,
	_OpTypeLowerName[711:718]: Outfeed,
	_OpTypeName[718:721]:      Pad,
	_OpTypeLowerName[718:721]: Pad,
	_OpTypeName[721:732]:      PartitionId,
	_OpTypeLowerName[721:732]: PartitionId,
	_OpTypeName[732:736]:      Recv,
	_OpTypeLowerName[732:736]: Recv,
	_OpTypeName[736:742]:      Reduce,
	_OpTypeLowerName[736:742]: Reduce,
	_OpTypeName[742:757]:      ReducePrecision,
	_OpTypeLowerName[742:757]: ReducePrecision,
	_OpTypeName[757:770]:      ReduceScatter,
	_OpTypeLowerName[757:770]: ReduceScatter,
	_OpTypeName[770:782]:      ReduceWindow,
	_OpTypeLowerName[770:782]: ReduceWindow,
	_OpTypeName[782:789]:      Reverse,
	_OpTypeLowerName[782:789]: Reverse,
	_OpTypeName[789:804]:      RngBitGenerator,
	_OpTypeLowerName[789:804]: RngBitGenerator,
	_OpTypeName[804:811]:      Scatter,
	_OpTypeLowerName[804:811]: Scatter,
	_OpTypeName[811:817]:      Select,
	_OpTypeLowerName[811:817]: Select,
	_OpTypeName[817:833]:      SelectAndScatter,
	_OpTypeLowerName[817:833]: SelectAndScatter,
	_OpTypeName[833:837]:      Send,
	_OpTypeLowerName[833:837]: Send,
	_OpTypeName[837:842]:      Slice,
	_OpTypeLowerName[837:842]: Slice,
	_OpTypeName[842:851]:      Transpose,
	_OpTypeLowerName[842:851]: Transpose,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:94],
	_OpTypeName[94:111],
	_OpTypeName[111:117],
	_OpTypeName[117:127],
	_OpTypeName[127:130],
	_OpTypeName[130:141],
	_OpTypeName[141:160],
	_OpTypeName[160:165],
	_OpTypeName[165:171],
	_OpTypeName[171:175],
	_OpTypeName[175:183],
	_OpTypeName[183:187],
	_OpTypeName[187:190],
	_OpTypeName[190:200],
	_OpTypeName[200:208],
	_OpTypeName[208:215],
	_OpTypeName[215:222],
	_OpTypeName[222:230],
	_OpTypeName[230:236],
	_OpTypeName[236:239],
	_OpTypeName[239:241],
	_OpTypeName[241:247],
	_OpTypeName[247:252],
	_OpTypeName[252:256],
	_OpTypeName[256:265],
	_OpTypeName[265:272],
	_OpTypeName[272:287],
	_OpTypeName[287:303],
	_OpTypeName[303:308],
	_OpTypeName[308:317],
	_OpTypeName[317:337],
	_OpTypeName[337:354],
	_OpTypeName[354:358],
	_OpTypeName[358:362],
	_OpTypeName[362:366],
	_OpTypeName[366:374],
	_OpTypeName[374:377],
	_OpTypeName[377:381],
	_OpTypeName[381:384],
	_OpTypeName[384:405],
	_OpTypeName[405:425],
	_OpTypeName[425:442],
	_OpTypeName[442:456],
	_OpTypeName[456:460],
	_OpTypeName[460:468],
	_OpTypeName[468:487],
	_OpTypeName[487:504],
	_OpTypeName[504:513],
	_OpTypeName[513:524],
	_OpTypeName[524:531],
	_OpTypeName[531:542],
	_OpTypeName[542:552],
	_OpTypeName[552:573],
	_OpTypeName[573:584],
	_OpTypeName[584:597],
	_OpTypeName[597:608],
	_OpTypeName[608:618],
	_OpTypeName[618:632],
	_OpTypeName[632:650],
	_OpTypeName[650:653],
	_OpTypeName[653:669],
	_OpTypeName[669:684],
	_OpTypeName[684:686],
	_OpTypeName[686:692],
	_OpTypeName[692:711],
	_OpTypeName[711:718],
	_OpTypeName[718:721],
	_OpTypeName[721:732],
	_OpTypeName[732:736],
	_OpTypeName[736:742],
	_OpTypeName[742:757],
	_OpTypeName[757:770],
	_OpTypeName[770:782],
	_OpTypeName[782:789],
	_OpTypeName[789:804],
	_OpTypeName[804:811],
	_OpTypeName[811:817],
	_OpTypeName[817:833],
	_OpTypeName[833:837],
	_OpTypeName[837:842],
	_OpTypeName[842:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
