// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidParameterFuncReturnConstantIdentityReduceWindowRngBitGeneratorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountAbsAddArgMinMaxBitcastBitwiseAndBitwiseNotBitwiseOrBitwiseXorBroadcastBroadcastInDimCeilClzComplexConcatenateConjConvGeneralDilatedConvertDTypeCosDivDotDotGeneralDynamicSliceDynamicUpdateSliceEqualEqualTotalOrderErfExpExpm1FFTFloorGatherGreaterOrEqualGreaterOrEqualTotalOrderGreaterThanGreaterThanTotalOrderImagIotaIsFiniteLessOrEqualLessOrEqualTotalOrderLessThanLessThanTotalOrderLogLog1pLogicalAndLogicalNotLogicalOrLogicalXorLogisticMaxMinMulNegNotEqualNotEqualTotalOrderPadPowRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumRemReshapeReverseRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSinSliceSqrtSubTanhTransposeWhereLast"

var _OpTypeIndex = [...]uint16{0, 7, 16, 26, 34, 42, 54, 69, 90, 110, 127, 135, 138, 141, 150, 157, 167, 177, 186, 196, 205, 219, 223, 226, 233, 244, 248, 266, 278, 281, 284, 287, 297, 309, 327, 332, 347, 350, 353, 358, 361, 366, 372, 386, 410, 421, 442, 446, 450, 458, 469, 490, 498, 516, 519, 524, 534, 544, 553, 563, 571, 574, 577, 580, 583, 591, 609, 612, 615, 619, 635, 650, 666, 682, 697, 713, 722, 731, 744, 753, 756, 763, 770, 775, 780, 790, 800, 810, 829, 848, 867, 876, 896, 913, 917, 920, 925, 929, 932, 936, 945, 950, 954}

const _OpTypeLowerName = "invalidparameterfuncreturnconstantidentityreducewindowrngbitgeneratorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountabsaddargminmaxbitcastbitwiseandbitwisenotbitwiseorbitwisexorbroadcastbroadcastindimceilclzcomplexconcatenateconjconvgeneraldilatedconvertdtypecosdivdotdotgeneraldynamicslicedynamicupdatesliceequalequaltotalordererfexpexpm1fftfloorgathergreaterorequalgreaterorequaltotalordergreaterthangreaterthantotalorderimagiotaisfinitelessorequallessorequaltotalorderlessthanlessthantotalorderloglog1plogicalandlogicalnotlogicalorlogicalxorlogisticmaxminmulnegnotequalnotequaltotalorderpadpowrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumremreshapereverseroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsinslicesqrtsubtanhtransposewherelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Parameter-(1)]
	_ = x[FuncReturn-(2)]
	_ = x[Constant-(3)]
	_ = x[Identity-(4)]
	_ = x[ReduceWindow-(5)]
	_ = x[RngBitGenerator-(6)]
	_ = x[BatchNormForInference-(7)]
	_ = x[BatchNormForTraining-(8)]
	_ = x[BatchNormGradient-(9)]
	_ = x[BitCount-(10)]
	_ = x[Abs-(11)]
	_ = x[Add-(12)]
	_ = x[ArgMinMax-(13)]
	_ = x[Bitcast-(14)]
	_ = x[BitwiseAnd-(15)]
	_ = x[BitwiseNot-(16)]
	_ = x[BitwiseOr-(17)]
	_ = x[BitwiseXor-(18)]
	_ = x[Broadcast-(19)]
	_ = x[BroadcastInDim-(20)]
	_ = x[Ceil-(21)]
	_ = x[Clz-(22)]
	_ = x[Complex-(23)]
	_ = x[Concatenate-(24)]
	_ = x[Conj-(25)]
	_ = x[ConvGeneralDilated-(26)]
	_ = x[ConvertDType-(27)]
	_ = x[Cos-(28)]
	_ = x[Div-(29)]
	_ = x[Dot-(30)]
	_ = x[DotGeneral-(31)]
	_ = x[DynamicSlice-(32)]
	_ = x[DynamicUpdateSlice-(33)]
	_ = x[Equal-(34)]
	_ = x[EqualTotalOrder-(35)]
	_ = x[Erf-(36)]
	_ = x[Exp-(37)]
	_ = x[Expm1-(38)]
	_ = x[FFT-(39)]
	_ = x[Floor-(40)]
	_ = x[Gather-(41)]
	_ = x[GreaterOrEqual-(42)]
	_ = x[GreaterOrEqualTotalOrder-(43)]
	_ = x[GreaterThan-(44)]
	_ = x[GreaterThanTotalOrder-(45)]
	_ = x[Imag-(46)]
	_ = x[Iota-(47)]
	_ = x[IsFinite-(48)]
	_ = x[LessOrEqual-(49)]
	_ = x[LessOrEqualTotalOrder-(50)]
	_ = x[LessThan-(51)]
	_ = x[LessThanTotalOrder-(52)]
	_ = x[Log-(53)]
	_ = x[Log1p-(54)]
	_ = x[LogicalAnd-(55)]
	_ = x[LogicalNot-(56)]
	_ = x[LogicalOr-(57)]
	_ = x[LogicalXor-(58)]
	_ = x[Logistic-(59)]
	_ = x[Max-(60)]
	_ = x[Min-(61)]
	_ = x[Mul-(62)]
	_ = x[Neg-(63)]
	_ = x[NotEqual-(64)]
	_ = x[NotEqualTotalOrder-(65)]
	_ = x[Pad-(66)]
	_ = x[Pow-(67)]
	_ = x[Real-(68)]
	_ = x[ReduceBitwiseAnd-(69)]
	_ = x[ReduceBitwiseOr-(70)]
	_ = x[ReduceBitwiseXor-(71)]
	_ = x[ReduceLogicalAnd-(72)]
	_ = x[ReduceLogicalOr-(73)]
	_ = x[ReduceLogicalXor-(74)]
	_ = x[ReduceMax-(75)]
	_ = x[ReduceMin-(76)]
	_ = x[ReduceProduct-(77)]
	_ = x[ReduceSum-(78)]
	_ = x[Rem-(79)]
	_ = x[Reshape-(80)]
	_ = x[Reverse-(81)]
	_ = x[Round-(82)]
	_ = x[Rsqrt-(83)]
	_ = x[ScatterMax-(84)]
	_ = x[ScatterMin-(85)]
	_ = x[ScatterSum-(86)]
	_ = x[SelectAndScatterMax-(87)]
	_ = x[SelectAndScatterMin-(88)]
	_ = x[SelectAndScatterSum-(89)]
	_ = x[ShiftLeft-(90)]
	_ = x[ShiftRightArithmetic-(91)]
	_ = x[ShiftRightLogical-(92)]
	_ = x[Sign-(93)]
	_ = x[Sin-(94)]
	_ = x[Slice-(95)]
	_ = x[Sqrt-(96)]
	_ = x[Sub-(97)]
	_ = x[Tanh-(98)]
	_ = x[Transpose-(99)]
	_ = x[Where-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, Parameter, FuncReturn, Constant, Identity, ReduceWindow, RngBitGenerator, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitCount, Abs, Add, ArgMinMax, Bitcast, BitwiseAnd, BitwiseNot, BitwiseOr, BitwiseXor, Broadcast, BroadcastInDim, Ceil, Clz, Complex, Concatenate, Conj, ConvGeneralDilated, ConvertDType, Cos, Div, Dot, DotGeneral, DynamicSlice, DynamicUpdateSlice, Equal, EqualTotalOrder, Erf, Exp, Expm1, FFT, Floor, Gather, GreaterOrEqual, GreaterOrEqualTotalOrder, GreaterThan, GreaterThanTotalOrder, Imag, Iota, IsFinite, LessOrEqual, LessOrEqualTotalOrder, LessThan, LessThanTotalOrder, Log, Log1p, LogicalAnd, LogicalNot, LogicalOr, LogicalXor, Logistic, Max, Min, Mul, Neg, NotEqual, NotEqualTotalOrder, Pad, Pow, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, Rem, Reshape, Reverse, Round, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sin, Slice, Sqrt, Sub, Tanh, Transpose, Where, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:16]:         Parameter,
	_OpTypeLowerName[7:16]:    Parameter,
	_OpTypeName[16:26]:        FuncReturn,
	_OpTypeLowerName[16:26]:   FuncReturn,
	_OpTypeName[26:34]:        Constant,
	_OpTypeLowerName[26:34]:   Constant,
	_OpTypeName[34:42]:        Identity,
	_OpTypeLowerName[34:42]:   Identity,
	_OpTypeName[42:54]:        ReduceWindow,
	_OpTypeLowerName[42:54]:   ReduceWindow,
	_OpTypeName[54:69]:        RngBitGenerator,
	_OpTypeLowerName[54:69]:   RngBitGenerator,
	_OpTypeName[69:90]:        BatchNormForInference,
	_OpTypeLowerName[69:90]:   BatchNormForInference,
	_OpTypeName[90:110]:       BatchNormForTraining,
	_OpTypeLowerName[90:110]:  BatchNormForTraining,
	_OpTypeName[110:127]:      BatchNormGradient,
	_OpTypeLowerName[110:127]: BatchNormGradient,
	_OpTypeName[127:135]:      BitCount,
	_OpTypeLowerName[127:135]: BitCount,
	_OpTypeName[135:138]:      Abs,
	_OpTypeLowerName[135:138]: Abs,
	_OpTypeName[138:141]:      Add,
	_OpTypeLowerName[138:141]: Add,
	_OpTypeName[141:150]:      ArgMinMax,
	_OpTypeLowerName[141:150]: ArgMinMax,
	_OpTypeName[150:157]:      Bitcast,
	_OpTypeLowerName[150:157]: Bitcast,
	_OpTypeName[157:167]:      BitwiseAnd,
	_OpTypeLowerName[157:167]: BitwiseAnd,
	_OpTypeName[167:177]:      BitwiseNot,
	_OpTypeLowerName[167:177]: BitwiseNot,
	_OpTypeName[177:186]:      BitwiseOr,
	_OpTypeLowerName[177:186]: BitwiseOr,
	_OpTypeName[186:196]:      BitwiseXor,
	_OpTypeLowerName[186:196]: BitwiseXor,
	_OpTypeName[196:205]:      Broadcast,
	_OpTypeLowerName[196:205]: Broadcast,
	_OpTypeName[205:219]:      BroadcastInDim,
	_OpTypeLowerName[205:219]: BroadcastInDim,
	_OpTypeName[219:223]:      Ceil,
	_OpTypeLowerName[219:223]: Ceil,
	_OpTypeName[223:226]:      Clz,
	_OpTypeLowerName[223:226]: Clz,
	_OpTypeName[226:233]:      Complex,
	_OpTypeLowerName[226:233]: Complex,
	_OpTypeName[233:244]:      Concatenate,
	_OpTypeLowerName[233:244]: Concatenate,
	_OpTypeName[244:248]:      Conj,
	_OpTypeLowerName[244:248]: Conj,
	_OpTypeName[248:266]:      ConvGeneralDilated,
	_OpTypeLowerName[248:266]: ConvGeneralDilated,
	_OpTypeName[266:278]:      ConvertDType,
	_OpTypeLowerName[266:278]: ConvertDType,
	_OpTypeName[278:281]:      Cos,
	_OpTypeLowerName[278:281]: Cos,
	_OpTypeName[281:284]:      Div,
	_OpTypeLowerName[281:284]: Div,
	_OpTypeName[284:287]:      Dot,
	_OpTypeLowerName[284:287]: Dot,
	_OpTypeName[287:297]:      DotGeneral,
	_OpTypeLowerName[287:297]: DotGeneral,
	_OpTypeName[297:309]:      DynamicSlice,
	_OpTypeLowerName[297:309]: DynamicSlice,
	_OpTypeName[309:327]:      DynamicUpdateSlice,
	_OpTypeLowerName[309:327]: DynamicUpdateSlice,
	_OpTypeName[327:332]:      Equal,
	_OpTypeLowerName[327:332]: Equal,
	_OpTypeName[332:347]:      EqualTotalOrder,
	_OpTypeLowerName[332:347]: EqualTotalOrder,
	_OpTypeName[347:350]:      Erf,
	_OpTypeLowerName[347:350]: Erf,
	_OpTypeName[350:353]:      Exp,
	_OpTypeLowerName[350:353]: Exp,
	_OpTypeName[353:358]:      Expm1,
	_OpTypeLowerName[353:358]: Expm1,
	_OpTypeName[358:361]:      FFT,
	_OpTypeLowerName[358:361]: FFT,
	_OpTypeName[361:366]:      Floor,
	_OpTypeLowerName[361:366]: Floor,
	_OpTypeName[366:372]:      Gather,
	_OpTypeLowerName[366:372]: Gather,
	_OpTypeName[372:386]:      GreaterOrEqual,
	_OpTypeLowerName[372:386]: GreaterOrEqual,
	_OpTypeName[386:410]:      GreaterOrEqualTotalOrder,
	_OpTypeLowerName[386:410]: GreaterOrEqualTotalOrder,
	_OpTypeName[410:421]:      GreaterThan,
	_OpTypeLowerName[410:421]: GreaterThan,
	_OpTypeName[421:442]:      GreaterThanTotalOrder,
	_OpTypeLowerName[421:442]: GreaterThanTotalOrder,
	_OpTypeName[442:446]:      Imag,
	_OpTypeLowerName[442:446]: Imag,
	_OpTypeName[446:450]:      Iota,
	_OpTypeLowerName[446:450]: Iota,
	_OpTypeName[450:458]:      IsFinite,
	_OpTypeLowerName[450:458]: IsFinite,
	_OpTypeName[458:469]:      LessOrEqual,
	_OpTypeLowerName[458:469]: LessOrEqual,
	_OpTypeName[469:490]:      LessOrEqualTotalOrder,
	_OpTypeLowerName[469:490]: LessOrEqualTotalOrder,
	_OpTypeName[490:498]:      LessThan,
	_OpTypeLowerName[490:498]: LessThan,
	_OpTypeName[498:516]:      LessThanTotalOrder,
	_OpTypeLowerName[498:516]: LessThanTotalOrder,
	_OpTypeName[516:519]:      Log,
	_OpTypeLowerName[516:519]: Log,
	_OpTypeName[519:524]:      Log1p,
	_OpTypeLowerName[519:524]: Log1p,
	_OpTypeName[524:534]:      LogicalAnd,
	_OpTypeLowerName[524:534]: LogicalAnd,
	_OpTypeName[534:544]:      LogicalNot,
	_OpTypeLowerName[534:544]: LogicalNot,
	_OpTypeName[544:553]:      LogicalOr,
	_OpTypeLowerName[544:553]: LogicalOr,
	_OpTypeName[553:563]:      LogicalXor,
	_OpTypeLowerName[553:563]: LogicalXor,
	_OpTypeName[563:571]:      Logistic,
	_OpTypeLowerName[563:571]: Logistic,
	_OpTypeName[571:574]:      Max,
	_OpTypeLowerName[571:574]: Max,
	_OpTypeName[574:577]:      Min,
	_OpTypeLowerName[574:577]: Min,
	_OpTypeName[577:580]:      Mul,
	_OpTypeLowerName[577:580]: Mul,
	_OpTypeName[580:583]:      Neg,
	_OpTypeLowerName[580:583]: Neg,
	_OpTypeName[583:591]:      NotEqual,
	_OpTypeLowerName[583:591]: NotEqual,
	_OpTypeName[591:609]:      NotEqualTotalOrder,
	_OpTypeLowerName[591:609]: NotEqualTotalOrder,
	_OpTypeName[609:612]:      Pad,
	_OpTypeLowerName[609:612]: Pad,
	_OpTypeName[612:615]:      Pow,
	_OpTypeLowerName[612:615]: Pow,
	_OpTypeName[615:619]:      Real,
	_OpTypeLowerName[615:619]: Real,
	_OpTypeName[619:635]:      ReduceBitwiseAnd,
	_OpTypeLowerName[619:635]: ReduceBitwiseAnd,
	_OpTypeName[635:650]:      ReduceBitwiseOr,
	_OpTypeLowerName[635:650]: ReduceBitwiseOr,
	_OpTypeName[650:666]:      ReduceBitwiseXor,
	_OpTypeLowerName[650:666]: ReduceBitwiseXor,
	_OpTypeName[666:682]:      ReduceLogicalAnd,
	_OpTypeLowerName[666:682]: ReduceLogicalAnd,
	_OpTypeName[682:697]:      ReduceLogicalOr,
	_OpTypeLowerName[682:697]: ReduceLogicalOr,
	_OpTypeName[697:713]:      ReduceLogicalXor,
	_OpTypeLowerName[697:713]: ReduceLogicalXor,
	_OpTypeName[713:722]:      ReduceMax,
	_OpTypeLowerName[713:722]: ReduceMax,
	_OpTypeName[722:731]:      ReduceMin,
	_OpTypeLowerName[722:731]: ReduceMin,
	_OpTypeName[731:744]:      ReduceProduct,
	_OpTypeLowerName[731:744]: ReduceProduct,
	_OpTypeName[744:753]:      ReduceSum,
	_OpTypeLowerName[744:753]: ReduceSum,
	_OpTypeName[753:756]:      Rem,
	_OpTypeLowerName[753:756]: Rem,
	_OpTypeName[756:763]:      Reshape,
	_OpTypeLowerName[756:763]: Reshape,
	_OpTypeName[763:770]:      Reverse,
	_OpTypeLowerName[763:770]: Reverse,
	_OpTypeName[770:775]:      Round,
	_OpTypeLowerName[770:775]: Round,
	_OpTypeName[775:780]:      Rsqrt,
	_OpTypeLowerName[775:780]: Rsqrt,
	_OpTypeName[780:790]:      ScatterMax,
	_OpTypeLowerName[780:790]: ScatterMax,
	_OpTypeName[790:800]:      ScatterMin,
	_OpTypeLowerName[790:800]: ScatterMin,
	_OpTypeName[800:810]:      ScatterSum,
	_OpTypeLowerName[800:810]: ScatterSum,
	_OpTypeName[810:829]:      SelectAndScatterMax,
	_OpTypeLowerName[810:829]: SelectAndScatterMax,
	_OpTypeName[829:848]:      SelectAndScatterMin,
	_OpTypeLowerName[829:848]: SelectAndScatterMin,
	_OpTypeName[848:867]:      SelectAndScatterSum,
	_OpTypeLowerName[848:867]: SelectAndScatterSum,
	_OpTypeName[867:876]:      ShiftLeft,
	_OpTypeLowerName[867:876]: ShiftLeft,
	_OpTypeName[876:896]:      ShiftRightArithmetic,
	_OpTypeLowerName[876:896]: ShiftRightArithmetic,
	_OpTypeName[896:913]:      ShiftRightLogical,
	_OpTypeLowerName[896:913]: ShiftRightLogical,
	_OpTypeName[913:917]:      Sign,
	_OpTypeLowerName[913:917]: Sign,
	_OpTypeName[917:920]:      Sin,
	_OpTypeLowerName[917:920]: Sin,
	_OpTypeName[920:925]:      Slice,
	_OpTypeLowerName[920:925]: Slice,
	_OpTypeName[925:929]:      Sqrt,
	_OpTypeLowerName[925:929]: Sqrt,
	_OpTypeName[929:932]:      Sub,
	_OpTypeLowerName[929:932]: Sub,
	_OpTypeName[932:936]:      Tanh,
	_OpTypeLowerName[932:936]: Tanh,
	_OpTypeName[936:945]:      Transpose,
	_OpTypeLowerName[936:945]: Transpose,
	_OpTypeName[945:950]:      Where,
	_OpTypeLowerName[945:950]: Where,
	_OpTypeName[950:954]:      Last,
	_OpTypeLowerName[950:954]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:16],
	_OpTypeName[16:26],
	_OpTypeName[26:34],
	_OpTypeName[34:42],
	_OpTypeName[42:54],
	_OpTypeName[54:69],
	_OpTypeName[69:90],
	_OpTypeName[90:110],
	_OpTypeName[110:127],
	_OpTypeName[127:135],
	_OpTypeName[135:138],
	_OpTypeName[138:141],
	_OpTypeName[141:150],
	_OpTypeName[150:157],
	_OpTypeName[157:167],
	_OpTypeName[167:177],
	_OpTypeName[177:186],
	_OpTypeName[186:196],
	_OpTypeName[196:205],
	_OpTypeName[205:219],
	_OpTypeName[219:223],
	_OpTypeName[223:226],
	_OpTypeName[226:233],
	_OpTypeName[233:244],
	_OpTypeName[244:248],
	_OpTypeName[248:266],
	_OpTypeName[266:278],
	_OpTypeName[278:281],
	_OpTypeName[281:284],
	_OpTypeName[284:287],
	_OpTypeName[287:297],
	_OpTypeName[297:309],
	_OpTypeName[309:327],
	_OpTypeName[327:332],
	_OpTypeName[332:347],
	_OpTypeName[347:350],
	_OpTypeName[350:353],
	_OpTypeName[353:358],
	_OpTypeName[358:361],
	_OpTypeName[361:366],
	_OpTypeName[366:372],
	_OpTypeName[372:386],
	_OpTypeName[386:410],
	_OpTypeName[410:421],
	_OpTypeName[421:442],
	_OpTypeName[442:446],
	_OpTypeName[446:450],
	_OpTypeName[450:458],
	_OpTypeName[458:469],
	_OpTypeName[469:490],
	_OpTypeName[490:498],
	_OpTypeName[498:516],
	_OpTypeName[516:519],
	_OpTypeName[519:524],
	_OpTypeName[524:534],
	_OpTypeName[534:544],
	_OpTypeName[544:553],
	_OpTypeName[553:563],
	_OpTypeName[563:571],
	_OpTypeName[571:574],
	_OpTypeName[574:577],
	_OpTypeName[577:580],
	_OpTypeName[580:583],
	_OpTypeName[583:591],
	_OpTypeName[591:609],
	_OpTypeName[609:612],
	_OpTypeName[612:615],
	_OpTypeName[615:619],
	_OpTypeName[619:635],
	_OpTypeName[635:650],
	_OpTypeName[650:666],
	_OpTypeName[666:682],
	_OpTypeName[682:697],
	_OpTypeName[697:713],
	_OpTypeName[713:722],
	_OpTypeName[722:731],
	_OpTypeName[731:744],
	_OpTypeName[744:753],
	_OpTypeName[753:756],
	_OpTypeName[756:763],
	_OpTypeName[763:770],
	_OpTypeName[770:775],
	_OpTypeName[775:780],
	_OpTypeName[780:790],
	_OpTypeName[790:800],
	_OpTypeName[800:810],
	_OpTypeName[810:829],
	_OpTypeName[829:848],
	_OpTypeName[848:867],
	_OpTypeName[867:876],
	_OpTypeName[876:896],
	_OpTypeName[896:913],
	_OpTypeName[913:917],
	_OpTypeName[917:920],
	_OpTypeName[920:925],
	_OpTypeName[925:929],
	_OpTypeName[929:932],
	_OpTypeName[932:936],
	_OpTypeName[936:945],
	_OpTypeName[945:950],
	_OpTypeName[950:954],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
