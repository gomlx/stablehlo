// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BroadcastInDimCbrtCeilClampCompareComplexConcatenateCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReduceReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 65, 69, 74, 81, 88, 99, 105, 122, 128, 138, 141, 152, 171, 176, 182, 186, 194, 198, 201, 211, 219, 226, 233, 241, 247, 250, 252, 258, 263, 267, 276, 282, 289, 304, 320, 325, 334, 354, 371, 375, 379, 384, 388, 396, 399, 403, 406, 427, 447, 464, 478, 482, 490, 509, 526, 535, 542, 553, 563, 584, 595, 608, 619, 629, 643, 661, 664, 680, 695, 697, 703, 722, 729, 732, 743, 747, 762, 775, 787, 794, 809, 816, 822, 838, 842, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2broadcastindimcbrtceilclampcomparecomplexconcatenatecosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreducereshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhxorbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertcasecholeskycollectivebroadcastcollectivepermutecompositeconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendtransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BroadcastInDim-(8)]
	_ = x[Cbrt-(9)]
	_ = x[Ceil-(10)]
	_ = x[Clamp-(11)]
	_ = x[Compare-(12)]
	_ = x[Complex-(13)]
	_ = x[Concatenate-(14)]
	_ = x[Cosine-(15)]
	_ = x[CountLeadingZeros-(16)]
	_ = x[Divide-(17)]
	_ = x[DotGeneral-(18)]
	_ = x[Erf-(19)]
	_ = x[Exponential-(20)]
	_ = x[ExponentialMinusOne-(21)]
	_ = x[Floor-(22)]
	_ = x[Gather-(23)]
	_ = x[Imag-(24)]
	_ = x[IsFinite-(25)]
	_ = x[Iota-(26)]
	_ = x[Log-(27)]
	_ = x[LogPlusOne-(28)]
	_ = x[Logistic-(29)]
	_ = x[Maximum-(30)]
	_ = x[Minimum-(31)]
	_ = x[Multiply-(32)]
	_ = x[Negate-(33)]
	_ = x[Not-(34)]
	_ = x[Or-(35)]
	_ = x[Popcnt-(36)]
	_ = x[Power-(37)]
	_ = x[Real-(38)]
	_ = x[Remainder-(39)]
	_ = x[Reduce-(40)]
	_ = x[Reshape-(41)]
	_ = x[RoundNearestAfz-(42)]
	_ = x[RoundNearestEven-(43)]
	_ = x[Rsqrt-(44)]
	_ = x[ShiftLeft-(45)]
	_ = x[ShiftRightArithmetic-(46)]
	_ = x[ShiftRightLogical-(47)]
	_ = x[Sign-(48)]
	_ = x[Sine-(49)]
	_ = x[Slice-(50)]
	_ = x[Sqrt-(51)]
	_ = x[Subtract-(52)]
	_ = x[Tan-(53)]
	_ = x[Tanh-(54)]
	_ = x[Xor-(55)]
	_ = x[BatchNormForInference-(56)]
	_ = x[BatchNormForTraining-(57)]
	_ = x[BatchNormGradient-(58)]
	_ = x[BitcastConvert-(59)]
	_ = x[Case-(60)]
	_ = x[Cholesky-(61)]
	_ = x[CollectiveBroadcast-(62)]
	_ = x[CollectivePermute-(63)]
	_ = x[Composite-(64)]
	_ = x[Convert-(65)]
	_ = x[Convolution-(66)]
	_ = x[CustomCall-(67)]
	_ = x[DynamicBroadcastInDim-(68)]
	_ = x[DynamicConv-(69)]
	_ = x[DynamicGather-(70)]
	_ = x[DynamicIota-(71)]
	_ = x[DynamicPad-(72)]
	_ = x[DynamicReshape-(73)]
	_ = x[DynamicUpdateSlice-(74)]
	_ = x[Fft-(75)]
	_ = x[GetDimensionSize-(76)]
	_ = x[GetTupleElement-(77)]
	_ = x[If-(78)]
	_ = x[Infeed-(79)]
	_ = x[OptimizationBarrier-(80)]
	_ = x[Outfeed-(81)]
	_ = x[Pad-(82)]
	_ = x[PartitionId-(83)]
	_ = x[Recv-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Transpose-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reduce, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BroadcastInDim,
	_OpTypeLowerName[47:61]:   BroadcastInDim,
	_OpTypeName[61:65]:        Cbrt,
	_OpTypeLowerName[61:65]:   Cbrt,
	_OpTypeName[65:69]:        Ceil,
	_OpTypeLowerName[65:69]:   Ceil,
	_OpTypeName[69:74]:        Clamp,
	_OpTypeLowerName[69:74]:   Clamp,
	_OpTypeName[74:81]:        Compare,
	_OpTypeLowerName[74:81]:   Compare,
	_OpTypeName[81:88]:        Complex,
	_OpTypeLowerName[81:88]:   Complex,
	_OpTypeName[88:99]:        Concatenate,
	_OpTypeLowerName[88:99]:   Concatenate,
	_OpTypeName[99:105]:       Cosine,
	_OpTypeLowerName[99:105]:  Cosine,
	_OpTypeName[105:122]:      CountLeadingZeros,
	_OpTypeLowerName[105:122]: CountLeadingZeros,
	_OpTypeName[122:128]:      Divide,
	_OpTypeLowerName[122:128]: Divide,
	_OpTypeName[128:138]:      DotGeneral,
	_OpTypeLowerName[128:138]: DotGeneral,
	_OpTypeName[138:141]:      Erf,
	_OpTypeLowerName[138:141]: Erf,
	_OpTypeName[141:152]:      Exponential,
	_OpTypeLowerName[141:152]: Exponential,
	_OpTypeName[152:171]:      ExponentialMinusOne,
	_OpTypeLowerName[152:171]: ExponentialMinusOne,
	_OpTypeName[171:176]:      Floor,
	_OpTypeLowerName[171:176]: Floor,
	_OpTypeName[176:182]:      Gather,
	_OpTypeLowerName[176:182]: Gather,
	_OpTypeName[182:186]:      Imag,
	_OpTypeLowerName[182:186]: Imag,
	_OpTypeName[186:194]:      IsFinite,
	_OpTypeLowerName[186:194]: IsFinite,
	_OpTypeName[194:198]:      Iota,
	_OpTypeLowerName[194:198]: Iota,
	_OpTypeName[198:201]:      Log,
	_OpTypeLowerName[198:201]: Log,
	_OpTypeName[201:211]:      LogPlusOne,
	_OpTypeLowerName[201:211]: LogPlusOne,
	_OpTypeName[211:219]:      Logistic,
	_OpTypeLowerName[211:219]: Logistic,
	_OpTypeName[219:226]:      Maximum,
	_OpTypeLowerName[219:226]: Maximum,
	_OpTypeName[226:233]:      Minimum,
	_OpTypeLowerName[226:233]: Minimum,
	_OpTypeName[233:241]:      Multiply,
	_OpTypeLowerName[233:241]: Multiply,
	_OpTypeName[241:247]:      Negate,
	_OpTypeLowerName[241:247]: Negate,
	_OpTypeName[247:250]:      Not,
	_OpTypeLowerName[247:250]: Not,
	_OpTypeName[250:252]:      Or,
	_OpTypeLowerName[250:252]: Or,
	_OpTypeName[252:258]:      Popcnt,
	_OpTypeLowerName[252:258]: Popcnt,
	_OpTypeName[258:263]:      Power,
	_OpTypeLowerName[258:263]: Power,
	_OpTypeName[263:267]:      Real,
	_OpTypeLowerName[263:267]: Real,
	_OpTypeName[267:276]:      Remainder,
	_OpTypeLowerName[267:276]: Remainder,
	_OpTypeName[276:282]:      Reduce,
	_OpTypeLowerName[276:282]: Reduce,
	_OpTypeName[282:289]:      Reshape,
	_OpTypeLowerName[282:289]: Reshape,
	_OpTypeName[289:304]:      RoundNearestAfz,
	_OpTypeLowerName[289:304]: RoundNearestAfz,
	_OpTypeName[304:320]:      RoundNearestEven,
	_OpTypeLowerName[304:320]: RoundNearestEven,
	_OpTypeName[320:325]:      Rsqrt,
	_OpTypeLowerName[320:325]: Rsqrt,
	_OpTypeName[325:334]:      ShiftLeft,
	_OpTypeLowerName[325:334]: ShiftLeft,
	_OpTypeName[334:354]:      ShiftRightArithmetic,
	_OpTypeLowerName[334:354]: ShiftRightArithmetic,
	_OpTypeName[354:371]:      ShiftRightLogical,
	_OpTypeLowerName[354:371]: ShiftRightLogical,
	_OpTypeName[371:375]:      Sign,
	_OpTypeLowerName[371:375]: Sign,
	_OpTypeName[375:379]:      Sine,
	_OpTypeLowerName[375:379]: Sine,
	_OpTypeName[379:384]:      Slice,
	_OpTypeLowerName[379:384]: Slice,
	_OpTypeName[384:388]:      Sqrt,
	_OpTypeLowerName[384:388]: Sqrt,
	_OpTypeName[388:396]:      Subtract,
	_OpTypeLowerName[388:396]: Subtract,
	_OpTypeName[396:399]:      Tan,
	_OpTypeLowerName[396:399]: Tan,
	_OpTypeName[399:403]:      Tanh,
	_OpTypeLowerName[399:403]: Tanh,
	_OpTypeName[403:406]:      Xor,
	_OpTypeLowerName[403:406]: Xor,
	_OpTypeName[406:427]:      BatchNormForInference,
	_OpTypeLowerName[406:427]: BatchNormForInference,
	_OpTypeName[427:447]:      BatchNormForTraining,
	_OpTypeLowerName[427:447]: BatchNormForTraining,
	_OpTypeName[447:464]:      BatchNormGradient,
	_OpTypeLowerName[447:464]: BatchNormGradient,
	_OpTypeName[464:478]:      BitcastConvert,
	_OpTypeLowerName[464:478]: BitcastConvert,
	_OpTypeName[478:482]:      Case,
	_OpTypeLowerName[478:482]: Case,
	_OpTypeName[482:490]:      Cholesky,
	_OpTypeLowerName[482:490]: Cholesky,
	_OpTypeName[490:509]:      CollectiveBroadcast,
	_OpTypeLowerName[490:509]: CollectiveBroadcast,
	_OpTypeName[509:526]:      CollectivePermute,
	_OpTypeLowerName[509:526]: CollectivePermute,
	_OpTypeName[526:535]:      Composite,
	_OpTypeLowerName[526:535]: Composite,
	_OpTypeName[535:542]:      Convert,
	_OpTypeLowerName[535:542]: Convert,
	_OpTypeName[542:553]:      Convolution,
	_OpTypeLowerName[542:553]: Convolution,
	_OpTypeName[553:563]:      CustomCall,
	_OpTypeLowerName[553:563]: CustomCall,
	_OpTypeName[563:584]:      DynamicBroadcastInDim,
	_OpTypeLowerName[563:584]: DynamicBroadcastInDim,
	_OpTypeName[584:595]:      DynamicConv,
	_OpTypeLowerName[584:595]: DynamicConv,
	_OpTypeName[595:608]:      DynamicGather,
	_OpTypeLowerName[595:608]: DynamicGather,
	_OpTypeName[608:619]:      DynamicIota,
	_OpTypeLowerName[608:619]: DynamicIota,
	_OpTypeName[619:629]:      DynamicPad,
	_OpTypeLowerName[619:629]: DynamicPad,
	_OpTypeName[629:643]:      DynamicReshape,
	_OpTypeLowerName[629:643]: DynamicReshape,
	_OpTypeName[643:661]:      DynamicUpdateSlice,
	_OpTypeLowerName[643:661]: DynamicUpdateSlice,
	_OpTypeName[661:664]:      Fft,
	_OpTypeLowerName[661:664]: Fft,
	_OpTypeName[664:680]:      GetDimensionSize,
	_OpTypeLowerName[664:680]: GetDimensionSize,
	_OpTypeName[680:695]:      GetTupleElement,
	_OpTypeLowerName[680:695]: GetTupleElement,
	_OpTypeName[695:697]:      If,
	_OpTypeLowerName[695:697]: If,
	_OpTypeName[697:703]:      Infeed,
	_OpTypeLowerName[697:703]: Infeed,
	_OpTypeName[703:722]:      OptimizationBarrier,
	_OpTypeLowerName[703:722]: OptimizationBarrier,
	_OpTypeName[722:729]:      Outfeed,
	_OpTypeLowerName[722:729]: Outfeed,
	_OpTypeName[729:732]:      Pad,
	_OpTypeLowerName[729:732]: Pad,
	_OpTypeName[732:743]:      PartitionId,
	_OpTypeLowerName[732:743]: PartitionId,
	_OpTypeName[743:747]:      Recv,
	_OpTypeLowerName[743:747]: Recv,
	_OpTypeName[747:762]:      ReducePrecision,
	_OpTypeLowerName[747:762]: ReducePrecision,
	_OpTypeName[762:775]:      ReduceScatter,
	_OpTypeLowerName[762:775]: ReduceScatter,
	_OpTypeName[775:787]:      ReduceWindow,
	_OpTypeLowerName[775:787]: ReduceWindow,
	_OpTypeName[787:794]:      Reverse,
	_OpTypeLowerName[787:794]: Reverse,
	_OpTypeName[794:809]:      RngBitGenerator,
	_OpTypeLowerName[794:809]: RngBitGenerator,
	_OpTypeName[809:816]:      Scatter,
	_OpTypeLowerName[809:816]: Scatter,
	_OpTypeName[816:822]:      Select,
	_OpTypeLowerName[816:822]: Select,
	_OpTypeName[822:838]:      SelectAndScatter,
	_OpTypeLowerName[822:838]: SelectAndScatter,
	_OpTypeName[838:842]:      Send,
	_OpTypeLowerName[838:842]: Send,
	_OpTypeName[842:851]:      Transpose,
	_OpTypeLowerName[842:851]: Transpose,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:65],
	_OpTypeName[65:69],
	_OpTypeName[69:74],
	_OpTypeName[74:81],
	_OpTypeName[81:88],
	_OpTypeName[88:99],
	_OpTypeName[99:105],
	_OpTypeName[105:122],
	_OpTypeName[122:128],
	_OpTypeName[128:138],
	_OpTypeName[138:141],
	_OpTypeName[141:152],
	_OpTypeName[152:171],
	_OpTypeName[171:176],
	_OpTypeName[176:182],
	_OpTypeName[182:186],
	_OpTypeName[186:194],
	_OpTypeName[194:198],
	_OpTypeName[198:201],
	_OpTypeName[201:211],
	_OpTypeName[211:219],
	_OpTypeName[219:226],
	_OpTypeName[226:233],
	_OpTypeName[233:241],
	_OpTypeName[241:247],
	_OpTypeName[247:250],
	_OpTypeName[250:252],
	_OpTypeName[252:258],
	_OpTypeName[258:263],
	_OpTypeName[263:267],
	_OpTypeName[267:276],
	_OpTypeName[276:282],
	_OpTypeName[282:289],
	_OpTypeName[289:304],
	_OpTypeName[304:320],
	_OpTypeName[320:325],
	_OpTypeName[325:334],
	_OpTypeName[334:354],
	_OpTypeName[354:371],
	_OpTypeName[371:375],
	_OpTypeName[375:379],
	_OpTypeName[379:384],
	_OpTypeName[384:388],
	_OpTypeName[388:396],
	_OpTypeName[396:399],
	_OpTypeName[399:403],
	_OpTypeName[403:406],
	_OpTypeName[406:427],
	_OpTypeName[427:447],
	_OpTypeName[447:464],
	_OpTypeName[464:478],
	_OpTypeName[478:482],
	_OpTypeName[482:490],
	_OpTypeName[490:509],
	_OpTypeName[509:526],
	_OpTypeName[526:535],
	_OpTypeName[535:542],
	_OpTypeName[542:553],
	_OpTypeName[553:563],
	_OpTypeName[563:584],
	_OpTypeName[584:595],
	_OpTypeName[595:608],
	_OpTypeName[608:619],
	_OpTypeName[619:629],
	_OpTypeName[629:643],
	_OpTypeName[643:661],
	_OpTypeName[661:664],
	_OpTypeName[664:680],
	_OpTypeName[680:695],
	_OpTypeName[695:697],
	_OpTypeName[697:703],
	_OpTypeName[703:722],
	_OpTypeName[722:729],
	_OpTypeName[729:732],
	_OpTypeName[732:743],
	_OpTypeName[743:747],
	_OpTypeName[747:762],
	_OpTypeName[762:775],
	_OpTypeName[775:787],
	_OpTypeName[787:794],
	_OpTypeName[794:809],
	_OpTypeName[809:816],
	_OpTypeName[816:822],
	_OpTypeName[822:838],
	_OpTypeName[838:842],
	_OpTypeName[842:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
