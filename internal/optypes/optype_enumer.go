// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndArgMinMaxAtan2BatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastBroadcastBroadcastInDimCbrtCeilCompareConjCosineCountLeadingZerosDivideErfExponentialExponentialMinusOneFloorImagIotaIsFiniteLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemainderReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeWhereXorLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 51, 56, 77, 97, 114, 121, 130, 144, 148, 152, 159, 163, 169, 186, 192, 195, 206, 225, 230, 234, 238, 246, 249, 259, 267, 274, 281, 289, 295, 298, 300, 303, 309, 314, 318, 334, 349, 365, 381, 396, 412, 421, 430, 443, 452, 464, 473, 480, 487, 502, 517, 533, 538, 548, 558, 568, 587, 606, 625, 634, 654, 671, 675, 679, 684, 688, 696, 699, 703, 712, 717, 720, 724}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandargminmaxatan2batchnormforinferencebatchnormfortrainingbatchnormgradientbitcastbroadcastbroadcastindimcbrtceilcompareconjcosinecountleadingzerosdivideerfexponentialexponentialminusonefloorimagiotaisfiniteloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremainderreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposewherexorlast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[ArgMinMax-(7)]
	_ = x[Atan2-(8)]
	_ = x[BatchNormForInference-(9)]
	_ = x[BatchNormForTraining-(10)]
	_ = x[BatchNormGradient-(11)]
	_ = x[Bitcast-(12)]
	_ = x[Broadcast-(13)]
	_ = x[BroadcastInDim-(14)]
	_ = x[Cbrt-(15)]
	_ = x[Ceil-(16)]
	_ = x[Compare-(17)]
	_ = x[Conj-(18)]
	_ = x[Cosine-(19)]
	_ = x[CountLeadingZeros-(20)]
	_ = x[Divide-(21)]
	_ = x[Erf-(22)]
	_ = x[Exponential-(23)]
	_ = x[ExponentialMinusOne-(24)]
	_ = x[Floor-(25)]
	_ = x[Imag-(26)]
	_ = x[Iota-(27)]
	_ = x[IsFinite-(28)]
	_ = x[Log-(29)]
	_ = x[LogPlusOne-(30)]
	_ = x[Logistic-(31)]
	_ = x[Maximum-(32)]
	_ = x[Minimum-(33)]
	_ = x[Multiply-(34)]
	_ = x[Negate-(35)]
	_ = x[Not-(36)]
	_ = x[Or-(37)]
	_ = x[Pad-(38)]
	_ = x[Popcnt-(39)]
	_ = x[Power-(40)]
	_ = x[Real-(41)]
	_ = x[ReduceBitwiseAnd-(42)]
	_ = x[ReduceBitwiseOr-(43)]
	_ = x[ReduceBitwiseXor-(44)]
	_ = x[ReduceLogicalAnd-(45)]
	_ = x[ReduceLogicalOr-(46)]
	_ = x[ReduceLogicalXor-(47)]
	_ = x[ReduceMax-(48)]
	_ = x[ReduceMin-(49)]
	_ = x[ReduceProduct-(50)]
	_ = x[ReduceSum-(51)]
	_ = x[ReduceWindow-(52)]
	_ = x[Remainder-(53)]
	_ = x[Reshape-(54)]
	_ = x[Reverse-(55)]
	_ = x[RngBitGenerator-(56)]
	_ = x[RoundNearestAfz-(57)]
	_ = x[RoundNearestEven-(58)]
	_ = x[Rsqrt-(59)]
	_ = x[ScatterMax-(60)]
	_ = x[ScatterMin-(61)]
	_ = x[ScatterSum-(62)]
	_ = x[SelectAndScatterMax-(63)]
	_ = x[SelectAndScatterMin-(64)]
	_ = x[SelectAndScatterSum-(65)]
	_ = x[ShiftLeft-(66)]
	_ = x[ShiftRightArithmetic-(67)]
	_ = x[ShiftRightLogical-(68)]
	_ = x[Sign-(69)]
	_ = x[Sine-(70)]
	_ = x[Slice-(71)]
	_ = x[Sqrt-(72)]
	_ = x[Subtract-(73)]
	_ = x[Tan-(74)]
	_ = x[Tanh-(75)]
	_ = x[Transpose-(76)]
	_ = x[Where-(77)]
	_ = x[Xor-(78)]
	_ = x[Last-(79)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, ArgMinMax, Atan2, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Bitcast, Broadcast, BroadcastInDim, Cbrt, Ceil, Compare, Conj, Cosine, CountLeadingZeros, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, IsFinite, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, ReduceWindow, Remainder, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Where, Xor, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:51]:        ArgMinMax,
	_OpTypeLowerName[42:51]:   ArgMinMax,
	_OpTypeName[51:56]:        Atan2,
	_OpTypeLowerName[51:56]:   Atan2,
	_OpTypeName[56:77]:        BatchNormForInference,
	_OpTypeLowerName[56:77]:   BatchNormForInference,
	_OpTypeName[77:97]:        BatchNormForTraining,
	_OpTypeLowerName[77:97]:   BatchNormForTraining,
	_OpTypeName[97:114]:       BatchNormGradient,
	_OpTypeLowerName[97:114]:  BatchNormGradient,
	_OpTypeName[114:121]:      Bitcast,
	_OpTypeLowerName[114:121]: Bitcast,
	_OpTypeName[121:130]:      Broadcast,
	_OpTypeLowerName[121:130]: Broadcast,
	_OpTypeName[130:144]:      BroadcastInDim,
	_OpTypeLowerName[130:144]: BroadcastInDim,
	_OpTypeName[144:148]:      Cbrt,
	_OpTypeLowerName[144:148]: Cbrt,
	_OpTypeName[148:152]:      Ceil,
	_OpTypeLowerName[148:152]: Ceil,
	_OpTypeName[152:159]:      Compare,
	_OpTypeLowerName[152:159]: Compare,
	_OpTypeName[159:163]:      Conj,
	_OpTypeLowerName[159:163]: Conj,
	_OpTypeName[163:169]:      Cosine,
	_OpTypeLowerName[163:169]: Cosine,
	_OpTypeName[169:186]:      CountLeadingZeros,
	_OpTypeLowerName[169:186]: CountLeadingZeros,
	_OpTypeName[186:192]:      Divide,
	_OpTypeLowerName[186:192]: Divide,
	_OpTypeName[192:195]:      Erf,
	_OpTypeLowerName[192:195]: Erf,
	_OpTypeName[195:206]:      Exponential,
	_OpTypeLowerName[195:206]: Exponential,
	_OpTypeName[206:225]:      ExponentialMinusOne,
	_OpTypeLowerName[206:225]: ExponentialMinusOne,
	_OpTypeName[225:230]:      Floor,
	_OpTypeLowerName[225:230]: Floor,
	_OpTypeName[230:234]:      Imag,
	_OpTypeLowerName[230:234]: Imag,
	_OpTypeName[234:238]:      Iota,
	_OpTypeLowerName[234:238]: Iota,
	_OpTypeName[238:246]:      IsFinite,
	_OpTypeLowerName[238:246]: IsFinite,
	_OpTypeName[246:249]:      Log,
	_OpTypeLowerName[246:249]: Log,
	_OpTypeName[249:259]:      LogPlusOne,
	_OpTypeLowerName[249:259]: LogPlusOne,
	_OpTypeName[259:267]:      Logistic,
	_OpTypeLowerName[259:267]: Logistic,
	_OpTypeName[267:274]:      Maximum,
	_OpTypeLowerName[267:274]: Maximum,
	_OpTypeName[274:281]:      Minimum,
	_OpTypeLowerName[274:281]: Minimum,
	_OpTypeName[281:289]:      Multiply,
	_OpTypeLowerName[281:289]: Multiply,
	_OpTypeName[289:295]:      Negate,
	_OpTypeLowerName[289:295]: Negate,
	_OpTypeName[295:298]:      Not,
	_OpTypeLowerName[295:298]: Not,
	_OpTypeName[298:300]:      Or,
	_OpTypeLowerName[298:300]: Or,
	_OpTypeName[300:303]:      Pad,
	_OpTypeLowerName[300:303]: Pad,
	_OpTypeName[303:309]:      Popcnt,
	_OpTypeLowerName[303:309]: Popcnt,
	_OpTypeName[309:314]:      Power,
	_OpTypeLowerName[309:314]: Power,
	_OpTypeName[314:318]:      Real,
	_OpTypeLowerName[314:318]: Real,
	_OpTypeName[318:334]:      ReduceBitwiseAnd,
	_OpTypeLowerName[318:334]: ReduceBitwiseAnd,
	_OpTypeName[334:349]:      ReduceBitwiseOr,
	_OpTypeLowerName[334:349]: ReduceBitwiseOr,
	_OpTypeName[349:365]:      ReduceBitwiseXor,
	_OpTypeLowerName[349:365]: ReduceBitwiseXor,
	_OpTypeName[365:381]:      ReduceLogicalAnd,
	_OpTypeLowerName[365:381]: ReduceLogicalAnd,
	_OpTypeName[381:396]:      ReduceLogicalOr,
	_OpTypeLowerName[381:396]: ReduceLogicalOr,
	_OpTypeName[396:412]:      ReduceLogicalXor,
	_OpTypeLowerName[396:412]: ReduceLogicalXor,
	_OpTypeName[412:421]:      ReduceMax,
	_OpTypeLowerName[412:421]: ReduceMax,
	_OpTypeName[421:430]:      ReduceMin,
	_OpTypeLowerName[421:430]: ReduceMin,
	_OpTypeName[430:443]:      ReduceProduct,
	_OpTypeLowerName[430:443]: ReduceProduct,
	_OpTypeName[443:452]:      ReduceSum,
	_OpTypeLowerName[443:452]: ReduceSum,
	_OpTypeName[452:464]:      ReduceWindow,
	_OpTypeLowerName[452:464]: ReduceWindow,
	_OpTypeName[464:473]:      Remainder,
	_OpTypeLowerName[464:473]: Remainder,
	_OpTypeName[473:480]:      Reshape,
	_OpTypeLowerName[473:480]: Reshape,
	_OpTypeName[480:487]:      Reverse,
	_OpTypeLowerName[480:487]: Reverse,
	_OpTypeName[487:502]:      RngBitGenerator,
	_OpTypeLowerName[487:502]: RngBitGenerator,
	_OpTypeName[502:517]:      RoundNearestAfz,
	_OpTypeLowerName[502:517]: RoundNearestAfz,
	_OpTypeName[517:533]:      RoundNearestEven,
	_OpTypeLowerName[517:533]: RoundNearestEven,
	_OpTypeName[533:538]:      Rsqrt,
	_OpTypeLowerName[533:538]: Rsqrt,
	_OpTypeName[538:548]:      ScatterMax,
	_OpTypeLowerName[538:548]: ScatterMax,
	_OpTypeName[548:558]:      ScatterMin,
	_OpTypeLowerName[548:558]: ScatterMin,
	_OpTypeName[558:568]:      ScatterSum,
	_OpTypeLowerName[558:568]: ScatterSum,
	_OpTypeName[568:587]:      SelectAndScatterMax,
	_OpTypeLowerName[568:587]: SelectAndScatterMax,
	_OpTypeName[587:606]:      SelectAndScatterMin,
	_OpTypeLowerName[587:606]: SelectAndScatterMin,
	_OpTypeName[606:625]:      SelectAndScatterSum,
	_OpTypeLowerName[606:625]: SelectAndScatterSum,
	_OpTypeName[625:634]:      ShiftLeft,
	_OpTypeLowerName[625:634]: ShiftLeft,
	_OpTypeName[634:654]:      ShiftRightArithmetic,
	_OpTypeLowerName[634:654]: ShiftRightArithmetic,
	_OpTypeName[654:671]:      ShiftRightLogical,
	_OpTypeLowerName[654:671]: ShiftRightLogical,
	_OpTypeName[671:675]:      Sign,
	_OpTypeLowerName[671:675]: Sign,
	_OpTypeName[675:679]:      Sine,
	_OpTypeLowerName[675:679]: Sine,
	_OpTypeName[679:684]:      Slice,
	_OpTypeLowerName[679:684]: Slice,
	_OpTypeName[684:688]:      Sqrt,
	_OpTypeLowerName[684:688]: Sqrt,
	_OpTypeName[688:696]:      Subtract,
	_OpTypeLowerName[688:696]: Subtract,
	_OpTypeName[696:699]:      Tan,
	_OpTypeLowerName[696:699]: Tan,
	_OpTypeName[699:703]:      Tanh,
	_OpTypeLowerName[699:703]: Tanh,
	_OpTypeName[703:712]:      Transpose,
	_OpTypeLowerName[703:712]: Transpose,
	_OpTypeName[712:717]:      Where,
	_OpTypeLowerName[712:717]: Where,
	_OpTypeName[717:720]:      Xor,
	_OpTypeLowerName[717:720]: Xor,
	_OpTypeName[720:724]:      Last,
	_OpTypeLowerName[720:724]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:51],
	_OpTypeName[51:56],
	_OpTypeName[56:77],
	_OpTypeName[77:97],
	_OpTypeName[97:114],
	_OpTypeName[114:121],
	_OpTypeName[121:130],
	_OpTypeName[130:144],
	_OpTypeName[144:148],
	_OpTypeName[148:152],
	_OpTypeName[152:159],
	_OpTypeName[159:163],
	_OpTypeName[163:169],
	_OpTypeName[169:186],
	_OpTypeName[186:192],
	_OpTypeName[192:195],
	_OpTypeName[195:206],
	_OpTypeName[206:225],
	_OpTypeName[225:230],
	_OpTypeName[230:234],
	_OpTypeName[234:238],
	_OpTypeName[238:246],
	_OpTypeName[246:249],
	_OpTypeName[249:259],
	_OpTypeName[259:267],
	_OpTypeName[267:274],
	_OpTypeName[274:281],
	_OpTypeName[281:289],
	_OpTypeName[289:295],
	_OpTypeName[295:298],
	_OpTypeName[298:300],
	_OpTypeName[300:303],
	_OpTypeName[303:309],
	_OpTypeName[309:314],
	_OpTypeName[314:318],
	_OpTypeName[318:334],
	_OpTypeName[334:349],
	_OpTypeName[349:365],
	_OpTypeName[365:381],
	_OpTypeName[381:396],
	_OpTypeName[396:412],
	_OpTypeName[412:421],
	_OpTypeName[421:430],
	_OpTypeName[430:443],
	_OpTypeName[443:452],
	_OpTypeName[452:464],
	_OpTypeName[464:473],
	_OpTypeName[473:480],
	_OpTypeName[480:487],
	_OpTypeName[487:502],
	_OpTypeName[502:517],
	_OpTypeName[517:533],
	_OpTypeName[533:538],
	_OpTypeName[538:548],
	_OpTypeName[548:558],
	_OpTypeName[558:568],
	_OpTypeName[568:587],
	_OpTypeName[587:606],
	_OpTypeName[606:625],
	_OpTypeName[625:634],
	_OpTypeName[634:654],
	_OpTypeName[654:671],
	_OpTypeName[671:675],
	_OpTypeName[675:679],
	_OpTypeName[679:684],
	_OpTypeName[684:688],
	_OpTypeName[688:696],
	_OpTypeName[696:699],
	_OpTypeName[699:703],
	_OpTypeName[703:712],
	_OpTypeName[712:717],
	_OpTypeName[717:720],
	_OpTypeName[720:724],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
