// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2CbrtCeilClampCompareComplexCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorImagIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReshapeRoundNearestAfzRoundNearestEvenRsqrtShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSqrtSubtractTanTanhXorArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertBroadcastInDimCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConcatenateConvertConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGatherGetDimensionSizeGetTupleElementIfInfeedIsFiniteOptimizationBarrierOutfeedPadPartitionIdRecvReduceReducePrecisionReduceScatterReduceWindowReverseRngBitGeneratorScatterSelectSelectAndScatterSendSliceTransposeTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 51, 55, 60, 67, 74, 80, 97, 103, 113, 116, 127, 146, 151, 155, 159, 162, 172, 180, 187, 194, 202, 208, 211, 213, 219, 224, 228, 237, 244, 259, 275, 280, 289, 309, 326, 330, 334, 338, 346, 349, 353, 356, 365, 386, 406, 423, 437, 451, 455, 463, 482, 499, 508, 519, 526, 537, 547, 568, 579, 592, 603, 613, 627, 645, 648, 654, 670, 685, 687, 693, 701, 720, 727, 730, 741, 745, 751, 766, 779, 791, 798, 813, 820, 826, 842, 846, 851, 860, 875, 880, 897, 912, 917, 921}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2cbrtceilclampcomparecomplexcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorimagiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreshaperoundnearestafzroundnearestevenrsqrtshiftleftshiftrightarithmeticshiftrightlogicalsignsinesqrtsubtracttantanhxorargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertbroadcastindimcasecholeskycollectivebroadcastcollectivepermutecompositeconcatenateconvertconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgathergetdimensionsizegettupleelementifinfeedisfiniteoptimizationbarrieroutfeedpadpartitionidrecvreducereduceprecisionreducescatterreducewindowreverserngbitgeneratorscatterselectselectandscattersendslicetransposetriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[Cbrt-(8)]
	_ = x[Ceil-(9)]
	_ = x[Clamp-(10)]
	_ = x[Compare-(11)]
	_ = x[Complex-(12)]
	_ = x[Cosine-(13)]
	_ = x[CountLeadingZeros-(14)]
	_ = x[Divide-(15)]
	_ = x[DotGeneral-(16)]
	_ = x[Erf-(17)]
	_ = x[Exponential-(18)]
	_ = x[ExponentialMinusOne-(19)]
	_ = x[Floor-(20)]
	_ = x[Imag-(21)]
	_ = x[Iota-(22)]
	_ = x[Log-(23)]
	_ = x[LogPlusOne-(24)]
	_ = x[Logistic-(25)]
	_ = x[Maximum-(26)]
	_ = x[Minimum-(27)]
	_ = x[Multiply-(28)]
	_ = x[Negate-(29)]
	_ = x[Not-(30)]
	_ = x[Or-(31)]
	_ = x[Popcnt-(32)]
	_ = x[Power-(33)]
	_ = x[Real-(34)]
	_ = x[Remainder-(35)]
	_ = x[Reshape-(36)]
	_ = x[RoundNearestAfz-(37)]
	_ = x[RoundNearestEven-(38)]
	_ = x[Rsqrt-(39)]
	_ = x[ShiftLeft-(40)]
	_ = x[ShiftRightArithmetic-(41)]
	_ = x[ShiftRightLogical-(42)]
	_ = x[Sign-(43)]
	_ = x[Sine-(44)]
	_ = x[Sqrt-(45)]
	_ = x[Subtract-(46)]
	_ = x[Tan-(47)]
	_ = x[Tanh-(48)]
	_ = x[Xor-(49)]
	_ = x[ArgMinMax-(50)]
	_ = x[BatchNormForInference-(51)]
	_ = x[BatchNormForTraining-(52)]
	_ = x[BatchNormGradient-(53)]
	_ = x[BitcastConvert-(54)]
	_ = x[BroadcastInDim-(55)]
	_ = x[Case-(56)]
	_ = x[Cholesky-(57)]
	_ = x[CollectiveBroadcast-(58)]
	_ = x[CollectivePermute-(59)]
	_ = x[Composite-(60)]
	_ = x[Concatenate-(61)]
	_ = x[Convert-(62)]
	_ = x[Convolution-(63)]
	_ = x[CustomCall-(64)]
	_ = x[DynamicBroadcastInDim-(65)]
	_ = x[DynamicConv-(66)]
	_ = x[DynamicGather-(67)]
	_ = x[DynamicIota-(68)]
	_ = x[DynamicPad-(69)]
	_ = x[DynamicReshape-(70)]
	_ = x[DynamicUpdateSlice-(71)]
	_ = x[Fft-(72)]
	_ = x[Gather-(73)]
	_ = x[GetDimensionSize-(74)]
	_ = x[GetTupleElement-(75)]
	_ = x[If-(76)]
	_ = x[Infeed-(77)]
	_ = x[IsFinite-(78)]
	_ = x[OptimizationBarrier-(79)]
	_ = x[Outfeed-(80)]
	_ = x[Pad-(81)]
	_ = x[PartitionId-(82)]
	_ = x[Recv-(83)]
	_ = x[Reduce-(84)]
	_ = x[ReducePrecision-(85)]
	_ = x[ReduceScatter-(86)]
	_ = x[ReduceWindow-(87)]
	_ = x[Reverse-(88)]
	_ = x[RngBitGenerator-(89)]
	_ = x[Scatter-(90)]
	_ = x[Select-(91)]
	_ = x[SelectAndScatter-(92)]
	_ = x[Send-(93)]
	_ = x[Slice-(94)]
	_ = x[Transpose-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, Cbrt, Ceil, Clamp, Compare, Complex, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reshape, RoundNearestAfz, RoundNearestEven, Rsqrt, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Sqrt, Subtract, Tan, Tanh, Xor, ArgMinMax, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, BroadcastInDim, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Concatenate, Convert, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, Gather, GetDimensionSize, GetTupleElement, If, Infeed, IsFinite, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, Reduce, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, RngBitGenerator, Scatter, Select, SelectAndScatter, Send, Slice, Transpose, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:51]:        Cbrt,
	_OpTypeLowerName[47:51]:   Cbrt,
	_OpTypeName[51:55]:        Ceil,
	_OpTypeLowerName[51:55]:   Ceil,
	_OpTypeName[55:60]:        Clamp,
	_OpTypeLowerName[55:60]:   Clamp,
	_OpTypeName[60:67]:        Compare,
	_OpTypeLowerName[60:67]:   Compare,
	_OpTypeName[67:74]:        Complex,
	_OpTypeLowerName[67:74]:   Complex,
	_OpTypeName[74:80]:        Cosine,
	_OpTypeLowerName[74:80]:   Cosine,
	_OpTypeName[80:97]:        CountLeadingZeros,
	_OpTypeLowerName[80:97]:   CountLeadingZeros,
	_OpTypeName[97:103]:       Divide,
	_OpTypeLowerName[97:103]:  Divide,
	_OpTypeName[103:113]:      DotGeneral,
	_OpTypeLowerName[103:113]: DotGeneral,
	_OpTypeName[113:116]:      Erf,
	_OpTypeLowerName[113:116]: Erf,
	_OpTypeName[116:127]:      Exponential,
	_OpTypeLowerName[116:127]: Exponential,
	_OpTypeName[127:146]:      ExponentialMinusOne,
	_OpTypeLowerName[127:146]: ExponentialMinusOne,
	_OpTypeName[146:151]:      Floor,
	_OpTypeLowerName[146:151]: Floor,
	_OpTypeName[151:155]:      Imag,
	_OpTypeLowerName[151:155]: Imag,
	_OpTypeName[155:159]:      Iota,
	_OpTypeLowerName[155:159]: Iota,
	_OpTypeName[159:162]:      Log,
	_OpTypeLowerName[159:162]: Log,
	_OpTypeName[162:172]:      LogPlusOne,
	_OpTypeLowerName[162:172]: LogPlusOne,
	_OpTypeName[172:180]:      Logistic,
	_OpTypeLowerName[172:180]: Logistic,
	_OpTypeName[180:187]:      Maximum,
	_OpTypeLowerName[180:187]: Maximum,
	_OpTypeName[187:194]:      Minimum,
	_OpTypeLowerName[187:194]: Minimum,
	_OpTypeName[194:202]:      Multiply,
	_OpTypeLowerName[194:202]: Multiply,
	_OpTypeName[202:208]:      Negate,
	_OpTypeLowerName[202:208]: Negate,
	_OpTypeName[208:211]:      Not,
	_OpTypeLowerName[208:211]: Not,
	_OpTypeName[211:213]:      Or,
	_OpTypeLowerName[211:213]: Or,
	_OpTypeName[213:219]:      Popcnt,
	_OpTypeLowerName[213:219]: Popcnt,
	_OpTypeName[219:224]:      Power,
	_OpTypeLowerName[219:224]: Power,
	_OpTypeName[224:228]:      Real,
	_OpTypeLowerName[224:228]: Real,
	_OpTypeName[228:237]:      Remainder,
	_OpTypeLowerName[228:237]: Remainder,
	_OpTypeName[237:244]:      Reshape,
	_OpTypeLowerName[237:244]: Reshape,
	_OpTypeName[244:259]:      RoundNearestAfz,
	_OpTypeLowerName[244:259]: RoundNearestAfz,
	_OpTypeName[259:275]:      RoundNearestEven,
	_OpTypeLowerName[259:275]: RoundNearestEven,
	_OpTypeName[275:280]:      Rsqrt,
	_OpTypeLowerName[275:280]: Rsqrt,
	_OpTypeName[280:289]:      ShiftLeft,
	_OpTypeLowerName[280:289]: ShiftLeft,
	_OpTypeName[289:309]:      ShiftRightArithmetic,
	_OpTypeLowerName[289:309]: ShiftRightArithmetic,
	_OpTypeName[309:326]:      ShiftRightLogical,
	_OpTypeLowerName[309:326]: ShiftRightLogical,
	_OpTypeName[326:330]:      Sign,
	_OpTypeLowerName[326:330]: Sign,
	_OpTypeName[330:334]:      Sine,
	_OpTypeLowerName[330:334]: Sine,
	_OpTypeName[334:338]:      Sqrt,
	_OpTypeLowerName[334:338]: Sqrt,
	_OpTypeName[338:346]:      Subtract,
	_OpTypeLowerName[338:346]: Subtract,
	_OpTypeName[346:349]:      Tan,
	_OpTypeLowerName[346:349]: Tan,
	_OpTypeName[349:353]:      Tanh,
	_OpTypeLowerName[349:353]: Tanh,
	_OpTypeName[353:356]:      Xor,
	_OpTypeLowerName[353:356]: Xor,
	_OpTypeName[356:365]:      ArgMinMax,
	_OpTypeLowerName[356:365]: ArgMinMax,
	_OpTypeName[365:386]:      BatchNormForInference,
	_OpTypeLowerName[365:386]: BatchNormForInference,
	_OpTypeName[386:406]:      BatchNormForTraining,
	_OpTypeLowerName[386:406]: BatchNormForTraining,
	_OpTypeName[406:423]:      BatchNormGradient,
	_OpTypeLowerName[406:423]: BatchNormGradient,
	_OpTypeName[423:437]:      BitcastConvert,
	_OpTypeLowerName[423:437]: BitcastConvert,
	_OpTypeName[437:451]:      BroadcastInDim,
	_OpTypeLowerName[437:451]: BroadcastInDim,
	_OpTypeName[451:455]:      Case,
	_OpTypeLowerName[451:455]: Case,
	_OpTypeName[455:463]:      Cholesky,
	_OpTypeLowerName[455:463]: Cholesky,
	_OpTypeName[463:482]:      CollectiveBroadcast,
	_OpTypeLowerName[463:482]: CollectiveBroadcast,
	_OpTypeName[482:499]:      CollectivePermute,
	_OpTypeLowerName[482:499]: CollectivePermute,
	_OpTypeName[499:508]:      Composite,
	_OpTypeLowerName[499:508]: Composite,
	_OpTypeName[508:519]:      Concatenate,
	_OpTypeLowerName[508:519]: Concatenate,
	_OpTypeName[519:526]:      Convert,
	_OpTypeLowerName[519:526]: Convert,
	_OpTypeName[526:537]:      Convolution,
	_OpTypeLowerName[526:537]: Convolution,
	_OpTypeName[537:547]:      CustomCall,
	_OpTypeLowerName[537:547]: CustomCall,
	_OpTypeName[547:568]:      DynamicBroadcastInDim,
	_OpTypeLowerName[547:568]: DynamicBroadcastInDim,
	_OpTypeName[568:579]:      DynamicConv,
	_OpTypeLowerName[568:579]: DynamicConv,
	_OpTypeName[579:592]:      DynamicGather,
	_OpTypeLowerName[579:592]: DynamicGather,
	_OpTypeName[592:603]:      DynamicIota,
	_OpTypeLowerName[592:603]: DynamicIota,
	_OpTypeName[603:613]:      DynamicPad,
	_OpTypeLowerName[603:613]: DynamicPad,
	_OpTypeName[613:627]:      DynamicReshape,
	_OpTypeLowerName[613:627]: DynamicReshape,
	_OpTypeName[627:645]:      DynamicUpdateSlice,
	_OpTypeLowerName[627:645]: DynamicUpdateSlice,
	_OpTypeName[645:648]:      Fft,
	_OpTypeLowerName[645:648]: Fft,
	_OpTypeName[648:654]:      Gather,
	_OpTypeLowerName[648:654]: Gather,
	_OpTypeName[654:670]:      GetDimensionSize,
	_OpTypeLowerName[654:670]: GetDimensionSize,
	_OpTypeName[670:685]:      GetTupleElement,
	_OpTypeLowerName[670:685]: GetTupleElement,
	_OpTypeName[685:687]:      If,
	_OpTypeLowerName[685:687]: If,
	_OpTypeName[687:693]:      Infeed,
	_OpTypeLowerName[687:693]: Infeed,
	_OpTypeName[693:701]:      IsFinite,
	_OpTypeLowerName[693:701]: IsFinite,
	_OpTypeName[701:720]:      OptimizationBarrier,
	_OpTypeLowerName[701:720]: OptimizationBarrier,
	_OpTypeName[720:727]:      Outfeed,
	_OpTypeLowerName[720:727]: Outfeed,
	_OpTypeName[727:730]:      Pad,
	_OpTypeLowerName[727:730]: Pad,
	_OpTypeName[730:741]:      PartitionId,
	_OpTypeLowerName[730:741]: PartitionId,
	_OpTypeName[741:745]:      Recv,
	_OpTypeLowerName[741:745]: Recv,
	_OpTypeName[745:751]:      Reduce,
	_OpTypeLowerName[745:751]: Reduce,
	_OpTypeName[751:766]:      ReducePrecision,
	_OpTypeLowerName[751:766]: ReducePrecision,
	_OpTypeName[766:779]:      ReduceScatter,
	_OpTypeLowerName[766:779]: ReduceScatter,
	_OpTypeName[779:791]:      ReduceWindow,
	_OpTypeLowerName[779:791]: ReduceWindow,
	_OpTypeName[791:798]:      Reverse,
	_OpTypeLowerName[791:798]: Reverse,
	_OpTypeName[798:813]:      RngBitGenerator,
	_OpTypeLowerName[798:813]: RngBitGenerator,
	_OpTypeName[813:820]:      Scatter,
	_OpTypeLowerName[813:820]: Scatter,
	_OpTypeName[820:826]:      Select,
	_OpTypeLowerName[820:826]: Select,
	_OpTypeName[826:842]:      SelectAndScatter,
	_OpTypeLowerName[826:842]: SelectAndScatter,
	_OpTypeName[842:846]:      Send,
	_OpTypeLowerName[842:846]: Send,
	_OpTypeName[846:851]:      Slice,
	_OpTypeLowerName[846:851]: Slice,
	_OpTypeName[851:860]:      Transpose,
	_OpTypeLowerName[851:860]: Transpose,
	_OpTypeName[860:875]:      TriangularSolve,
	_OpTypeLowerName[860:875]: TriangularSolve,
	_OpTypeName[875:880]:      Tuple,
	_OpTypeLowerName[875:880]: Tuple,
	_OpTypeName[880:897]:      UniformDequantize,
	_OpTypeLowerName[880:897]: UniformDequantize,
	_OpTypeName[897:912]:      UniformQuantize,
	_OpTypeLowerName[897:912]: UniformQuantize,
	_OpTypeName[912:917]:      While,
	_OpTypeLowerName[912:917]: While,
	_OpTypeName[917:921]:      Last,
	_OpTypeLowerName[917:921]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:51],
	_OpTypeName[51:55],
	_OpTypeName[55:60],
	_OpTypeName[60:67],
	_OpTypeName[67:74],
	_OpTypeName[74:80],
	_OpTypeName[80:97],
	_OpTypeName[97:103],
	_OpTypeName[103:113],
	_OpTypeName[113:116],
	_OpTypeName[116:127],
	_OpTypeName[127:146],
	_OpTypeName[146:151],
	_OpTypeName[151:155],
	_OpTypeName[155:159],
	_OpTypeName[159:162],
	_OpTypeName[162:172],
	_OpTypeName[172:180],
	_OpTypeName[180:187],
	_OpTypeName[187:194],
	_OpTypeName[194:202],
	_OpTypeName[202:208],
	_OpTypeName[208:211],
	_OpTypeName[211:213],
	_OpTypeName[213:219],
	_OpTypeName[219:224],
	_OpTypeName[224:228],
	_OpTypeName[228:237],
	_OpTypeName[237:244],
	_OpTypeName[244:259],
	_OpTypeName[259:275],
	_OpTypeName[275:280],
	_OpTypeName[280:289],
	_OpTypeName[289:309],
	_OpTypeName[309:326],
	_OpTypeName[326:330],
	_OpTypeName[330:334],
	_OpTypeName[334:338],
	_OpTypeName[338:346],
	_OpTypeName[346:349],
	_OpTypeName[349:353],
	_OpTypeName[353:356],
	_OpTypeName[356:365],
	_OpTypeName[365:386],
	_OpTypeName[386:406],
	_OpTypeName[406:423],
	_OpTypeName[423:437],
	_OpTypeName[437:451],
	_OpTypeName[451:455],
	_OpTypeName[455:463],
	_OpTypeName[463:482],
	_OpTypeName[482:499],
	_OpTypeName[499:508],
	_OpTypeName[508:519],
	_OpTypeName[519:526],
	_OpTypeName[526:537],
	_OpTypeName[537:547],
	_OpTypeName[547:568],
	_OpTypeName[568:579],
	_OpTypeName[579:592],
	_OpTypeName[592:603],
	_OpTypeName[603:613],
	_OpTypeName[613:627],
	_OpTypeName[627:645],
	_OpTypeName[645:648],
	_OpTypeName[648:654],
	_OpTypeName[654:670],
	_OpTypeName[670:685],
	_OpTypeName[685:687],
	_OpTypeName[687:693],
	_OpTypeName[693:701],
	_OpTypeName[701:720],
	_OpTypeName[720:727],
	_OpTypeName[727:730],
	_OpTypeName[730:741],
	_OpTypeName[741:745],
	_OpTypeName[745:751],
	_OpTypeName[751:766],
	_OpTypeName[766:779],
	_OpTypeName[779:791],
	_OpTypeName[791:798],
	_OpTypeName[798:813],
	_OpTypeName[813:820],
	_OpTypeName[820:826],
	_OpTypeName[826:842],
	_OpTypeName[842:846],
	_OpTypeName[846:851],
	_OpTypeName[851:860],
	_OpTypeName[860:875],
	_OpTypeName[875:880],
	_OpTypeName[880:897],
	_OpTypeName[897:912],
	_OpTypeName[912:917],
	_OpTypeName[917:921],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
