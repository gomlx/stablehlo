// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPopcntPowerRealRemainderReduceReshapeRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeConvolutionCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceFftGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPadPartitionIdRecvReducePrecisionReduceScatterReduceWindowReverseSelectSelectAndScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 120, 126, 143, 149, 159, 162, 173, 192, 197, 203, 207, 215, 219, 222, 232, 240, 247, 254, 262, 268, 271, 273, 279, 284, 288, 297, 303, 310, 325, 340, 356, 361, 368, 377, 397, 414, 418, 422, 427, 431, 439, 442, 446, 455, 458, 479, 499, 516, 520, 528, 547, 564, 573, 584, 594, 615, 626, 639, 650, 660, 674, 692, 695, 711, 726, 728, 734, 753, 760, 763, 774, 778, 793, 806, 818, 825, 831, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertcosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpopcntpowerrealremainderreducereshaperngbitgeneratorroundnearestafzroundnearestevenrsqrtscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositeconvolutioncustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicefftgetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpadpartitionidrecvreduceprecisionreducescatterreducewindowreverseselectselectandscattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Convert-(16)]
	_ = x[Cosine-(17)]
	_ = x[CountLeadingZeros-(18)]
	_ = x[Divide-(19)]
	_ = x[DotGeneral-(20)]
	_ = x[Erf-(21)]
	_ = x[Exponential-(22)]
	_ = x[ExponentialMinusOne-(23)]
	_ = x[Floor-(24)]
	_ = x[Gather-(25)]
	_ = x[Imag-(26)]
	_ = x[IsFinite-(27)]
	_ = x[Iota-(28)]
	_ = x[Log-(29)]
	_ = x[LogPlusOne-(30)]
	_ = x[Logistic-(31)]
	_ = x[Maximum-(32)]
	_ = x[Minimum-(33)]
	_ = x[Multiply-(34)]
	_ = x[Negate-(35)]
	_ = x[Not-(36)]
	_ = x[Or-(37)]
	_ = x[Popcnt-(38)]
	_ = x[Power-(39)]
	_ = x[Real-(40)]
	_ = x[Remainder-(41)]
	_ = x[Reduce-(42)]
	_ = x[Reshape-(43)]
	_ = x[RngBitGenerator-(44)]
	_ = x[RoundNearestAfz-(45)]
	_ = x[RoundNearestEven-(46)]
	_ = x[Rsqrt-(47)]
	_ = x[Scatter-(48)]
	_ = x[ShiftLeft-(49)]
	_ = x[ShiftRightArithmetic-(50)]
	_ = x[ShiftRightLogical-(51)]
	_ = x[Sign-(52)]
	_ = x[Sine-(53)]
	_ = x[Slice-(54)]
	_ = x[Sqrt-(55)]
	_ = x[Subtract-(56)]
	_ = x[Tan-(57)]
	_ = x[Tanh-(58)]
	_ = x[Transpose-(59)]
	_ = x[Xor-(60)]
	_ = x[BatchNormForInference-(61)]
	_ = x[BatchNormForTraining-(62)]
	_ = x[BatchNormGradient-(63)]
	_ = x[Case-(64)]
	_ = x[Cholesky-(65)]
	_ = x[CollectiveBroadcast-(66)]
	_ = x[CollectivePermute-(67)]
	_ = x[Composite-(68)]
	_ = x[Convolution-(69)]
	_ = x[CustomCall-(70)]
	_ = x[DynamicBroadcastInDim-(71)]
	_ = x[DynamicConv-(72)]
	_ = x[DynamicGather-(73)]
	_ = x[DynamicIota-(74)]
	_ = x[DynamicPad-(75)]
	_ = x[DynamicReshape-(76)]
	_ = x[DynamicUpdateSlice-(77)]
	_ = x[Fft-(78)]
	_ = x[GetDimensionSize-(79)]
	_ = x[GetTupleElement-(80)]
	_ = x[If-(81)]
	_ = x[Infeed-(82)]
	_ = x[OptimizationBarrier-(83)]
	_ = x[Outfeed-(84)]
	_ = x[Pad-(85)]
	_ = x[PartitionId-(86)]
	_ = x[Recv-(87)]
	_ = x[ReducePrecision-(88)]
	_ = x[ReduceScatter-(89)]
	_ = x[ReduceWindow-(90)]
	_ = x[Reverse-(91)]
	_ = x[Select-(92)]
	_ = x[SelectAndScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Popcnt, Power, Real, Remainder, Reduce, Reshape, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, Convolution, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, Fft, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, Pad, PartitionId, Recv, ReducePrecision, ReduceScatter, ReduceWindow, Reverse, Select, SelectAndScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:120]:      Convert,
	_OpTypeLowerName[113:120]: Convert,
	_OpTypeName[120:126]:      Cosine,
	_OpTypeLowerName[120:126]: Cosine,
	_OpTypeName[126:143]:      CountLeadingZeros,
	_OpTypeLowerName[126:143]: CountLeadingZeros,
	_OpTypeName[143:149]:      Divide,
	_OpTypeLowerName[143:149]: Divide,
	_OpTypeName[149:159]:      DotGeneral,
	_OpTypeLowerName[149:159]: DotGeneral,
	_OpTypeName[159:162]:      Erf,
	_OpTypeLowerName[159:162]: Erf,
	_OpTypeName[162:173]:      Exponential,
	_OpTypeLowerName[162:173]: Exponential,
	_OpTypeName[173:192]:      ExponentialMinusOne,
	_OpTypeLowerName[173:192]: ExponentialMinusOne,
	_OpTypeName[192:197]:      Floor,
	_OpTypeLowerName[192:197]: Floor,
	_OpTypeName[197:203]:      Gather,
	_OpTypeLowerName[197:203]: Gather,
	_OpTypeName[203:207]:      Imag,
	_OpTypeLowerName[203:207]: Imag,
	_OpTypeName[207:215]:      IsFinite,
	_OpTypeLowerName[207:215]: IsFinite,
	_OpTypeName[215:219]:      Iota,
	_OpTypeLowerName[215:219]: Iota,
	_OpTypeName[219:222]:      Log,
	_OpTypeLowerName[219:222]: Log,
	_OpTypeName[222:232]:      LogPlusOne,
	_OpTypeLowerName[222:232]: LogPlusOne,
	_OpTypeName[232:240]:      Logistic,
	_OpTypeLowerName[232:240]: Logistic,
	_OpTypeName[240:247]:      Maximum,
	_OpTypeLowerName[240:247]: Maximum,
	_OpTypeName[247:254]:      Minimum,
	_OpTypeLowerName[247:254]: Minimum,
	_OpTypeName[254:262]:      Multiply,
	_OpTypeLowerName[254:262]: Multiply,
	_OpTypeName[262:268]:      Negate,
	_OpTypeLowerName[262:268]: Negate,
	_OpTypeName[268:271]:      Not,
	_OpTypeLowerName[268:271]: Not,
	_OpTypeName[271:273]:      Or,
	_OpTypeLowerName[271:273]: Or,
	_OpTypeName[273:279]:      Popcnt,
	_OpTypeLowerName[273:279]: Popcnt,
	_OpTypeName[279:284]:      Power,
	_OpTypeLowerName[279:284]: Power,
	_OpTypeName[284:288]:      Real,
	_OpTypeLowerName[284:288]: Real,
	_OpTypeName[288:297]:      Remainder,
	_OpTypeLowerName[288:297]: Remainder,
	_OpTypeName[297:303]:      Reduce,
	_OpTypeLowerName[297:303]: Reduce,
	_OpTypeName[303:310]:      Reshape,
	_OpTypeLowerName[303:310]: Reshape,
	_OpTypeName[310:325]:      RngBitGenerator,
	_OpTypeLowerName[310:325]: RngBitGenerator,
	_OpTypeName[325:340]:      RoundNearestAfz,
	_OpTypeLowerName[325:340]: RoundNearestAfz,
	_OpTypeName[340:356]:      RoundNearestEven,
	_OpTypeLowerName[340:356]: RoundNearestEven,
	_OpTypeName[356:361]:      Rsqrt,
	_OpTypeLowerName[356:361]: Rsqrt,
	_OpTypeName[361:368]:      Scatter,
	_OpTypeLowerName[361:368]: Scatter,
	_OpTypeName[368:377]:      ShiftLeft,
	_OpTypeLowerName[368:377]: ShiftLeft,
	_OpTypeName[377:397]:      ShiftRightArithmetic,
	_OpTypeLowerName[377:397]: ShiftRightArithmetic,
	_OpTypeName[397:414]:      ShiftRightLogical,
	_OpTypeLowerName[397:414]: ShiftRightLogical,
	_OpTypeName[414:418]:      Sign,
	_OpTypeLowerName[414:418]: Sign,
	_OpTypeName[418:422]:      Sine,
	_OpTypeLowerName[418:422]: Sine,
	_OpTypeName[422:427]:      Slice,
	_OpTypeLowerName[422:427]: Slice,
	_OpTypeName[427:431]:      Sqrt,
	_OpTypeLowerName[427:431]: Sqrt,
	_OpTypeName[431:439]:      Subtract,
	_OpTypeLowerName[431:439]: Subtract,
	_OpTypeName[439:442]:      Tan,
	_OpTypeLowerName[439:442]: Tan,
	_OpTypeName[442:446]:      Tanh,
	_OpTypeLowerName[442:446]: Tanh,
	_OpTypeName[446:455]:      Transpose,
	_OpTypeLowerName[446:455]: Transpose,
	_OpTypeName[455:458]:      Xor,
	_OpTypeLowerName[455:458]: Xor,
	_OpTypeName[458:479]:      BatchNormForInference,
	_OpTypeLowerName[458:479]: BatchNormForInference,
	_OpTypeName[479:499]:      BatchNormForTraining,
	_OpTypeLowerName[479:499]: BatchNormForTraining,
	_OpTypeName[499:516]:      BatchNormGradient,
	_OpTypeLowerName[499:516]: BatchNormGradient,
	_OpTypeName[516:520]:      Case,
	_OpTypeLowerName[516:520]: Case,
	_OpTypeName[520:528]:      Cholesky,
	_OpTypeLowerName[520:528]: Cholesky,
	_OpTypeName[528:547]:      CollectiveBroadcast,
	_OpTypeLowerName[528:547]: CollectiveBroadcast,
	_OpTypeName[547:564]:      CollectivePermute,
	_OpTypeLowerName[547:564]: CollectivePermute,
	_OpTypeName[564:573]:      Composite,
	_OpTypeLowerName[564:573]: Composite,
	_OpTypeName[573:584]:      Convolution,
	_OpTypeLowerName[573:584]: Convolution,
	_OpTypeName[584:594]:      CustomCall,
	_OpTypeLowerName[584:594]: CustomCall,
	_OpTypeName[594:615]:      DynamicBroadcastInDim,
	_OpTypeLowerName[594:615]: DynamicBroadcastInDim,
	_OpTypeName[615:626]:      DynamicConv,
	_OpTypeLowerName[615:626]: DynamicConv,
	_OpTypeName[626:639]:      DynamicGather,
	_OpTypeLowerName[626:639]: DynamicGather,
	_OpTypeName[639:650]:      DynamicIota,
	_OpTypeLowerName[639:650]: DynamicIota,
	_OpTypeName[650:660]:      DynamicPad,
	_OpTypeLowerName[650:660]: DynamicPad,
	_OpTypeName[660:674]:      DynamicReshape,
	_OpTypeLowerName[660:674]: DynamicReshape,
	_OpTypeName[674:692]:      DynamicUpdateSlice,
	_OpTypeLowerName[674:692]: DynamicUpdateSlice,
	_OpTypeName[692:695]:      Fft,
	_OpTypeLowerName[692:695]: Fft,
	_OpTypeName[695:711]:      GetDimensionSize,
	_OpTypeLowerName[695:711]: GetDimensionSize,
	_OpTypeName[711:726]:      GetTupleElement,
	_OpTypeLowerName[711:726]: GetTupleElement,
	_OpTypeName[726:728]:      If,
	_OpTypeLowerName[726:728]: If,
	_OpTypeName[728:734]:      Infeed,
	_OpTypeLowerName[728:734]: Infeed,
	_OpTypeName[734:753]:      OptimizationBarrier,
	_OpTypeLowerName[734:753]: OptimizationBarrier,
	_OpTypeName[753:760]:      Outfeed,
	_OpTypeLowerName[753:760]: Outfeed,
	_OpTypeName[760:763]:      Pad,
	_OpTypeLowerName[760:763]: Pad,
	_OpTypeName[763:774]:      PartitionId,
	_OpTypeLowerName[763:774]: PartitionId,
	_OpTypeName[774:778]:      Recv,
	_OpTypeLowerName[774:778]: Recv,
	_OpTypeName[778:793]:      ReducePrecision,
	_OpTypeLowerName[778:793]: ReducePrecision,
	_OpTypeName[793:806]:      ReduceScatter,
	_OpTypeLowerName[793:806]: ReduceScatter,
	_OpTypeName[806:818]:      ReduceWindow,
	_OpTypeLowerName[806:818]: ReduceWindow,
	_OpTypeName[818:825]:      Reverse,
	_OpTypeLowerName[818:825]: Reverse,
	_OpTypeName[825:831]:      Select,
	_OpTypeLowerName[825:831]: Select,
	_OpTypeName[831:847]:      SelectAndScatter,
	_OpTypeLowerName[831:847]: SelectAndScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:120],
	_OpTypeName[120:126],
	_OpTypeName[126:143],
	_OpTypeName[143:149],
	_OpTypeName[149:159],
	_OpTypeName[159:162],
	_OpTypeName[162:173],
	_OpTypeName[173:192],
	_OpTypeName[192:197],
	_OpTypeName[197:203],
	_OpTypeName[203:207],
	_OpTypeName[207:215],
	_OpTypeName[215:219],
	_OpTypeName[219:222],
	_OpTypeName[222:232],
	_OpTypeName[232:240],
	_OpTypeName[240:247],
	_OpTypeName[247:254],
	_OpTypeName[254:262],
	_OpTypeName[262:268],
	_OpTypeName[268:271],
	_OpTypeName[271:273],
	_OpTypeName[273:279],
	_OpTypeName[279:284],
	_OpTypeName[284:288],
	_OpTypeName[288:297],
	_OpTypeName[297:303],
	_OpTypeName[303:310],
	_OpTypeName[310:325],
	_OpTypeName[325:340],
	_OpTypeName[340:356],
	_OpTypeName[356:361],
	_OpTypeName[361:368],
	_OpTypeName[368:377],
	_OpTypeName[377:397],
	_OpTypeName[397:414],
	_OpTypeName[414:418],
	_OpTypeName[418:422],
	_OpTypeName[422:427],
	_OpTypeName[427:431],
	_OpTypeName[431:439],
	_OpTypeName[439:442],
	_OpTypeName[442:446],
	_OpTypeName[446:455],
	_OpTypeName[455:458],
	_OpTypeName[458:479],
	_OpTypeName[479:499],
	_OpTypeName[499:516],
	_OpTypeName[516:520],
	_OpTypeName[520:528],
	_OpTypeName[528:547],
	_OpTypeName[547:564],
	_OpTypeName[564:573],
	_OpTypeName[573:584],
	_OpTypeName[584:594],
	_OpTypeName[594:615],
	_OpTypeName[615:626],
	_OpTypeName[626:639],
	_OpTypeName[639:650],
	_OpTypeName[650:660],
	_OpTypeName[660:674],
	_OpTypeName[674:692],
	_OpTypeName[692:695],
	_OpTypeName[695:711],
	_OpTypeName[711:726],
	_OpTypeName[726:728],
	_OpTypeName[728:734],
	_OpTypeName[734:753],
	_OpTypeName[753:760],
	_OpTypeName[760:763],
	_OpTypeName[763:774],
	_OpTypeName[774:778],
	_OpTypeName[778:793],
	_OpTypeName[793:806],
	_OpTypeName[806:818],
	_OpTypeName[818:825],
	_OpTypeName[825:831],
	_OpTypeName[831:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
