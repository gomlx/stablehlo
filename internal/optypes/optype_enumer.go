// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndArgMinMaxBatchNormForInferenceBatchNormForTrainingBatchNormGradientBitCountBitcastBroadcastBroadcastInDimCeilCountLeadingZerosCompareConjCosineDivideErfExponentialExponentialMinusOneFloorImagIotaIsFiniteLogLog1pLogisticMaximumMinimumMultiplyNegateNotOrPadPowerRealReduceBitwiseAndReduceBitwiseOrReduceBitwiseXorReduceLogicalAndReduceLogicalOrReduceLogicalXorReduceMaxReduceMinReduceProductReduceSumReduceWindowRemainderReshapeReverseRngBitGeneratorRoundRsqrtScatterMaxScatterMinScatterSumSelectAndScatterMaxSelectAndScatterMinSelectAndScatterSumShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanhTransposeWhereXorLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 51, 72, 92, 109, 117, 124, 133, 147, 151, 168, 175, 179, 185, 191, 194, 205, 224, 229, 233, 237, 245, 248, 253, 261, 268, 275, 283, 289, 292, 294, 297, 302, 306, 322, 337, 353, 369, 384, 400, 409, 418, 431, 440, 452, 461, 468, 475, 490, 495, 500, 510, 520, 530, 549, 568, 587, 596, 616, 633, 637, 641, 646, 650, 658, 662, 671, 676, 679, 683}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandargminmaxbatchnormforinferencebatchnormfortrainingbatchnormgradientbitcountbitcastbroadcastbroadcastindimceilcountleadingzeroscompareconjcosinedivideerfexponentialexponentialminusonefloorimagiotaisfiniteloglog1plogisticmaximumminimummultiplynegatenotorpadpowerrealreducebitwiseandreducebitwiseorreducebitwisexorreducelogicalandreducelogicalorreducelogicalxorreducemaxreduceminreduceproductreducesumreducewindowremainderreshapereverserngbitgeneratorroundrsqrtscattermaxscatterminscattersumselectandscattermaxselectandscatterminselectandscattersumshiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttanhtransposewherexorlast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[ArgMinMax-(7)]
	_ = x[BatchNormForInference-(8)]
	_ = x[BatchNormForTraining-(9)]
	_ = x[BatchNormGradient-(10)]
	_ = x[BitCount-(11)]
	_ = x[Bitcast-(12)]
	_ = x[Broadcast-(13)]
	_ = x[BroadcastInDim-(14)]
	_ = x[Ceil-(15)]
	_ = x[CountLeadingZeros-(16)]
	_ = x[Compare-(17)]
	_ = x[Conj-(18)]
	_ = x[Cosine-(19)]
	_ = x[Divide-(20)]
	_ = x[Erf-(21)]
	_ = x[Exponential-(22)]
	_ = x[ExponentialMinusOne-(23)]
	_ = x[Floor-(24)]
	_ = x[Imag-(25)]
	_ = x[Iota-(26)]
	_ = x[IsFinite-(27)]
	_ = x[Log-(28)]
	_ = x[Log1p-(29)]
	_ = x[Logistic-(30)]
	_ = x[Maximum-(31)]
	_ = x[Minimum-(32)]
	_ = x[Multiply-(33)]
	_ = x[Negate-(34)]
	_ = x[Not-(35)]
	_ = x[Or-(36)]
	_ = x[Pad-(37)]
	_ = x[Power-(38)]
	_ = x[Real-(39)]
	_ = x[ReduceBitwiseAnd-(40)]
	_ = x[ReduceBitwiseOr-(41)]
	_ = x[ReduceBitwiseXor-(42)]
	_ = x[ReduceLogicalAnd-(43)]
	_ = x[ReduceLogicalOr-(44)]
	_ = x[ReduceLogicalXor-(45)]
	_ = x[ReduceMax-(46)]
	_ = x[ReduceMin-(47)]
	_ = x[ReduceProduct-(48)]
	_ = x[ReduceSum-(49)]
	_ = x[ReduceWindow-(50)]
	_ = x[Remainder-(51)]
	_ = x[Reshape-(52)]
	_ = x[Reverse-(53)]
	_ = x[RngBitGenerator-(54)]
	_ = x[Round-(55)]
	_ = x[Rsqrt-(56)]
	_ = x[ScatterMax-(57)]
	_ = x[ScatterMin-(58)]
	_ = x[ScatterSum-(59)]
	_ = x[SelectAndScatterMax-(60)]
	_ = x[SelectAndScatterMin-(61)]
	_ = x[SelectAndScatterSum-(62)]
	_ = x[ShiftLeft-(63)]
	_ = x[ShiftRightArithmetic-(64)]
	_ = x[ShiftRightLogical-(65)]
	_ = x[Sign-(66)]
	_ = x[Sine-(67)]
	_ = x[Slice-(68)]
	_ = x[Sqrt-(69)]
	_ = x[Subtract-(70)]
	_ = x[Tanh-(71)]
	_ = x[Transpose-(72)]
	_ = x[Where-(73)]
	_ = x[Xor-(74)]
	_ = x[Last-(75)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, ArgMinMax, BatchNormForInference, BatchNormForTraining, BatchNormGradient, BitCount, Bitcast, Broadcast, BroadcastInDim, Ceil, CountLeadingZeros, Compare, Conj, Cosine, Divide, Erf, Exponential, ExponentialMinusOne, Floor, Imag, Iota, IsFinite, Log, Log1p, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Power, Real, ReduceBitwiseAnd, ReduceBitwiseOr, ReduceBitwiseXor, ReduceLogicalAnd, ReduceLogicalOr, ReduceLogicalXor, ReduceMax, ReduceMin, ReduceProduct, ReduceSum, ReduceWindow, Remainder, Reshape, Reverse, RngBitGenerator, Round, Rsqrt, ScatterMax, ScatterMin, ScatterSum, SelectAndScatterMax, SelectAndScatterMin, SelectAndScatterSum, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tanh, Transpose, Where, Xor, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:51]:        ArgMinMax,
	_OpTypeLowerName[42:51]:   ArgMinMax,
	_OpTypeName[51:72]:        BatchNormForInference,
	_OpTypeLowerName[51:72]:   BatchNormForInference,
	_OpTypeName[72:92]:        BatchNormForTraining,
	_OpTypeLowerName[72:92]:   BatchNormForTraining,
	_OpTypeName[92:109]:       BatchNormGradient,
	_OpTypeLowerName[92:109]:  BatchNormGradient,
	_OpTypeName[109:117]:      BitCount,
	_OpTypeLowerName[109:117]: BitCount,
	_OpTypeName[117:124]:      Bitcast,
	_OpTypeLowerName[117:124]: Bitcast,
	_OpTypeName[124:133]:      Broadcast,
	_OpTypeLowerName[124:133]: Broadcast,
	_OpTypeName[133:147]:      BroadcastInDim,
	_OpTypeLowerName[133:147]: BroadcastInDim,
	_OpTypeName[147:151]:      Ceil,
	_OpTypeLowerName[147:151]: Ceil,
	_OpTypeName[151:168]:      CountLeadingZeros,
	_OpTypeLowerName[151:168]: CountLeadingZeros,
	_OpTypeName[168:175]:      Compare,
	_OpTypeLowerName[168:175]: Compare,
	_OpTypeName[175:179]:      Conj,
	_OpTypeLowerName[175:179]: Conj,
	_OpTypeName[179:185]:      Cosine,
	_OpTypeLowerName[179:185]: Cosine,
	_OpTypeName[185:191]:      Divide,
	_OpTypeLowerName[185:191]: Divide,
	_OpTypeName[191:194]:      Erf,
	_OpTypeLowerName[191:194]: Erf,
	_OpTypeName[194:205]:      Exponential,
	_OpTypeLowerName[194:205]: Exponential,
	_OpTypeName[205:224]:      ExponentialMinusOne,
	_OpTypeLowerName[205:224]: ExponentialMinusOne,
	_OpTypeName[224:229]:      Floor,
	_OpTypeLowerName[224:229]: Floor,
	_OpTypeName[229:233]:      Imag,
	_OpTypeLowerName[229:233]: Imag,
	_OpTypeName[233:237]:      Iota,
	_OpTypeLowerName[233:237]: Iota,
	_OpTypeName[237:245]:      IsFinite,
	_OpTypeLowerName[237:245]: IsFinite,
	_OpTypeName[245:248]:      Log,
	_OpTypeLowerName[245:248]: Log,
	_OpTypeName[248:253]:      Log1p,
	_OpTypeLowerName[248:253]: Log1p,
	_OpTypeName[253:261]:      Logistic,
	_OpTypeLowerName[253:261]: Logistic,
	_OpTypeName[261:268]:      Maximum,
	_OpTypeLowerName[261:268]: Maximum,
	_OpTypeName[268:275]:      Minimum,
	_OpTypeLowerName[268:275]: Minimum,
	_OpTypeName[275:283]:      Multiply,
	_OpTypeLowerName[275:283]: Multiply,
	_OpTypeName[283:289]:      Negate,
	_OpTypeLowerName[283:289]: Negate,
	_OpTypeName[289:292]:      Not,
	_OpTypeLowerName[289:292]: Not,
	_OpTypeName[292:294]:      Or,
	_OpTypeLowerName[292:294]: Or,
	_OpTypeName[294:297]:      Pad,
	_OpTypeLowerName[294:297]: Pad,
	_OpTypeName[297:302]:      Power,
	_OpTypeLowerName[297:302]: Power,
	_OpTypeName[302:306]:      Real,
	_OpTypeLowerName[302:306]: Real,
	_OpTypeName[306:322]:      ReduceBitwiseAnd,
	_OpTypeLowerName[306:322]: ReduceBitwiseAnd,
	_OpTypeName[322:337]:      ReduceBitwiseOr,
	_OpTypeLowerName[322:337]: ReduceBitwiseOr,
	_OpTypeName[337:353]:      ReduceBitwiseXor,
	_OpTypeLowerName[337:353]: ReduceBitwiseXor,
	_OpTypeName[353:369]:      ReduceLogicalAnd,
	_OpTypeLowerName[353:369]: ReduceLogicalAnd,
	_OpTypeName[369:384]:      ReduceLogicalOr,
	_OpTypeLowerName[369:384]: ReduceLogicalOr,
	_OpTypeName[384:400]:      ReduceLogicalXor,
	_OpTypeLowerName[384:400]: ReduceLogicalXor,
	_OpTypeName[400:409]:      ReduceMax,
	_OpTypeLowerName[400:409]: ReduceMax,
	_OpTypeName[409:418]:      ReduceMin,
	_OpTypeLowerName[409:418]: ReduceMin,
	_OpTypeName[418:431]:      ReduceProduct,
	_OpTypeLowerName[418:431]: ReduceProduct,
	_OpTypeName[431:440]:      ReduceSum,
	_OpTypeLowerName[431:440]: ReduceSum,
	_OpTypeName[440:452]:      ReduceWindow,
	_OpTypeLowerName[440:452]: ReduceWindow,
	_OpTypeName[452:461]:      Remainder,
	_OpTypeLowerName[452:461]: Remainder,
	_OpTypeName[461:468]:      Reshape,
	_OpTypeLowerName[461:468]: Reshape,
	_OpTypeName[468:475]:      Reverse,
	_OpTypeLowerName[468:475]: Reverse,
	_OpTypeName[475:490]:      RngBitGenerator,
	_OpTypeLowerName[475:490]: RngBitGenerator,
	_OpTypeName[490:495]:      Round,
	_OpTypeLowerName[490:495]: Round,
	_OpTypeName[495:500]:      Rsqrt,
	_OpTypeLowerName[495:500]: Rsqrt,
	_OpTypeName[500:510]:      ScatterMax,
	_OpTypeLowerName[500:510]: ScatterMax,
	_OpTypeName[510:520]:      ScatterMin,
	_OpTypeLowerName[510:520]: ScatterMin,
	_OpTypeName[520:530]:      ScatterSum,
	_OpTypeLowerName[520:530]: ScatterSum,
	_OpTypeName[530:549]:      SelectAndScatterMax,
	_OpTypeLowerName[530:549]: SelectAndScatterMax,
	_OpTypeName[549:568]:      SelectAndScatterMin,
	_OpTypeLowerName[549:568]: SelectAndScatterMin,
	_OpTypeName[568:587]:      SelectAndScatterSum,
	_OpTypeLowerName[568:587]: SelectAndScatterSum,
	_OpTypeName[587:596]:      ShiftLeft,
	_OpTypeLowerName[587:596]: ShiftLeft,
	_OpTypeName[596:616]:      ShiftRightArithmetic,
	_OpTypeLowerName[596:616]: ShiftRightArithmetic,
	_OpTypeName[616:633]:      ShiftRightLogical,
	_OpTypeLowerName[616:633]: ShiftRightLogical,
	_OpTypeName[633:637]:      Sign,
	_OpTypeLowerName[633:637]: Sign,
	_OpTypeName[637:641]:      Sine,
	_OpTypeLowerName[637:641]: Sine,
	_OpTypeName[641:646]:      Slice,
	_OpTypeLowerName[641:646]: Slice,
	_OpTypeName[646:650]:      Sqrt,
	_OpTypeLowerName[646:650]: Sqrt,
	_OpTypeName[650:658]:      Subtract,
	_OpTypeLowerName[650:658]: Subtract,
	_OpTypeName[658:662]:      Tanh,
	_OpTypeLowerName[658:662]: Tanh,
	_OpTypeName[662:671]:      Transpose,
	_OpTypeLowerName[662:671]: Transpose,
	_OpTypeName[671:676]:      Where,
	_OpTypeLowerName[671:676]: Where,
	_OpTypeName[676:679]:      Xor,
	_OpTypeLowerName[676:679]: Xor,
	_OpTypeName[679:683]:      Last,
	_OpTypeLowerName[679:683]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:51],
	_OpTypeName[51:72],
	_OpTypeName[72:92],
	_OpTypeName[92:109],
	_OpTypeName[109:117],
	_OpTypeName[117:124],
	_OpTypeName[124:133],
	_OpTypeName[133:147],
	_OpTypeName[147:151],
	_OpTypeName[151:168],
	_OpTypeName[168:175],
	_OpTypeName[175:179],
	_OpTypeName[179:185],
	_OpTypeName[185:191],
	_OpTypeName[191:194],
	_OpTypeName[194:205],
	_OpTypeName[205:224],
	_OpTypeName[224:229],
	_OpTypeName[229:233],
	_OpTypeName[233:237],
	_OpTypeName[237:245],
	_OpTypeName[245:248],
	_OpTypeName[248:253],
	_OpTypeName[253:261],
	_OpTypeName[261:268],
	_OpTypeName[268:275],
	_OpTypeName[275:283],
	_OpTypeName[283:289],
	_OpTypeName[289:292],
	_OpTypeName[292:294],
	_OpTypeName[294:297],
	_OpTypeName[297:302],
	_OpTypeName[302:306],
	_OpTypeName[306:322],
	_OpTypeName[322:337],
	_OpTypeName[337:353],
	_OpTypeName[353:369],
	_OpTypeName[369:384],
	_OpTypeName[384:400],
	_OpTypeName[400:409],
	_OpTypeName[409:418],
	_OpTypeName[418:431],
	_OpTypeName[431:440],
	_OpTypeName[440:452],
	_OpTypeName[452:461],
	_OpTypeName[461:468],
	_OpTypeName[468:475],
	_OpTypeName[475:490],
	_OpTypeName[490:495],
	_OpTypeName[495:500],
	_OpTypeName[500:510],
	_OpTypeName[510:520],
	_OpTypeName[520:530],
	_OpTypeName[530:549],
	_OpTypeName[549:568],
	_OpTypeName[568:587],
	_OpTypeName[587:596],
	_OpTypeName[596:616],
	_OpTypeName[616:633],
	_OpTypeName[633:637],
	_OpTypeName[637:641],
	_OpTypeName[641:646],
	_OpTypeName[646:650],
	_OpTypeName[650:658],
	_OpTypeName[658:662],
	_OpTypeName[662:671],
	_OpTypeName[671:676],
	_OpTypeName[676:679],
	_OpTypeName[679:683],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
