// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BatchNormForInferenceBatchNormForTrainingBatchNormGradientBitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertConvolutionCosineCountLeadingZerosDivideDotGeneralDynamicSliceDynamicUpdateSliceErfExponentialExponentialMinusOneFftFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReduceWindowReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterSelectSelectAndScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 68, 88, 105, 119, 133, 137, 141, 146, 153, 160, 171, 178, 189, 195, 212, 218, 228, 240, 258, 261, 272, 291, 294, 299, 305, 309, 317, 321, 324, 334, 342, 349, 356, 364, 370, 373, 375, 378, 384, 389, 393, 402, 408, 420, 427, 434, 449, 464, 480, 485, 492, 498, 514, 523, 543, 560, 564, 568, 573, 577, 585, 588, 592, 601, 604, 608, 616, 635, 652, 661, 671, 692, 703, 716, 727, 737, 751, 767, 782, 784, 790, 809, 816, 827, 831, 846, 859, 863, 878, 883, 900, 915, 920, 924}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2batchnormforinferencebatchnormfortrainingbatchnormgradientbitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertconvolutioncosinecountleadingzerosdividedotgeneraldynamicslicedynamicupdatesliceerfexponentialexponentialminusonefftfloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereducewindowreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscatterselectselectandscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorcasecholeskycollectivebroadcastcollectivepermutecompositecustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapegetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BatchNormInference-(8)]
	_ = x[BatchNormForTraining-(9)]
	_ = x[BatchNormGradient-(10)]
	_ = x[BitcastConvert-(11)]
	_ = x[BroadcastInDim-(12)]
	_ = x[Cbrt-(13)]
	_ = x[Ceil-(14)]
	_ = x[Clamp-(15)]
	_ = x[Compare-(16)]
	_ = x[Complex-(17)]
	_ = x[Concatenate-(18)]
	_ = x[Convert-(19)]
	_ = x[Convolution-(20)]
	_ = x[Cosine-(21)]
	_ = x[CountLeadingZeros-(22)]
	_ = x[Divide-(23)]
	_ = x[DotGeneral-(24)]
	_ = x[DynamicSlice-(25)]
	_ = x[DynamicUpdateSlice-(26)]
	_ = x[Erf-(27)]
	_ = x[Exponential-(28)]
	_ = x[ExponentialMinusOne-(29)]
	_ = x[Fft-(30)]
	_ = x[Floor-(31)]
	_ = x[Gather-(32)]
	_ = x[Imag-(33)]
	_ = x[IsFinite-(34)]
	_ = x[Iota-(35)]
	_ = x[Log-(36)]
	_ = x[LogPlusOne-(37)]
	_ = x[Logistic-(38)]
	_ = x[Maximum-(39)]
	_ = x[Minimum-(40)]
	_ = x[Multiply-(41)]
	_ = x[Negate-(42)]
	_ = x[Not-(43)]
	_ = x[Or-(44)]
	_ = x[Pad-(45)]
	_ = x[Popcnt-(46)]
	_ = x[Power-(47)]
	_ = x[Real-(48)]
	_ = x[Remainder-(49)]
	_ = x[Reduce-(50)]
	_ = x[ReduceWindow-(51)]
	_ = x[Reshape-(52)]
	_ = x[Reverse-(53)]
	_ = x[RngBitGenerator-(54)]
	_ = x[RoundNearestAfz-(55)]
	_ = x[RoundNearestEven-(56)]
	_ = x[Rsqrt-(57)]
	_ = x[Scatter-(58)]
	_ = x[Select-(59)]
	_ = x[SelectAndScatter-(60)]
	_ = x[ShiftLeft-(61)]
	_ = x[ShiftRightArithmetic-(62)]
	_ = x[ShiftRightLogical-(63)]
	_ = x[Sign-(64)]
	_ = x[Sine-(65)]
	_ = x[Slice-(66)]
	_ = x[Sqrt-(67)]
	_ = x[Subtract-(68)]
	_ = x[Tan-(69)]
	_ = x[Tanh-(70)]
	_ = x[Transpose-(71)]
	_ = x[Xor-(72)]
	_ = x[Case-(73)]
	_ = x[Cholesky-(74)]
	_ = x[CollectiveBroadcast-(75)]
	_ = x[CollectivePermute-(76)]
	_ = x[Composite-(77)]
	_ = x[CustomCall-(78)]
	_ = x[DynamicBroadcastInDim-(79)]
	_ = x[DynamicConv-(80)]
	_ = x[DynamicGather-(81)]
	_ = x[DynamicIota-(82)]
	_ = x[DynamicPad-(83)]
	_ = x[DynamicReshape-(84)]
	_ = x[GetDimensionSize-(85)]
	_ = x[GetTupleElement-(86)]
	_ = x[If-(87)]
	_ = x[Infeed-(88)]
	_ = x[OptimizationBarrier-(89)]
	_ = x[Outfeed-(90)]
	_ = x[PartitionId-(91)]
	_ = x[Recv-(92)]
	_ = x[ReducePrecision-(93)]
	_ = x[ReduceScatter-(94)]
	_ = x[Send-(95)]
	_ = x[TriangularSolve-(96)]
	_ = x[Tuple-(97)]
	_ = x[UniformDequantize-(98)]
	_ = x[UniformQuantize-(99)]
	_ = x[While-(100)]
	_ = x[Last-(101)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BatchNormInference, BatchNormForTraining, BatchNormGradient, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Convolution, Cosine, CountLeadingZeros, Divide, DotGeneral, DynamicSlice, DynamicUpdateSlice, Erf, Exponential, ExponentialMinusOne, Fft, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, ReduceWindow, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, Select, SelectAndScatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:68]:        BatchNormInference,
	_OpTypeLowerName[47:68]:   BatchNormInference,
	_OpTypeName[68:88]:        BatchNormForTraining,
	_OpTypeLowerName[68:88]:   BatchNormForTraining,
	_OpTypeName[88:105]:       BatchNormGradient,
	_OpTypeLowerName[88:105]:  BatchNormGradient,
	_OpTypeName[105:119]:      BitcastConvert,
	_OpTypeLowerName[105:119]: BitcastConvert,
	_OpTypeName[119:133]:      BroadcastInDim,
	_OpTypeLowerName[119:133]: BroadcastInDim,
	_OpTypeName[133:137]:      Cbrt,
	_OpTypeLowerName[133:137]: Cbrt,
	_OpTypeName[137:141]:      Ceil,
	_OpTypeLowerName[137:141]: Ceil,
	_OpTypeName[141:146]:      Clamp,
	_OpTypeLowerName[141:146]: Clamp,
	_OpTypeName[146:153]:      Compare,
	_OpTypeLowerName[146:153]: Compare,
	_OpTypeName[153:160]:      Complex,
	_OpTypeLowerName[153:160]: Complex,
	_OpTypeName[160:171]:      Concatenate,
	_OpTypeLowerName[160:171]: Concatenate,
	_OpTypeName[171:178]:      Convert,
	_OpTypeLowerName[171:178]: Convert,
	_OpTypeName[178:189]:      Convolution,
	_OpTypeLowerName[178:189]: Convolution,
	_OpTypeName[189:195]:      Cosine,
	_OpTypeLowerName[189:195]: Cosine,
	_OpTypeName[195:212]:      CountLeadingZeros,
	_OpTypeLowerName[195:212]: CountLeadingZeros,
	_OpTypeName[212:218]:      Divide,
	_OpTypeLowerName[212:218]: Divide,
	_OpTypeName[218:228]:      DotGeneral,
	_OpTypeLowerName[218:228]: DotGeneral,
	_OpTypeName[228:240]:      DynamicSlice,
	_OpTypeLowerName[228:240]: DynamicSlice,
	_OpTypeName[240:258]:      DynamicUpdateSlice,
	_OpTypeLowerName[240:258]: DynamicUpdateSlice,
	_OpTypeName[258:261]:      Erf,
	_OpTypeLowerName[258:261]: Erf,
	_OpTypeName[261:272]:      Exponential,
	_OpTypeLowerName[261:272]: Exponential,
	_OpTypeName[272:291]:      ExponentialMinusOne,
	_OpTypeLowerName[272:291]: ExponentialMinusOne,
	_OpTypeName[291:294]:      Fft,
	_OpTypeLowerName[291:294]: Fft,
	_OpTypeName[294:299]:      Floor,
	_OpTypeLowerName[294:299]: Floor,
	_OpTypeName[299:305]:      Gather,
	_OpTypeLowerName[299:305]: Gather,
	_OpTypeName[305:309]:      Imag,
	_OpTypeLowerName[305:309]: Imag,
	_OpTypeName[309:317]:      IsFinite,
	_OpTypeLowerName[309:317]: IsFinite,
	_OpTypeName[317:321]:      Iota,
	_OpTypeLowerName[317:321]: Iota,
	_OpTypeName[321:324]:      Log,
	_OpTypeLowerName[321:324]: Log,
	_OpTypeName[324:334]:      LogPlusOne,
	_OpTypeLowerName[324:334]: LogPlusOne,
	_OpTypeName[334:342]:      Logistic,
	_OpTypeLowerName[334:342]: Logistic,
	_OpTypeName[342:349]:      Maximum,
	_OpTypeLowerName[342:349]: Maximum,
	_OpTypeName[349:356]:      Minimum,
	_OpTypeLowerName[349:356]: Minimum,
	_OpTypeName[356:364]:      Multiply,
	_OpTypeLowerName[356:364]: Multiply,
	_OpTypeName[364:370]:      Negate,
	_OpTypeLowerName[364:370]: Negate,
	_OpTypeName[370:373]:      Not,
	_OpTypeLowerName[370:373]: Not,
	_OpTypeName[373:375]:      Or,
	_OpTypeLowerName[373:375]: Or,
	_OpTypeName[375:378]:      Pad,
	_OpTypeLowerName[375:378]: Pad,
	_OpTypeName[378:384]:      Popcnt,
	_OpTypeLowerName[378:384]: Popcnt,
	_OpTypeName[384:389]:      Power,
	_OpTypeLowerName[384:389]: Power,
	_OpTypeName[389:393]:      Real,
	_OpTypeLowerName[389:393]: Real,
	_OpTypeName[393:402]:      Remainder,
	_OpTypeLowerName[393:402]: Remainder,
	_OpTypeName[402:408]:      Reduce,
	_OpTypeLowerName[402:408]: Reduce,
	_OpTypeName[408:420]:      ReduceWindow,
	_OpTypeLowerName[408:420]: ReduceWindow,
	_OpTypeName[420:427]:      Reshape,
	_OpTypeLowerName[420:427]: Reshape,
	_OpTypeName[427:434]:      Reverse,
	_OpTypeLowerName[427:434]: Reverse,
	_OpTypeName[434:449]:      RngBitGenerator,
	_OpTypeLowerName[434:449]: RngBitGenerator,
	_OpTypeName[449:464]:      RoundNearestAfz,
	_OpTypeLowerName[449:464]: RoundNearestAfz,
	_OpTypeName[464:480]:      RoundNearestEven,
	_OpTypeLowerName[464:480]: RoundNearestEven,
	_OpTypeName[480:485]:      Rsqrt,
	_OpTypeLowerName[480:485]: Rsqrt,
	_OpTypeName[485:492]:      Scatter,
	_OpTypeLowerName[485:492]: Scatter,
	_OpTypeName[492:498]:      Select,
	_OpTypeLowerName[492:498]: Select,
	_OpTypeName[498:514]:      SelectAndScatter,
	_OpTypeLowerName[498:514]: SelectAndScatter,
	_OpTypeName[514:523]:      ShiftLeft,
	_OpTypeLowerName[514:523]: ShiftLeft,
	_OpTypeName[523:543]:      ShiftRightArithmetic,
	_OpTypeLowerName[523:543]: ShiftRightArithmetic,
	_OpTypeName[543:560]:      ShiftRightLogical,
	_OpTypeLowerName[543:560]: ShiftRightLogical,
	_OpTypeName[560:564]:      Sign,
	_OpTypeLowerName[560:564]: Sign,
	_OpTypeName[564:568]:      Sine,
	_OpTypeLowerName[564:568]: Sine,
	_OpTypeName[568:573]:      Slice,
	_OpTypeLowerName[568:573]: Slice,
	_OpTypeName[573:577]:      Sqrt,
	_OpTypeLowerName[573:577]: Sqrt,
	_OpTypeName[577:585]:      Subtract,
	_OpTypeLowerName[577:585]: Subtract,
	_OpTypeName[585:588]:      Tan,
	_OpTypeLowerName[585:588]: Tan,
	_OpTypeName[588:592]:      Tanh,
	_OpTypeLowerName[588:592]: Tanh,
	_OpTypeName[592:601]:      Transpose,
	_OpTypeLowerName[592:601]: Transpose,
	_OpTypeName[601:604]:      Xor,
	_OpTypeLowerName[601:604]: Xor,
	_OpTypeName[604:608]:      Case,
	_OpTypeLowerName[604:608]: Case,
	_OpTypeName[608:616]:      Cholesky,
	_OpTypeLowerName[608:616]: Cholesky,
	_OpTypeName[616:635]:      CollectiveBroadcast,
	_OpTypeLowerName[616:635]: CollectiveBroadcast,
	_OpTypeName[635:652]:      CollectivePermute,
	_OpTypeLowerName[635:652]: CollectivePermute,
	_OpTypeName[652:661]:      Composite,
	_OpTypeLowerName[652:661]: Composite,
	_OpTypeName[661:671]:      CustomCall,
	_OpTypeLowerName[661:671]: CustomCall,
	_OpTypeName[671:692]:      DynamicBroadcastInDim,
	_OpTypeLowerName[671:692]: DynamicBroadcastInDim,
	_OpTypeName[692:703]:      DynamicConv,
	_OpTypeLowerName[692:703]: DynamicConv,
	_OpTypeName[703:716]:      DynamicGather,
	_OpTypeLowerName[703:716]: DynamicGather,
	_OpTypeName[716:727]:      DynamicIota,
	_OpTypeLowerName[716:727]: DynamicIota,
	_OpTypeName[727:737]:      DynamicPad,
	_OpTypeLowerName[727:737]: DynamicPad,
	_OpTypeName[737:751]:      DynamicReshape,
	_OpTypeLowerName[737:751]: DynamicReshape,
	_OpTypeName[751:767]:      GetDimensionSize,
	_OpTypeLowerName[751:767]: GetDimensionSize,
	_OpTypeName[767:782]:      GetTupleElement,
	_OpTypeLowerName[767:782]: GetTupleElement,
	_OpTypeName[782:784]:      If,
	_OpTypeLowerName[782:784]: If,
	_OpTypeName[784:790]:      Infeed,
	_OpTypeLowerName[784:790]: Infeed,
	_OpTypeName[790:809]:      OptimizationBarrier,
	_OpTypeLowerName[790:809]: OptimizationBarrier,
	_OpTypeName[809:816]:      Outfeed,
	_OpTypeLowerName[809:816]: Outfeed,
	_OpTypeName[816:827]:      PartitionId,
	_OpTypeLowerName[816:827]: PartitionId,
	_OpTypeName[827:831]:      Recv,
	_OpTypeLowerName[827:831]: Recv,
	_OpTypeName[831:846]:      ReducePrecision,
	_OpTypeLowerName[831:846]: ReducePrecision,
	_OpTypeName[846:859]:      ReduceScatter,
	_OpTypeLowerName[846:859]: ReduceScatter,
	_OpTypeName[859:863]:      Send,
	_OpTypeLowerName[859:863]: Send,
	_OpTypeName[863:878]:      TriangularSolve,
	_OpTypeLowerName[863:878]: TriangularSolve,
	_OpTypeName[878:883]:      Tuple,
	_OpTypeLowerName[878:883]: Tuple,
	_OpTypeName[883:900]:      UniformDequantize,
	_OpTypeLowerName[883:900]: UniformDequantize,
	_OpTypeName[900:915]:      UniformQuantize,
	_OpTypeLowerName[900:915]: UniformQuantize,
	_OpTypeName[915:920]:      While,
	_OpTypeLowerName[915:920]: While,
	_OpTypeName[920:924]:      Last,
	_OpTypeLowerName[920:924]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:68],
	_OpTypeName[68:88],
	_OpTypeName[88:105],
	_OpTypeName[105:119],
	_OpTypeName[119:133],
	_OpTypeName[133:137],
	_OpTypeName[137:141],
	_OpTypeName[141:146],
	_OpTypeName[146:153],
	_OpTypeName[153:160],
	_OpTypeName[160:171],
	_OpTypeName[171:178],
	_OpTypeName[178:189],
	_OpTypeName[189:195],
	_OpTypeName[195:212],
	_OpTypeName[212:218],
	_OpTypeName[218:228],
	_OpTypeName[228:240],
	_OpTypeName[240:258],
	_OpTypeName[258:261],
	_OpTypeName[261:272],
	_OpTypeName[272:291],
	_OpTypeName[291:294],
	_OpTypeName[294:299],
	_OpTypeName[299:305],
	_OpTypeName[305:309],
	_OpTypeName[309:317],
	_OpTypeName[317:321],
	_OpTypeName[321:324],
	_OpTypeName[324:334],
	_OpTypeName[334:342],
	_OpTypeName[342:349],
	_OpTypeName[349:356],
	_OpTypeName[356:364],
	_OpTypeName[364:370],
	_OpTypeName[370:373],
	_OpTypeName[373:375],
	_OpTypeName[375:378],
	_OpTypeName[378:384],
	_OpTypeName[384:389],
	_OpTypeName[389:393],
	_OpTypeName[393:402],
	_OpTypeName[402:408],
	_OpTypeName[408:420],
	_OpTypeName[420:427],
	_OpTypeName[427:434],
	_OpTypeName[434:449],
	_OpTypeName[449:464],
	_OpTypeName[464:480],
	_OpTypeName[480:485],
	_OpTypeName[485:492],
	_OpTypeName[492:498],
	_OpTypeName[498:514],
	_OpTypeName[514:523],
	_OpTypeName[523:543],
	_OpTypeName[543:560],
	_OpTypeName[560:564],
	_OpTypeName[564:568],
	_OpTypeName[568:573],
	_OpTypeName[573:577],
	_OpTypeName[577:585],
	_OpTypeName[585:588],
	_OpTypeName[588:592],
	_OpTypeName[592:601],
	_OpTypeName[601:604],
	_OpTypeName[604:608],
	_OpTypeName[608:616],
	_OpTypeName[616:635],
	_OpTypeName[635:652],
	_OpTypeName[652:661],
	_OpTypeName[661:671],
	_OpTypeName[671:692],
	_OpTypeName[692:703],
	_OpTypeName[703:716],
	_OpTypeName[716:727],
	_OpTypeName[727:737],
	_OpTypeName[737:751],
	_OpTypeName[751:767],
	_OpTypeName[767:782],
	_OpTypeName[782:784],
	_OpTypeName[784:790],
	_OpTypeName[790:809],
	_OpTypeName[809:816],
	_OpTypeName[816:827],
	_OpTypeName[827:831],
	_OpTypeName[831:846],
	_OpTypeName[846:859],
	_OpTypeName[859:863],
	_OpTypeName[863:878],
	_OpTypeName[878:883],
	_OpTypeName[883:900],
	_OpTypeName[900:915],
	_OpTypeName[915:920],
	_OpTypeName[920:924],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
