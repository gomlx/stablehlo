// Code generated by "enumer -type=OpType optypes.go"; DO NOT EDIT.

package optypes

import (
	"fmt"
	"strings"
)

const _OpTypeName = "InvalidFuncReturnConstantIdentityAbsAddAndAtan2BitcastConvertBroadcastInDimCbrtCeilClampCompareComplexConcatenateConvertConvolutionCosineCountLeadingZerosDivideDotGeneralErfExponentialExponentialMinusOneFftFloorGatherImagIsFiniteIotaLogLogPlusOneLogisticMaximumMinimumMultiplyNegateNotOrPadPopcntPowerRealRemainderReduceReduceWindowReshapeReverseRngBitGeneratorRoundNearestAfzRoundNearestEvenRsqrtScatterSelectSelectAndScatterShiftLeftShiftRightArithmeticShiftRightLogicalSignSineSliceSqrtSubtractTanTanhTransposeXorBatchNormForInferenceBatchNormForTrainingBatchNormGradientCaseCholeskyCollectiveBroadcastCollectivePermuteCompositeCustomCallDynamicBroadcastInDimDynamicConvDynamicGatherDynamicIotaDynamicPadDynamicReshapeDynamicUpdateSliceGetDimensionSizeGetTupleElementIfInfeedOptimizationBarrierOutfeedPartitionIdRecvReducePrecisionReduceScatterSendTriangularSolveTupleUniformDequantizeUniformQuantizeWhileLast"

var _OpTypeIndex = [...]uint16{0, 7, 17, 25, 33, 36, 39, 42, 47, 61, 75, 79, 83, 88, 95, 102, 113, 120, 131, 137, 154, 160, 170, 173, 184, 203, 206, 211, 217, 221, 229, 233, 236, 246, 254, 261, 268, 276, 282, 285, 287, 290, 296, 301, 305, 314, 320, 332, 339, 346, 361, 376, 392, 397, 404, 410, 426, 435, 455, 472, 476, 480, 485, 489, 497, 500, 504, 513, 516, 537, 557, 574, 578, 586, 605, 622, 631, 641, 662, 673, 686, 697, 707, 721, 739, 755, 770, 772, 778, 797, 804, 815, 819, 834, 847, 851, 866, 871, 888, 903, 908, 912}

const _OpTypeLowerName = "invalidfuncreturnconstantidentityabsaddandatan2bitcastconvertbroadcastindimcbrtceilclampcomparecomplexconcatenateconvertconvolutioncosinecountleadingzerosdividedotgeneralerfexponentialexponentialminusonefftfloorgatherimagisfiniteiotaloglogplusonelogisticmaximumminimummultiplynegatenotorpadpopcntpowerrealremainderreducereducewindowreshapereverserngbitgeneratorroundnearestafzroundnearestevenrsqrtscatterselectselectandscattershiftleftshiftrightarithmeticshiftrightlogicalsignsineslicesqrtsubtracttantanhtransposexorbatchnormforinferencebatchnormfortrainingbatchnormgradientcasecholeskycollectivebroadcastcollectivepermutecompositecustomcalldynamicbroadcastindimdynamicconvdynamicgatherdynamiciotadynamicpaddynamicreshapedynamicupdateslicegetdimensionsizegettupleelementifinfeedoptimizationbarrieroutfeedpartitionidrecvreduceprecisionreducescattersendtriangularsolvetupleuniformdequantizeuniformquantizewhilelast"

func (i OpType) String() string {
	if i < 0 || i >= OpType(len(_OpTypeIndex)-1) {
		return fmt.Sprintf("OpType(%d)", i)
	}
	return _OpTypeName[_OpTypeIndex[i]:_OpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpTypeNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[FuncReturn-(1)]
	_ = x[Constant-(2)]
	_ = x[Identity-(3)]
	_ = x[Abs-(4)]
	_ = x[Add-(5)]
	_ = x[And-(6)]
	_ = x[Atan2-(7)]
	_ = x[BitcastConvert-(8)]
	_ = x[BroadcastInDim-(9)]
	_ = x[Cbrt-(10)]
	_ = x[Ceil-(11)]
	_ = x[Clamp-(12)]
	_ = x[Compare-(13)]
	_ = x[Complex-(14)]
	_ = x[Concatenate-(15)]
	_ = x[Convert-(16)]
	_ = x[Convolution-(17)]
	_ = x[Cosine-(18)]
	_ = x[CountLeadingZeros-(19)]
	_ = x[Divide-(20)]
	_ = x[DotGeneral-(21)]
	_ = x[Erf-(22)]
	_ = x[Exponential-(23)]
	_ = x[ExponentialMinusOne-(24)]
	_ = x[Fft-(25)]
	_ = x[Floor-(26)]
	_ = x[Gather-(27)]
	_ = x[Imag-(28)]
	_ = x[IsFinite-(29)]
	_ = x[Iota-(30)]
	_ = x[Log-(31)]
	_ = x[LogPlusOne-(32)]
	_ = x[Logistic-(33)]
	_ = x[Maximum-(34)]
	_ = x[Minimum-(35)]
	_ = x[Multiply-(36)]
	_ = x[Negate-(37)]
	_ = x[Not-(38)]
	_ = x[Or-(39)]
	_ = x[Pad-(40)]
	_ = x[Popcnt-(41)]
	_ = x[Power-(42)]
	_ = x[Real-(43)]
	_ = x[Remainder-(44)]
	_ = x[Reduce-(45)]
	_ = x[ReduceWindow-(46)]
	_ = x[Reshape-(47)]
	_ = x[Reverse-(48)]
	_ = x[RngBitGenerator-(49)]
	_ = x[RoundNearestAfz-(50)]
	_ = x[RoundNearestEven-(51)]
	_ = x[Rsqrt-(52)]
	_ = x[Scatter-(53)]
	_ = x[Select-(54)]
	_ = x[SelectAndScatter-(55)]
	_ = x[ShiftLeft-(56)]
	_ = x[ShiftRightArithmetic-(57)]
	_ = x[ShiftRightLogical-(58)]
	_ = x[Sign-(59)]
	_ = x[Sine-(60)]
	_ = x[Slice-(61)]
	_ = x[Sqrt-(62)]
	_ = x[Subtract-(63)]
	_ = x[Tan-(64)]
	_ = x[Tanh-(65)]
	_ = x[Transpose-(66)]
	_ = x[Xor-(67)]
	_ = x[BatchNormForInference-(68)]
	_ = x[BatchNormForTraining-(69)]
	_ = x[BatchNormGradient-(70)]
	_ = x[Case-(71)]
	_ = x[Cholesky-(72)]
	_ = x[CollectiveBroadcast-(73)]
	_ = x[CollectivePermute-(74)]
	_ = x[Composite-(75)]
	_ = x[CustomCall-(76)]
	_ = x[DynamicBroadcastInDim-(77)]
	_ = x[DynamicConv-(78)]
	_ = x[DynamicGather-(79)]
	_ = x[DynamicIota-(80)]
	_ = x[DynamicPad-(81)]
	_ = x[DynamicReshape-(82)]
	_ = x[DynamicUpdateSlice-(83)]
	_ = x[GetDimensionSize-(84)]
	_ = x[GetTupleElement-(85)]
	_ = x[If-(86)]
	_ = x[Infeed-(87)]
	_ = x[OptimizationBarrier-(88)]
	_ = x[Outfeed-(89)]
	_ = x[PartitionId-(90)]
	_ = x[Recv-(91)]
	_ = x[ReducePrecision-(92)]
	_ = x[ReduceScatter-(93)]
	_ = x[Send-(94)]
	_ = x[TriangularSolve-(95)]
	_ = x[Tuple-(96)]
	_ = x[UniformDequantize-(97)]
	_ = x[UniformQuantize-(98)]
	_ = x[While-(99)]
	_ = x[Last-(100)]
}

var _OpTypeValues = []OpType{Invalid, FuncReturn, Constant, Identity, Abs, Add, And, Atan2, BitcastConvert, BroadcastInDim, Cbrt, Ceil, Clamp, Compare, Complex, Concatenate, Convert, Convolution, Cosine, CountLeadingZeros, Divide, DotGeneral, Erf, Exponential, ExponentialMinusOne, Fft, Floor, Gather, Imag, IsFinite, Iota, Log, LogPlusOne, Logistic, Maximum, Minimum, Multiply, Negate, Not, Or, Pad, Popcnt, Power, Real, Remainder, Reduce, ReduceWindow, Reshape, Reverse, RngBitGenerator, RoundNearestAfz, RoundNearestEven, Rsqrt, Scatter, Select, SelectAndScatter, ShiftLeft, ShiftRightArithmetic, ShiftRightLogical, Sign, Sine, Slice, Sqrt, Subtract, Tan, Tanh, Transpose, Xor, BatchNormForInference, BatchNormForTraining, BatchNormGradient, Case, Cholesky, CollectiveBroadcast, CollectivePermute, Composite, CustomCall, DynamicBroadcastInDim, DynamicConv, DynamicGather, DynamicIota, DynamicPad, DynamicReshape, DynamicUpdateSlice, GetDimensionSize, GetTupleElement, If, Infeed, OptimizationBarrier, Outfeed, PartitionId, Recv, ReducePrecision, ReduceScatter, Send, TriangularSolve, Tuple, UniformDequantize, UniformQuantize, While, Last}

var _OpTypeNameToValueMap = map[string]OpType{
	_OpTypeName[0:7]:          Invalid,
	_OpTypeLowerName[0:7]:     Invalid,
	_OpTypeName[7:17]:         FuncReturn,
	_OpTypeLowerName[7:17]:    FuncReturn,
	_OpTypeName[17:25]:        Constant,
	_OpTypeLowerName[17:25]:   Constant,
	_OpTypeName[25:33]:        Identity,
	_OpTypeLowerName[25:33]:   Identity,
	_OpTypeName[33:36]:        Abs,
	_OpTypeLowerName[33:36]:   Abs,
	_OpTypeName[36:39]:        Add,
	_OpTypeLowerName[36:39]:   Add,
	_OpTypeName[39:42]:        And,
	_OpTypeLowerName[39:42]:   And,
	_OpTypeName[42:47]:        Atan2,
	_OpTypeLowerName[42:47]:   Atan2,
	_OpTypeName[47:61]:        BitcastConvert,
	_OpTypeLowerName[47:61]:   BitcastConvert,
	_OpTypeName[61:75]:        BroadcastInDim,
	_OpTypeLowerName[61:75]:   BroadcastInDim,
	_OpTypeName[75:79]:        Cbrt,
	_OpTypeLowerName[75:79]:   Cbrt,
	_OpTypeName[79:83]:        Ceil,
	_OpTypeLowerName[79:83]:   Ceil,
	_OpTypeName[83:88]:        Clamp,
	_OpTypeLowerName[83:88]:   Clamp,
	_OpTypeName[88:95]:        Compare,
	_OpTypeLowerName[88:95]:   Compare,
	_OpTypeName[95:102]:       Complex,
	_OpTypeLowerName[95:102]:  Complex,
	_OpTypeName[102:113]:      Concatenate,
	_OpTypeLowerName[102:113]: Concatenate,
	_OpTypeName[113:120]:      Convert,
	_OpTypeLowerName[113:120]: Convert,
	_OpTypeName[120:131]:      Convolution,
	_OpTypeLowerName[120:131]: Convolution,
	_OpTypeName[131:137]:      Cosine,
	_OpTypeLowerName[131:137]: Cosine,
	_OpTypeName[137:154]:      CountLeadingZeros,
	_OpTypeLowerName[137:154]: CountLeadingZeros,
	_OpTypeName[154:160]:      Divide,
	_OpTypeLowerName[154:160]: Divide,
	_OpTypeName[160:170]:      DotGeneral,
	_OpTypeLowerName[160:170]: DotGeneral,
	_OpTypeName[170:173]:      Erf,
	_OpTypeLowerName[170:173]: Erf,
	_OpTypeName[173:184]:      Exponential,
	_OpTypeLowerName[173:184]: Exponential,
	_OpTypeName[184:203]:      ExponentialMinusOne,
	_OpTypeLowerName[184:203]: ExponentialMinusOne,
	_OpTypeName[203:206]:      Fft,
	_OpTypeLowerName[203:206]: Fft,
	_OpTypeName[206:211]:      Floor,
	_OpTypeLowerName[206:211]: Floor,
	_OpTypeName[211:217]:      Gather,
	_OpTypeLowerName[211:217]: Gather,
	_OpTypeName[217:221]:      Imag,
	_OpTypeLowerName[217:221]: Imag,
	_OpTypeName[221:229]:      IsFinite,
	_OpTypeLowerName[221:229]: IsFinite,
	_OpTypeName[229:233]:      Iota,
	_OpTypeLowerName[229:233]: Iota,
	_OpTypeName[233:236]:      Log,
	_OpTypeLowerName[233:236]: Log,
	_OpTypeName[236:246]:      LogPlusOne,
	_OpTypeLowerName[236:246]: LogPlusOne,
	_OpTypeName[246:254]:      Logistic,
	_OpTypeLowerName[246:254]: Logistic,
	_OpTypeName[254:261]:      Maximum,
	_OpTypeLowerName[254:261]: Maximum,
	_OpTypeName[261:268]:      Minimum,
	_OpTypeLowerName[261:268]: Minimum,
	_OpTypeName[268:276]:      Multiply,
	_OpTypeLowerName[268:276]: Multiply,
	_OpTypeName[276:282]:      Negate,
	_OpTypeLowerName[276:282]: Negate,
	_OpTypeName[282:285]:      Not,
	_OpTypeLowerName[282:285]: Not,
	_OpTypeName[285:287]:      Or,
	_OpTypeLowerName[285:287]: Or,
	_OpTypeName[287:290]:      Pad,
	_OpTypeLowerName[287:290]: Pad,
	_OpTypeName[290:296]:      Popcnt,
	_OpTypeLowerName[290:296]: Popcnt,
	_OpTypeName[296:301]:      Power,
	_OpTypeLowerName[296:301]: Power,
	_OpTypeName[301:305]:      Real,
	_OpTypeLowerName[301:305]: Real,
	_OpTypeName[305:314]:      Remainder,
	_OpTypeLowerName[305:314]: Remainder,
	_OpTypeName[314:320]:      Reduce,
	_OpTypeLowerName[314:320]: Reduce,
	_OpTypeName[320:332]:      ReduceWindow,
	_OpTypeLowerName[320:332]: ReduceWindow,
	_OpTypeName[332:339]:      Reshape,
	_OpTypeLowerName[332:339]: Reshape,
	_OpTypeName[339:346]:      Reverse,
	_OpTypeLowerName[339:346]: Reverse,
	_OpTypeName[346:361]:      RngBitGenerator,
	_OpTypeLowerName[346:361]: RngBitGenerator,
	_OpTypeName[361:376]:      RoundNearestAfz,
	_OpTypeLowerName[361:376]: RoundNearestAfz,
	_OpTypeName[376:392]:      RoundNearestEven,
	_OpTypeLowerName[376:392]: RoundNearestEven,
	_OpTypeName[392:397]:      Rsqrt,
	_OpTypeLowerName[392:397]: Rsqrt,
	_OpTypeName[397:404]:      Scatter,
	_OpTypeLowerName[397:404]: Scatter,
	_OpTypeName[404:410]:      Select,
	_OpTypeLowerName[404:410]: Select,
	_OpTypeName[410:426]:      SelectAndScatter,
	_OpTypeLowerName[410:426]: SelectAndScatter,
	_OpTypeName[426:435]:      ShiftLeft,
	_OpTypeLowerName[426:435]: ShiftLeft,
	_OpTypeName[435:455]:      ShiftRightArithmetic,
	_OpTypeLowerName[435:455]: ShiftRightArithmetic,
	_OpTypeName[455:472]:      ShiftRightLogical,
	_OpTypeLowerName[455:472]: ShiftRightLogical,
	_OpTypeName[472:476]:      Sign,
	_OpTypeLowerName[472:476]: Sign,
	_OpTypeName[476:480]:      Sine,
	_OpTypeLowerName[476:480]: Sine,
	_OpTypeName[480:485]:      Slice,
	_OpTypeLowerName[480:485]: Slice,
	_OpTypeName[485:489]:      Sqrt,
	_OpTypeLowerName[485:489]: Sqrt,
	_OpTypeName[489:497]:      Subtract,
	_OpTypeLowerName[489:497]: Subtract,
	_OpTypeName[497:500]:      Tan,
	_OpTypeLowerName[497:500]: Tan,
	_OpTypeName[500:504]:      Tanh,
	_OpTypeLowerName[500:504]: Tanh,
	_OpTypeName[504:513]:      Transpose,
	_OpTypeLowerName[504:513]: Transpose,
	_OpTypeName[513:516]:      Xor,
	_OpTypeLowerName[513:516]: Xor,
	_OpTypeName[516:537]:      BatchNormForInference,
	_OpTypeLowerName[516:537]: BatchNormForInference,
	_OpTypeName[537:557]:      BatchNormForTraining,
	_OpTypeLowerName[537:557]: BatchNormForTraining,
	_OpTypeName[557:574]:      BatchNormGradient,
	_OpTypeLowerName[557:574]: BatchNormGradient,
	_OpTypeName[574:578]:      Case,
	_OpTypeLowerName[574:578]: Case,
	_OpTypeName[578:586]:      Cholesky,
	_OpTypeLowerName[578:586]: Cholesky,
	_OpTypeName[586:605]:      CollectiveBroadcast,
	_OpTypeLowerName[586:605]: CollectiveBroadcast,
	_OpTypeName[605:622]:      CollectivePermute,
	_OpTypeLowerName[605:622]: CollectivePermute,
	_OpTypeName[622:631]:      Composite,
	_OpTypeLowerName[622:631]: Composite,
	_OpTypeName[631:641]:      CustomCall,
	_OpTypeLowerName[631:641]: CustomCall,
	_OpTypeName[641:662]:      DynamicBroadcastInDim,
	_OpTypeLowerName[641:662]: DynamicBroadcastInDim,
	_OpTypeName[662:673]:      DynamicConv,
	_OpTypeLowerName[662:673]: DynamicConv,
	_OpTypeName[673:686]:      DynamicGather,
	_OpTypeLowerName[673:686]: DynamicGather,
	_OpTypeName[686:697]:      DynamicIota,
	_OpTypeLowerName[686:697]: DynamicIota,
	_OpTypeName[697:707]:      DynamicPad,
	_OpTypeLowerName[697:707]: DynamicPad,
	_OpTypeName[707:721]:      DynamicReshape,
	_OpTypeLowerName[707:721]: DynamicReshape,
	_OpTypeName[721:739]:      DynamicUpdateSlice,
	_OpTypeLowerName[721:739]: DynamicUpdateSlice,
	_OpTypeName[739:755]:      GetDimensionSize,
	_OpTypeLowerName[739:755]: GetDimensionSize,
	_OpTypeName[755:770]:      GetTupleElement,
	_OpTypeLowerName[755:770]: GetTupleElement,
	_OpTypeName[770:772]:      If,
	_OpTypeLowerName[770:772]: If,
	_OpTypeName[772:778]:      Infeed,
	_OpTypeLowerName[772:778]: Infeed,
	_OpTypeName[778:797]:      OptimizationBarrier,
	_OpTypeLowerName[778:797]: OptimizationBarrier,
	_OpTypeName[797:804]:      Outfeed,
	_OpTypeLowerName[797:804]: Outfeed,
	_OpTypeName[804:815]:      PartitionId,
	_OpTypeLowerName[804:815]: PartitionId,
	_OpTypeName[815:819]:      Recv,
	_OpTypeLowerName[815:819]: Recv,
	_OpTypeName[819:834]:      ReducePrecision,
	_OpTypeLowerName[819:834]: ReducePrecision,
	_OpTypeName[834:847]:      ReduceScatter,
	_OpTypeLowerName[834:847]: ReduceScatter,
	_OpTypeName[847:851]:      Send,
	_OpTypeLowerName[847:851]: Send,
	_OpTypeName[851:866]:      TriangularSolve,
	_OpTypeLowerName[851:866]: TriangularSolve,
	_OpTypeName[866:871]:      Tuple,
	_OpTypeLowerName[866:871]: Tuple,
	_OpTypeName[871:888]:      UniformDequantize,
	_OpTypeLowerName[871:888]: UniformDequantize,
	_OpTypeName[888:903]:      UniformQuantize,
	_OpTypeLowerName[888:903]: UniformQuantize,
	_OpTypeName[903:908]:      While,
	_OpTypeLowerName[903:908]: While,
	_OpTypeName[908:912]:      Last,
	_OpTypeLowerName[908:912]: Last,
}

var _OpTypeNames = []string{
	_OpTypeName[0:7],
	_OpTypeName[7:17],
	_OpTypeName[17:25],
	_OpTypeName[25:33],
	_OpTypeName[33:36],
	_OpTypeName[36:39],
	_OpTypeName[39:42],
	_OpTypeName[42:47],
	_OpTypeName[47:61],
	_OpTypeName[61:75],
	_OpTypeName[75:79],
	_OpTypeName[79:83],
	_OpTypeName[83:88],
	_OpTypeName[88:95],
	_OpTypeName[95:102],
	_OpTypeName[102:113],
	_OpTypeName[113:120],
	_OpTypeName[120:131],
	_OpTypeName[131:137],
	_OpTypeName[137:154],
	_OpTypeName[154:160],
	_OpTypeName[160:170],
	_OpTypeName[170:173],
	_OpTypeName[173:184],
	_OpTypeName[184:203],
	_OpTypeName[203:206],
	_OpTypeName[206:211],
	_OpTypeName[211:217],
	_OpTypeName[217:221],
	_OpTypeName[221:229],
	_OpTypeName[229:233],
	_OpTypeName[233:236],
	_OpTypeName[236:246],
	_OpTypeName[246:254],
	_OpTypeName[254:261],
	_OpTypeName[261:268],
	_OpTypeName[268:276],
	_OpTypeName[276:282],
	_OpTypeName[282:285],
	_OpTypeName[285:287],
	_OpTypeName[287:290],
	_OpTypeName[290:296],
	_OpTypeName[296:301],
	_OpTypeName[301:305],
	_OpTypeName[305:314],
	_OpTypeName[314:320],
	_OpTypeName[320:332],
	_OpTypeName[332:339],
	_OpTypeName[339:346],
	_OpTypeName[346:361],
	_OpTypeName[361:376],
	_OpTypeName[376:392],
	_OpTypeName[392:397],
	_OpTypeName[397:404],
	_OpTypeName[404:410],
	_OpTypeName[410:426],
	_OpTypeName[426:435],
	_OpTypeName[435:455],
	_OpTypeName[455:472],
	_OpTypeName[472:476],
	_OpTypeName[476:480],
	_OpTypeName[480:485],
	_OpTypeName[485:489],
	_OpTypeName[489:497],
	_OpTypeName[497:500],
	_OpTypeName[500:504],
	_OpTypeName[504:513],
	_OpTypeName[513:516],
	_OpTypeName[516:537],
	_OpTypeName[537:557],
	_OpTypeName[557:574],
	_OpTypeName[574:578],
	_OpTypeName[578:586],
	_OpTypeName[586:605],
	_OpTypeName[605:622],
	_OpTypeName[622:631],
	_OpTypeName[631:641],
	_OpTypeName[641:662],
	_OpTypeName[662:673],
	_OpTypeName[673:686],
	_OpTypeName[686:697],
	_OpTypeName[697:707],
	_OpTypeName[707:721],
	_OpTypeName[721:739],
	_OpTypeName[739:755],
	_OpTypeName[755:770],
	_OpTypeName[770:772],
	_OpTypeName[772:778],
	_OpTypeName[778:797],
	_OpTypeName[797:804],
	_OpTypeName[804:815],
	_OpTypeName[815:819],
	_OpTypeName[819:834],
	_OpTypeName[834:847],
	_OpTypeName[847:851],
	_OpTypeName[851:866],
	_OpTypeName[866:871],
	_OpTypeName[871:888],
	_OpTypeName[888:903],
	_OpTypeName[903:908],
	_OpTypeName[908:912],
}

// OpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpTypeString(s string) (OpType, error) {
	if val, ok := _OpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OpType values", s)
}

// OpTypeValues returns all values of the enum
func OpTypeValues() []OpType {
	return _OpTypeValues
}

// OpTypeStrings returns a slice of all String values of the enum
func OpTypeStrings() []string {
	strs := make([]string, len(_OpTypeNames))
	copy(strs, _OpTypeNames)
	return strs
}

// IsAOpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OpType) IsAOpType() bool {
	for _, v := range _OpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
