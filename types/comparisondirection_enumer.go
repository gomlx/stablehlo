// Code generated by "enumer -type=ComparisonDirection -trimprefix=Compare ops.go"; DO NOT EDIT.

package types

import (
	"fmt"
	"strings"
)

const _ComparisonDirectionName = "EQGEGTLELTNE"

var _ComparisonDirectionIndex = [...]uint8{0, 2, 4, 6, 8, 10, 12}

const _ComparisonDirectionLowerName = "eqgegtleltne"

func (i ComparisonDirection) String() string {
	if i < 0 || i >= ComparisonDirection(len(_ComparisonDirectionIndex)-1) {
		return fmt.Sprintf("ComparisonDirection(%d)", i)
	}
	return _ComparisonDirectionName[_ComparisonDirectionIndex[i]:_ComparisonDirectionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparisonDirectionNoOp() {
	var x [1]struct{}
	_ = x[CompareEQ-(0)]
	_ = x[CompareGE-(1)]
	_ = x[CompareGT-(2)]
	_ = x[CompareLE-(3)]
	_ = x[CompareLT-(4)]
	_ = x[CompareNE-(5)]
}

var _ComparisonDirectionValues = []ComparisonDirection{CompareEQ, CompareGE, CompareGT, CompareLE, CompareLT, CompareNE}

var _ComparisonDirectionNameToValueMap = map[string]ComparisonDirection{
	_ComparisonDirectionName[0:2]:        CompareEQ,
	_ComparisonDirectionLowerName[0:2]:   CompareEQ,
	_ComparisonDirectionName[2:4]:        CompareGE,
	_ComparisonDirectionLowerName[2:4]:   CompareGE,
	_ComparisonDirectionName[4:6]:        CompareGT,
	_ComparisonDirectionLowerName[4:6]:   CompareGT,
	_ComparisonDirectionName[6:8]:        CompareLE,
	_ComparisonDirectionLowerName[6:8]:   CompareLE,
	_ComparisonDirectionName[8:10]:       CompareLT,
	_ComparisonDirectionLowerName[8:10]:  CompareLT,
	_ComparisonDirectionName[10:12]:      CompareNE,
	_ComparisonDirectionLowerName[10:12]: CompareNE,
}

var _ComparisonDirectionNames = []string{
	_ComparisonDirectionName[0:2],
	_ComparisonDirectionName[2:4],
	_ComparisonDirectionName[4:6],
	_ComparisonDirectionName[6:8],
	_ComparisonDirectionName[8:10],
	_ComparisonDirectionName[10:12],
}

// ComparisonDirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonDirectionString(s string) (ComparisonDirection, error) {
	if val, ok := _ComparisonDirectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparisonDirectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparisonDirection values", s)
}

// ComparisonDirectionValues returns all values of the enum
func ComparisonDirectionValues() []ComparisonDirection {
	return _ComparisonDirectionValues
}

// ComparisonDirectionStrings returns a slice of all String values of the enum
func ComparisonDirectionStrings() []string {
	strs := make([]string, len(_ComparisonDirectionNames))
	copy(strs, _ComparisonDirectionNames)
	return strs
}

// IsAComparisonDirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparisonDirection) IsAComparisonDirection() bool {
	for _, v := range _ComparisonDirectionValues {
		if i == v {
			return true
		}
	}
	return false
}
