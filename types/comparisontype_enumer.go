// Code generated by "enumer -type=ComparisonType ops.go"; DO NOT EDIT.

package types

import (
	"fmt"
	"strings"
)

const _ComparisonTypeName = "CompareFloatCompareTotalOrderCompareSignedCompareUnsigned"

var _ComparisonTypeIndex = [...]uint8{0, 12, 29, 42, 57}

const _ComparisonTypeLowerName = "comparefloatcomparetotalordercomparesignedcompareunsigned"

func (i ComparisonType) String() string {
	if i < 0 || i >= ComparisonType(len(_ComparisonTypeIndex)-1) {
		return fmt.Sprintf("ComparisonType(%d)", i)
	}
	return _ComparisonTypeName[_ComparisonTypeIndex[i]:_ComparisonTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparisonTypeNoOp() {
	var x [1]struct{}
	_ = x[CompareFloat-(0)]
	_ = x[CompareTotalOrder-(1)]
	_ = x[CompareSigned-(2)]
	_ = x[CompareUnsigned-(3)]
}

var _ComparisonTypeValues = []ComparisonType{CompareFloat, CompareTotalOrder, CompareSigned, CompareUnsigned}

var _ComparisonTypeNameToValueMap = map[string]ComparisonType{
	_ComparisonTypeName[0:12]:       CompareFloat,
	_ComparisonTypeLowerName[0:12]:  CompareFloat,
	_ComparisonTypeName[12:29]:      CompareTotalOrder,
	_ComparisonTypeLowerName[12:29]: CompareTotalOrder,
	_ComparisonTypeName[29:42]:      CompareSigned,
	_ComparisonTypeLowerName[29:42]: CompareSigned,
	_ComparisonTypeName[42:57]:      CompareUnsigned,
	_ComparisonTypeLowerName[42:57]: CompareUnsigned,
}

var _ComparisonTypeNames = []string{
	_ComparisonTypeName[0:12],
	_ComparisonTypeName[12:29],
	_ComparisonTypeName[29:42],
	_ComparisonTypeName[42:57],
}

// ComparisonTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonTypeString(s string) (ComparisonType, error) {
	if val, ok := _ComparisonTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparisonTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparisonType values", s)
}

// ComparisonTypeValues returns all values of the enum
func ComparisonTypeValues() []ComparisonType {
	return _ComparisonTypeValues
}

// ComparisonTypeStrings returns a slice of all String values of the enum
func ComparisonTypeStrings() []string {
	strs := make([]string, len(_ComparisonTypeNames))
	copy(strs, _ComparisonTypeNames)
	return strs
}

// IsAComparisonType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparisonType) IsAComparisonType() bool {
	for _, v := range _ComparisonTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
