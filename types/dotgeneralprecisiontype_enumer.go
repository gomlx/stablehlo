// Code generated by "enumer -type=DotGeneralPrecisionType -trimprefix=DotGeneral ops.go"; DO NOT EDIT.

package types

import (
	"fmt"
	"strings"
)

const _DotGeneralPrecisionTypeName = "PrecisionDefaultPrecisionHighPrecisionHighest"

var _DotGeneralPrecisionTypeIndex = [...]uint8{0, 16, 29, 45}

const _DotGeneralPrecisionTypeLowerName = "precisiondefaultprecisionhighprecisionhighest"

func (i DotGeneralPrecisionType) String() string {
	if i < 0 || i >= DotGeneralPrecisionType(len(_DotGeneralPrecisionTypeIndex)-1) {
		return fmt.Sprintf("DotGeneralPrecisionType(%d)", i)
	}
	return _DotGeneralPrecisionTypeName[_DotGeneralPrecisionTypeIndex[i]:_DotGeneralPrecisionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DotGeneralPrecisionTypeNoOp() {
	var x [1]struct{}
	_ = x[DotGeneralPrecisionDefault-(0)]
	_ = x[DotGeneralPrecisionHigh-(1)]
	_ = x[DotGeneralPrecisionHighest-(2)]
}

var _DotGeneralPrecisionTypeValues = []DotGeneralPrecisionType{DotGeneralPrecisionDefault, DotGeneralPrecisionHigh, DotGeneralPrecisionHighest}

var _DotGeneralPrecisionTypeNameToValueMap = map[string]DotGeneralPrecisionType{
	_DotGeneralPrecisionTypeName[0:16]:       DotGeneralPrecisionDefault,
	_DotGeneralPrecisionTypeLowerName[0:16]:  DotGeneralPrecisionDefault,
	_DotGeneralPrecisionTypeName[16:29]:      DotGeneralPrecisionHigh,
	_DotGeneralPrecisionTypeLowerName[16:29]: DotGeneralPrecisionHigh,
	_DotGeneralPrecisionTypeName[29:45]:      DotGeneralPrecisionHighest,
	_DotGeneralPrecisionTypeLowerName[29:45]: DotGeneralPrecisionHighest,
}

var _DotGeneralPrecisionTypeNames = []string{
	_DotGeneralPrecisionTypeName[0:16],
	_DotGeneralPrecisionTypeName[16:29],
	_DotGeneralPrecisionTypeName[29:45],
}

// DotGeneralPrecisionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DotGeneralPrecisionTypeString(s string) (DotGeneralPrecisionType, error) {
	if val, ok := _DotGeneralPrecisionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DotGeneralPrecisionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DotGeneralPrecisionType values", s)
}

// DotGeneralPrecisionTypeValues returns all values of the enum
func DotGeneralPrecisionTypeValues() []DotGeneralPrecisionType {
	return _DotGeneralPrecisionTypeValues
}

// DotGeneralPrecisionTypeStrings returns a slice of all String values of the enum
func DotGeneralPrecisionTypeStrings() []string {
	strs := make([]string, len(_DotGeneralPrecisionTypeNames))
	copy(strs, _DotGeneralPrecisionTypeNames)
	return strs
}

// IsADotGeneralPrecisionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DotGeneralPrecisionType) IsADotGeneralPrecisionType() bool {
	for _, v := range _DotGeneralPrecisionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
