// Code generated by "enumer -type=RngBitGeneratorAlgorithm -trimprefix=Rng -transform=snake ops.go"; DO NOT EDIT.

package types

import (
	"fmt"
	"strings"
)

const _RngBitGeneratorAlgorithmName = "defaultphiloxthree_fry"

var _RngBitGeneratorAlgorithmIndex = [...]uint8{0, 7, 13, 22}

const _RngBitGeneratorAlgorithmLowerName = "defaultphiloxthree_fry"

func (i RngBitGeneratorAlgorithm) String() string {
	if i < 0 || i >= RngBitGeneratorAlgorithm(len(_RngBitGeneratorAlgorithmIndex)-1) {
		return fmt.Sprintf("RngBitGeneratorAlgorithm(%d)", i)
	}
	return _RngBitGeneratorAlgorithmName[_RngBitGeneratorAlgorithmIndex[i]:_RngBitGeneratorAlgorithmIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RngBitGeneratorAlgorithmNoOp() {
	var x [1]struct{}
	_ = x[RngDefault-(0)]
	_ = x[RngPhilox-(1)]
	_ = x[RngThreeFry-(2)]
}

var _RngBitGeneratorAlgorithmValues = []RngBitGeneratorAlgorithm{RngDefault, RngPhilox, RngThreeFry}

var _RngBitGeneratorAlgorithmNameToValueMap = map[string]RngBitGeneratorAlgorithm{
	_RngBitGeneratorAlgorithmName[0:7]:        RngDefault,
	_RngBitGeneratorAlgorithmLowerName[0:7]:   RngDefault,
	_RngBitGeneratorAlgorithmName[7:13]:       RngPhilox,
	_RngBitGeneratorAlgorithmLowerName[7:13]:  RngPhilox,
	_RngBitGeneratorAlgorithmName[13:22]:      RngThreeFry,
	_RngBitGeneratorAlgorithmLowerName[13:22]: RngThreeFry,
}

var _RngBitGeneratorAlgorithmNames = []string{
	_RngBitGeneratorAlgorithmName[0:7],
	_RngBitGeneratorAlgorithmName[7:13],
	_RngBitGeneratorAlgorithmName[13:22],
}

// RngBitGeneratorAlgorithmString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RngBitGeneratorAlgorithmString(s string) (RngBitGeneratorAlgorithm, error) {
	if val, ok := _RngBitGeneratorAlgorithmNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RngBitGeneratorAlgorithmNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RngBitGeneratorAlgorithm values", s)
}

// RngBitGeneratorAlgorithmValues returns all values of the enum
func RngBitGeneratorAlgorithmValues() []RngBitGeneratorAlgorithm {
	return _RngBitGeneratorAlgorithmValues
}

// RngBitGeneratorAlgorithmStrings returns a slice of all String values of the enum
func RngBitGeneratorAlgorithmStrings() []string {
	strs := make([]string, len(_RngBitGeneratorAlgorithmNames))
	copy(strs, _RngBitGeneratorAlgorithmNames)
	return strs
}

// IsARngBitGeneratorAlgorithm returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RngBitGeneratorAlgorithm) IsARngBitGeneratorAlgorithm() bool {
	for _, v := range _RngBitGeneratorAlgorithmValues {
		if i == v {
			return true
		}
	}
	return false
}
